
20230824_motionTracking_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08016ff0  08016ff0  000140f5  2**0
                  CONTENTS
  1 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010b48  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000017c0  08010c88  08010c88  00011c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08012448  08012448  00013448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08012450  08012450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08012454  08012454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000094  20000004  08012458  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000049  20000098  080124ec  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200000e4  08012535  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001b4ec  200000f8  08012546  000140f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001b5e4  08012546  000145e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000140f5  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00015000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00015000  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00015000  2**2
                  ALLOC
 16 .debug_info   0003111b  00000000  00000000  00014125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000719e  00000000  00000000  00045240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002da0  00000000  00000000  0004c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000022bc  00000000  00000000  0004f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002fd19  00000000  00000000  0005143c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00034735  00000000  00000000  00081155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00106acd  00000000  00000000  000b588a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  001bc357  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000ca04  00000000  00000000  001bc39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000af  00000000  00000000  001c8da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f8 	.word	0x200000f8
 800015c:	00000000 	.word	0x00000000
 8000160:	08010c70 	.word	0x08010c70

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000fc 	.word	0x200000fc
 800017c:	08010c70 	.word	0x08010c70

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <APPD_EnableCPU2+0x34>)
 8000bb0:	1d3c      	adds	r4, r7, #4
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	c403      	stmia	r4!, {r0, r1}
 8000bbe:	8022      	strh	r2, [r4, #0]
 8000bc0:	3402      	adds	r4, #2
 8000bc2:	0c13      	lsrs	r3, r2, #16
 8000bc4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bc6:	f009 fa6f 	bl	800a0a8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f008 fd08 	bl	80095e2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bd2:	bf00      	nop
}
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	08010c88 	.word	0x08010c88

08000be0 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <LL_PWR_SMPS_Enable+0x1c>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <LL_PWR_SMPS_Enable+0x1c>)
 8000bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bee:	61d3      	str	r3, [r2, #28]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	58000400 	.word	0x58000400

08000c00 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000c10:	4904      	ldr	r1, [pc, #16]	@ (8000c24 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61cb      	str	r3, [r1, #28]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	58000400 	.word	0x58000400

08000c28 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d108      	bne.n	8000c54 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f023 020f 	bic.w	r2, r3, #15
 8000c4a:	4913      	ldr	r1, [pc, #76]	@ (8000c98 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8000c52:	e019      	b.n	8000c88 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3b06      	subs	r3, #6
 8000c58:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4413      	add	r3, r2
 8000c60:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	da02      	bge.n	8000c6e <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e004      	b.n	8000c78 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	dd01      	ble.n	8000c78 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8000c74:	230f      	movs	r3, #15
 8000c76:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f023 020f 	bic.w	r2, r3, #15
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	4905      	ldr	r1, [pc, #20]	@ (8000c98 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61cb      	str	r3, [r1, #28]
}
 8000c88:	bf00      	nop
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	1fff7558 	.word	0x1fff7558
 8000c98:	58000400 	.word	0x58000400

08000c9c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000caa:	f023 0207 	bic.w	r2, r3, #7
 8000cae:	4905      	ldr	r1, [pc, #20]	@ (8000cc4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	58000400 	.word	0x58000400

08000cc8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <LL_EXTI_EnableIT_32_63+0x24>)
 8000cd2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000cd6:	4905      	ldr	r1, [pc, #20]	@ (8000cec <LL_EXTI_EnableIT_32_63+0x24>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	58000800 	.word	0x58000800

08000cf0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000cfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d0a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d16:	4313      	orrs	r3, r2
 8000d18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	cafecafe 	.word	0xcafecafe

08000d2c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000d3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	608b      	str	r3, [r1, #8]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <LL_DBGMCU_GetDeviceID+0x18>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e0042000 	.word	0xe0042000

08000d70 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <LL_DBGMCU_GetRevisionID+0x18>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	b29b      	uxth	r3, r3
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e0042000 	.word	0xe0042000

08000d8c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <LL_LPM_EnableSleep+0x1c>)
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <LL_LPM_EnableSleep+0x1c>)
 8000d96:	f023 0304 	bic.w	r3, r3, #4
 8000d9a:	6113      	str	r3, [r2, #16]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	22ff      	movs	r2, #255	@ 0xff
 8000db8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	22ca      	movs	r2, #202	@ 0xca
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2253      	movs	r2, #83	@ 0x53
 8000dd8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f023 0207 	bic.w	r2, r3, #7
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <MX_APPE_Config+0x18>)
 8000e12:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e16:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000e18:	f000 f829 	bl	8000e6e <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000e1c:	f000 f82e 	bl	8000e7c <Config_HSE>

  return;
 8000e20:	bf00      	nop
}
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58004000 	.word	0x58004000

08000e28 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000e2c:	f000 f83a 	bl	8000ea4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000e30:	f000 f852 	bl	8000ed8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000e34:	4903      	ldr	r1, [pc, #12]	@ (8000e44 <MX_APPE_Init+0x1c>)
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 fd9e 	bl	8001978 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000e3c:	f000 f85a 	bl	8000ef4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000e40:	bf00      	nop
}
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000318 	.word	0x20000318

08000e48 <Init_Smps>:

void Init_Smps(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fed7 	bl	8000c00 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000e52:	2004      	movs	r0, #4
 8000e54:	f7ff fee8 	bl	8000c28 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8000e58:	f7ff fec2 	bl	8000be0 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000e5c:	bf00      	nop
}
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <Init_Exti>:

void Init_Exti(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000e64:	2050      	movs	r0, #80	@ 0x50
 8000e66:	f7ff ff2f 	bl	8000cc8 <LL_EXTI_EnableIT_32_63>

  return;
 8000e6a:	bf00      	nop
}
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000e72:	bf00      	nop
}
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f009 f99c 	bl	800a1c0 <OTP_Read>
 8000e88:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	799b      	ldrb	r3, [r3, #6]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff2b 	bl	8000cf0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
}
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <System_Init>:

static void System_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  Init_Smps();
 8000ea8:	f7ff ffce 	bl	8000e48 <Init_Smps>

  Init_Exti();
 8000eac:	f7ff ffd8 	bl	8000e60 <Init_Exti>

  Init_Rtc();
 8000eb0:	f000 f802 	bl	8000eb8 <Init_Rtc>

  return;
 8000eb4:	bf00      	nop
}
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <Init_Rtc+0x1c>)
 8000ebe:	f7ff ff82 	bl	8000dc6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <Init_Rtc+0x1c>)
 8000ec6:	f7ff ff8e 	bl	8000de6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000eca:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <Init_Rtc+0x1c>)
 8000ecc:	f7ff ff6e 	bl	8000dac <LL_RTC_EnableWriteProtection>

  return;
 8000ed0:	bf00      	nop
}
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40002800 	.word	0x40002800

08000ed8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000edc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000ee0:	f7ff ff24 	bl	8000d2c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000ee4:	f00d fcec 	bl	800e8c0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000ee8:	2004      	movs	r0, #4
 8000eea:	f7ff fed7 	bl	8000c9c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000eee:	bf00      	nop
}
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8000efa:	f008 ff1f 	bl	8009d3c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000efe:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <appe_Tl_Init+0x50>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8000f06:	f00d fe4f 	bl	800eba8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <appe_Tl_Init+0x54>)
 8000f0c:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <appe_Tl_Init+0x58>)
 8000f10:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000f12:	463b      	mov	r3, r7
 8000f14:	4619      	mov	r1, r3
 8000f16:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <appe_Tl_Init+0x5c>)
 8000f18:	f008 fdd6 	bl	8009ac8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <appe_Tl_Init+0x60>)
 8000f1e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <appe_Tl_Init+0x64>)
 8000f22:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <appe_Tl_Init+0x68>)
 8000f26:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000f28:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000f2c:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	4618      	mov	r0, r3
 8000f34:	f009 f844 	bl	8009fc0 <TL_MM_Init>

  TL_Enable();
 8000f38:	f008 fefa 	bl	8009d30 <TL_Enable>

  return;
 8000f3c:	bf00      	nop
}
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	08009b01 	.word	0x08009b01
 8000f48:	20030734 	.word	0x20030734
 8000f4c:	08000f61 	.word	0x08000f61
 8000f50:	08000f79 	.word	0x08000f79
 8000f54:	2003094c 	.word	0x2003094c
 8000f58:	20030840 	.word	0x20030840
 8000f5c:	200301f8 	.word	0x200301f8

08000f60 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000f6a:	bf00      	nop
}
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	330b      	adds	r3, #11
 8000f86:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	d81f      	bhi.n	8000fd6 <APPE_SysUserEvtRx+0x5e>
 8000f96:	a201      	add	r2, pc, #4	@ (adr r2, 8000f9c <APPE_SysUserEvtRx+0x24>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fbd 	.word	0x08000fbd
 8000fa0:	08000fcf 	.word	0x08000fcf
 8000fa4:	08000fd7 	.word	0x08000fd7
 8000fa8:	08000fd7 	.word	0x08000fd7
 8000fac:	08000fd7 	.word	0x08000fd7
 8000fb0:	08000fd7 	.word	0x08000fd7
 8000fb4:	08000fd7 	.word	0x08000fd7
 8000fb8:	08000fd7 	.word	0x08000fd7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f008 fb3b 	bl	800963c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f81b 	bl	8001002 <APPE_SysEvtReadyProcessing>
    break;
 8000fcc:	e004      	b.n	8000fd8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f806 	bl	8000fe0 <APPE_SysEvtError>
    break;
 8000fd4:	e000      	b.n	8000fd8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000fd6:	bf00      	nop
  }

  return;
 8000fd8:	bf00      	nop
}
 8000fda:	3720      	adds	r7, #32
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	330b      	adds	r3, #11
 8000fee:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000ff6:	bf00      	nop
}
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b08a      	sub	sp, #40	@ 0x28
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	330b      	adds	r3, #11
 8001026:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3302      	adds	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d11d      	bne.n	8001072 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001036:	f7ff fdb7 	bl	8000ba8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800103a:	230f      	movs	r3, #15
 800103c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800103e:	237f      	movs	r3, #127	@ 0x7f
 8001040:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001042:	f7ff fe95 	bl	8000d70 <LL_DBGMCU_GetRevisionID>
 8001046:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104a:	b29b      	uxth	r3, r3
 800104c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800104e:	f7ff fe81 	bl	8000d54 <LL_DBGMCU_GetDeviceID>
 8001052:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	b29b      	uxth	r3, r3
 8001058:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4618      	mov	r0, r3
 8001060:	f008 fad6 	bl	8009610 <SHCI_C2_Config>

    APP_BLE_Init();
 8001064:	f009 feca 	bl	800adfc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001068:	2100      	movs	r1, #0
 800106a:	2001      	movs	r0, #1
 800106c:	f00d fc3a 	bl	800e8e4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001070:	e007      	b.n	8001082 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d103      	bne.n	8001082 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
  return;
 8001080:	bf00      	nop
 8001082:	bf00      	nop
}
 8001084:	3728      	adds	r7, #40	@ 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001092:	f001 ff5b 	bl	8002f4c <HAL_GetTick>
 8001096:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a2:	d00a      	beq.n	80010ba <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80010a4:	f001 ff6a 	bl	8002f7c <HAL_GetTickFreq>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b2:	e002      	b.n	80010ba <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80010b4:	f7ff fe6a 	bl	8000d8c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80010b8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80010ba:	f001 ff47 	bl	8002f4c <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d8f4      	bhi.n	80010b4 <HAL_Delay+0x2a>
  }
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f00d fc68 	bl	800e9b0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 80010e8:	f00d fc2c 	bl	800e944 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80010ec:	bf00      	nop
}
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80010fa:	f04f 30ff 	mov.w	r0, #4294967295
 80010fe:	f00d fc57 	bl	800e9b0 <UTIL_SEQ_Run>
  return;
 8001102:	bf00      	nop
}
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001112:	2100      	movs	r1, #0
 8001114:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8001118:	f00d fd68 	bl	800ebec <UTIL_SEQ_SetTask>
  return;
 800111c:	bf00      	nop
}
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800112c:	2002      	movs	r0, #2
 800112e:	f00d fdc9 	bl	800ecc4 <UTIL_SEQ_SetEvt>
  return;
 8001132:	bf00      	nop
}
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001142:	2002      	movs	r0, #2
 8001144:	f00d fdde 	bl	800ed04 <UTIL_SEQ_WaitEvt>
  return;
 8001148:	bf00      	nop
}
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <LL_EXTI_EnableIT_0_31>:
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <LL_EXTI_EnableIT_0_31+0x24>)
 800115a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800115e:	4905      	ldr	r1, [pc, #20]	@ (8001174 <LL_EXTI_EnableIT_0_31+0x24>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4313      	orrs	r3, r2
 8001164:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	58000800 	.word	0x58000800

08001178 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4904      	ldr	r1, [pc, #16]	@ (8001198 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]

}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	58000800 	.word	0x58000800

0800119c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <ReadRtcSsrValue+0x3c>)
 80011a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <ReadRtcSsrValue+0x3c>)
 80011ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80011b2:	e005      	b.n	80011c0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <ReadRtcSsrValue+0x3c>)
 80011ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011bc:	b29b      	uxth	r3, r3
 80011be:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d1f5      	bne.n	80011b4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80011c8:	683b      	ldr	r3, [r7, #0]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40002800 	.word	0x40002800

080011dc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80011ec:	79ba      	ldrb	r2, [r7, #6]
 80011ee:	491d      	ldr	r1, [pc, #116]	@ (8001264 <LinkTimerAfter+0x88>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	3315      	adds	r3, #21
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b0a      	cmp	r3, #10
 8001204:	d009      	beq.n	800121a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	4916      	ldr	r1, [pc, #88]	@ (8001264 <LinkTimerAfter+0x88>)
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	3314      	adds	r3, #20
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800121a:	79fa      	ldrb	r2, [r7, #7]
 800121c:	4911      	ldr	r1, [pc, #68]	@ (8001264 <LinkTimerAfter+0x88>)
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	3315      	adds	r3, #21
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	490c      	ldr	r1, [pc, #48]	@ (8001264 <LinkTimerAfter+0x88>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	3314      	adds	r3, #20
 800123e:	79ba      	ldrb	r2, [r7, #6]
 8001240:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001242:	79ba      	ldrb	r2, [r7, #6]
 8001244:	4907      	ldr	r1, [pc, #28]	@ (8001264 <LinkTimerAfter+0x88>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3315      	adds	r3, #21
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	701a      	strb	r2, [r3, #0]

  return;
 8001256:	bf00      	nop
}
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000114 	.word	0x20000114

08001268 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001278:	4b29      	ldr	r3, [pc, #164]	@ (8001320 <LinkTimerBefore+0xb8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	79ba      	ldrb	r2, [r7, #6]
 8001280:	429a      	cmp	r2, r3
 8001282:	d032      	beq.n	80012ea <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001284:	79ba      	ldrb	r2, [r7, #6]
 8001286:	4927      	ldr	r1, [pc, #156]	@ (8001324 <LinkTimerBefore+0xbc>)
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3314      	adds	r3, #20
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	4922      	ldr	r1, [pc, #136]	@ (8001324 <LinkTimerBefore+0xbc>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3315      	adds	r3, #21
 80012a8:	79fa      	ldrb	r2, [r7, #7]
 80012aa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	491d      	ldr	r1, [pc, #116]	@ (8001324 <LinkTimerBefore+0xbc>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	3315      	adds	r3, #21
 80012bc:	79ba      	ldrb	r2, [r7, #6]
 80012be:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	4918      	ldr	r1, [pc, #96]	@ (8001324 <LinkTimerBefore+0xbc>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	3314      	adds	r3, #20
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80012d4:	79ba      	ldrb	r2, [r7, #6]
 80012d6:	4913      	ldr	r1, [pc, #76]	@ (8001324 <LinkTimerBefore+0xbc>)
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	3314      	adds	r3, #20
 80012e4:	79fa      	ldrb	r2, [r7, #7]
 80012e6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80012e8:	e014      	b.n	8001314 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	490d      	ldr	r1, [pc, #52]	@ (8001324 <LinkTimerBefore+0xbc>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	3315      	adds	r3, #21
 80012fa:	79ba      	ldrb	r2, [r7, #6]
 80012fc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80012fe:	79ba      	ldrb	r2, [r7, #6]
 8001300:	4908      	ldr	r1, [pc, #32]	@ (8001324 <LinkTimerBefore+0xbc>)
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	440b      	add	r3, r1
 800130c:	3314      	adds	r3, #20
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	701a      	strb	r2, [r3, #0]
  return;
 8001312:	bf00      	nop
}
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000204 	.word	0x20000204
 8001324:	20000114 	.word	0x20000114

08001328 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001332:	4b4e      	ldr	r3, [pc, #312]	@ (800146c <linkTimer+0x144>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b0a      	cmp	r3, #10
 800133a:	d118      	bne.n	800136e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800133c:	4b4b      	ldr	r3, [pc, #300]	@ (800146c <linkTimer+0x144>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <linkTimer+0x148>)
 8001344:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001346:	4a49      	ldr	r2, [pc, #292]	@ (800146c <linkTimer+0x144>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4949      	ldr	r1, [pc, #292]	@ (8001474 <linkTimer+0x14c>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	3315      	adds	r3, #21
 800135c:	220a      	movs	r2, #10
 800135e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001360:	4b45      	ldr	r3, [pc, #276]	@ (8001478 <linkTimer+0x150>)
 8001362:	f04f 32ff 	mov.w	r2, #4294967295
 8001366:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	81fb      	strh	r3, [r7, #14]
 800136c:	e078      	b.n	8001460 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800136e:	f000 f909 	bl	8001584 <ReturnTimeElapsed>
 8001372:	4603      	mov	r3, r0
 8001374:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	493e      	ldr	r1, [pc, #248]	@ (8001474 <linkTimer+0x14c>)
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	3308      	adds	r3, #8
 8001386:	6819      	ldr	r1, [r3, #0]
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	4419      	add	r1, r3
 800138e:	4839      	ldr	r0, [pc, #228]	@ (8001474 <linkTimer+0x14c>)
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4403      	add	r3, r0
 800139a:	3308      	adds	r3, #8
 800139c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800139e:	79fa      	ldrb	r2, [r7, #7]
 80013a0:	4934      	ldr	r1, [pc, #208]	@ (8001474 <linkTimer+0x14c>)
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	440b      	add	r3, r1
 80013ac:	3308      	adds	r3, #8
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80013b2:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <linkTimer+0x144>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001474 <linkTimer+0x14c>)
 80013bc:	460b      	mov	r3, r1
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	440b      	add	r3, r1
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	3308      	adds	r3, #8
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d337      	bcc.n	8001440 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80013d0:	4b26      	ldr	r3, [pc, #152]	@ (800146c <linkTimer+0x144>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80013d6:	7b7a      	ldrb	r2, [r7, #13]
 80013d8:	4926      	ldr	r1, [pc, #152]	@ (8001474 <linkTimer+0x14c>)
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	3315      	adds	r3, #21
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80013ea:	e013      	b.n	8001414 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80013ec:	7b7a      	ldrb	r2, [r7, #13]
 80013ee:	4921      	ldr	r1, [pc, #132]	@ (8001474 <linkTimer+0x14c>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3315      	adds	r3, #21
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001400:	7b7a      	ldrb	r2, [r7, #13]
 8001402:	491c      	ldr	r1, [pc, #112]	@ (8001474 <linkTimer+0x14c>)
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3315      	adds	r3, #21
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	2b0a      	cmp	r3, #10
 8001418:	d00b      	beq.n	8001432 <linkTimer+0x10a>
 800141a:	7b3a      	ldrb	r2, [r7, #12]
 800141c:	4915      	ldr	r1, [pc, #84]	@ (8001474 <linkTimer+0x14c>)
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	3308      	adds	r3, #8
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	429a      	cmp	r2, r3
 8001430:	d2dc      	bcs.n	80013ec <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001432:	7b7a      	ldrb	r2, [r7, #13]
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fecf 	bl	80011dc <LinkTimerAfter>
 800143e:	e00f      	b.n	8001460 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <linkTimer+0x144>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff0c 	bl	8001268 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <linkTimer+0x144>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <linkTimer+0x148>)
 8001458:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800145a:	4a04      	ldr	r2, [pc, #16]	@ (800146c <linkTimer+0x144>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001460:	89fb      	ldrh	r3, [r7, #14]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000204 	.word	0x20000204
 8001470:	20000205 	.word	0x20000205
 8001474:	20000114 	.word	0x20000114
 8001478:	20000208 	.word	0x20000208

0800147c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800148c:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <UnlinkTimer+0xf8>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	429a      	cmp	r2, r3
 8001496:	d111      	bne.n	80014bc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001498:	4b36      	ldr	r3, [pc, #216]	@ (8001574 <UnlinkTimer+0xf8>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <UnlinkTimer+0xfc>)
 80014a0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80014a2:	79fa      	ldrb	r2, [r7, #7]
 80014a4:	4935      	ldr	r1, [pc, #212]	@ (800157c <UnlinkTimer+0x100>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	440b      	add	r3, r1
 80014b0:	3315      	adds	r3, #21
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001574 <UnlinkTimer+0xf8>)
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e03e      	b.n	800153a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	492f      	ldr	r1, [pc, #188]	@ (800157c <UnlinkTimer+0x100>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	3314      	adds	r3, #20
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	492a      	ldr	r1, [pc, #168]	@ (800157c <UnlinkTimer+0x100>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	3315      	adds	r3, #21
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80014e4:	79f9      	ldrb	r1, [r7, #7]
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	4824      	ldr	r0, [pc, #144]	@ (800157c <UnlinkTimer+0x100>)
 80014ea:	460b      	mov	r3, r1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	440b      	add	r3, r1
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4403      	add	r3, r0
 80014f4:	3315      	adds	r3, #21
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2d8      	uxtb	r0, r3
 80014fa:	4920      	ldr	r1, [pc, #128]	@ (800157c <UnlinkTimer+0x100>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	3315      	adds	r3, #21
 8001508:	4602      	mov	r2, r0
 800150a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	2b0a      	cmp	r3, #10
 8001510:	d013      	beq.n	800153a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001512:	79f9      	ldrb	r1, [r7, #7]
 8001514:	7bba      	ldrb	r2, [r7, #14]
 8001516:	4819      	ldr	r0, [pc, #100]	@ (800157c <UnlinkTimer+0x100>)
 8001518:	460b      	mov	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	440b      	add	r3, r1
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4403      	add	r3, r0
 8001522:	3314      	adds	r3, #20
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2d8      	uxtb	r0, r3
 8001528:	4914      	ldr	r1, [pc, #80]	@ (800157c <UnlinkTimer+0x100>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3314      	adds	r3, #20
 8001536:	4602      	mov	r2, r0
 8001538:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	490f      	ldr	r1, [pc, #60]	@ (800157c <UnlinkTimer+0x100>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	330c      	adds	r3, #12
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <UnlinkTimer+0xf8>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b0a      	cmp	r3, #10
 8001556:	d107      	bne.n	8001568 <UnlinkTimer+0xec>
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d104      	bne.n	8001568 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <UnlinkTimer+0x104>)
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	601a      	str	r2, [r3, #0]
  }

  return;
 8001566:	bf00      	nop
 8001568:	bf00      	nop
}
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000204 	.word	0x20000204
 8001578:	20000205 	.word	0x20000205
 800157c:	20000114 	.word	0x20000114
 8001580:	20000208 	.word	0x20000208

08001584 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <ReturnTimeElapsed+0x70>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001592:	d026      	beq.n	80015e2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001594:	f7ff fe02 	bl	800119c <ReadRtcSsrValue>
 8001598:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <ReturnTimeElapsed+0x70>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d805      	bhi.n	80015b0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <ReturnTimeElapsed+0x70>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	e00a      	b.n	80015c6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <ReturnTimeElapsed+0x74>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <ReturnTimeElapsed+0x70>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <ReturnTimeElapsed+0x78>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <ReturnTimeElapsed+0x7c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	40d3      	lsrs	r3, r2
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	e001      	b.n	80015e6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	b29b      	uxth	r3, r3
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000208 	.word	0x20000208
 80015f8:	20000210 	.word	0x20000210
 80015fc:	2000020e 	.word	0x2000020e
 8001600:	2000020d 	.word	0x2000020d

08001604 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d108      	bne.n	8001626 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001614:	f7ff fdc2 	bl	800119c <ReadRtcSsrValue>
 8001618:	4603      	mov	r3, r0
 800161a:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <RestartWakeupCounter+0x9c>)
 800161c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800161e:	2003      	movs	r0, #3
 8001620:	f003 fa79 	bl	8004b16 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001624:	e039      	b.n	800169a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d803      	bhi.n	8001634 <RestartWakeupCounter+0x30>
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <RestartWakeupCounter+0xa0>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d002      	beq.n	800163a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	3b01      	subs	r3, #1
 8001638:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800163a:	bf00      	nop
 800163c:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <RestartWakeupCounter+0xa4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f8      	beq.n	800163c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <RestartWakeupCounter+0xa4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <RestartWakeupCounter+0xa4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800165a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <RestartWakeupCounter+0xa8>)
 800165e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001662:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001664:	2003      	movs	r0, #3
 8001666:	f003 fa64 	bl	8004b32 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <RestartWakeupCounter+0xac>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	0c1b      	lsrs	r3, r3, #16
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	490e      	ldr	r1, [pc, #56]	@ (80016b0 <RestartWakeupCounter+0xac>)
 8001676:	4313      	orrs	r3, r2
 8001678:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800167a:	f7ff fd8f 	bl	800119c <ReadRtcSsrValue>
 800167e:	4603      	mov	r3, r0
 8001680:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <RestartWakeupCounter+0x9c>)
 8001682:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <RestartWakeupCounter+0xa4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <RestartWakeupCounter+0xa4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001692:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001694:	f3af 8000 	nop.w
  return ;
 8001698:	bf00      	nop
}
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000208 	.word	0x20000208
 80016a4:	2000020d 	.word	0x2000020d
 80016a8:	20000318 	.word	0x20000318
 80016ac:	58000800 	.word	0x58000800
 80016b0:	40002800 	.word	0x40002800

080016b4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80016ba:	4b45      	ldr	r3, [pc, #276]	@ (80017d0 <RescheduleTimerList+0x11c>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016c6:	d107      	bne.n	80016d8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80016c8:	bf00      	nop
 80016ca:	4b42      	ldr	r3, [pc, #264]	@ (80017d4 <RescheduleTimerList+0x120>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f8      	bne.n	80016ca <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80016d8:	4b3e      	ldr	r3, [pc, #248]	@ (80017d4 <RescheduleTimerList+0x120>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	4b3d      	ldr	r3, [pc, #244]	@ (80017d4 <RescheduleTimerList+0x120>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016e6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80016e8:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <RescheduleTimerList+0x124>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	493a      	ldr	r1, [pc, #232]	@ (80017dc <RescheduleTimerList+0x128>)
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	3308      	adds	r3, #8
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001702:	f7ff ff3f 	bl	8001584 <ReturnTimeElapsed>
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	429a      	cmp	r2, r3
 8001710:	d205      	bcs.n	800171e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001716:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <RescheduleTimerList+0x12c>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e04d      	b.n	80017ba <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	4a30      	ldr	r2, [pc, #192]	@ (80017e4 <RescheduleTimerList+0x130>)
 8001722:	8812      	ldrh	r2, [r2, #0]
 8001724:	b292      	uxth	r2, r2
 8001726:	4413      	add	r3, r2
 8001728:	461a      	mov	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	4293      	cmp	r3, r2
 800172e:	d906      	bls.n	800173e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001730:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <RescheduleTimerList+0x130>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001736:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <RescheduleTimerList+0x12c>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e03d      	b.n	80017ba <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	b29a      	uxth	r2, r3
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001748:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <RescheduleTimerList+0x12c>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800174e:	e034      	b.n	80017ba <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	4922      	ldr	r1, [pc, #136]	@ (80017dc <RescheduleTimerList+0x128>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3308      	adds	r3, #8
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	429a      	cmp	r2, r3
 8001766:	d20a      	bcs.n	800177e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	491c      	ldr	r1, [pc, #112]	@ (80017dc <RescheduleTimerList+0x128>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3308      	adds	r3, #8
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e013      	b.n	80017a6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	4916      	ldr	r1, [pc, #88]	@ (80017dc <RescheduleTimerList+0x128>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3308      	adds	r3, #8
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	1ac9      	subs	r1, r1, r3
 8001796:	4811      	ldr	r0, [pc, #68]	@ (80017dc <RescheduleTimerList+0x128>)
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4403      	add	r3, r0
 80017a2:	3308      	adds	r3, #8
 80017a4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	490c      	ldr	r1, [pc, #48]	@ (80017dc <RescheduleTimerList+0x128>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	3315      	adds	r3, #21
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b0a      	cmp	r3, #10
 80017be:	d1c7      	bne.n	8001750 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80017c0:	89bb      	ldrh	r3, [r7, #12]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff1e 	bl	8001604 <RestartWakeupCounter>

  return ;
 80017c8:	bf00      	nop
}
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40002800 	.word	0x40002800
 80017d4:	20000318 	.word	0x20000318
 80017d8:	20000204 	.word	0x20000204
 80017dc:	20000114 	.word	0x20000114
 80017e0:	2000020c 	.word	0x2000020c
 80017e4:	20000212 	.word	0x20000212

080017e8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017ee:	f3ef 8310 	mrs	r3, PRIMASK
 80017f2:	617b      	str	r3, [r7, #20]
  return(result);
 80017f4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	22ca      	movs	r2, #202	@ 0xca
 8001802:	625a      	str	r2, [r3, #36]	@ 0x24
 8001804:	4b57      	ldr	r3, [pc, #348]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2253      	movs	r2, #83	@ 0x53
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800180c:	4b55      	ldr	r3, [pc, #340]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	4b54      	ldr	r3, [pc, #336]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800181a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800181c:	4b52      	ldr	r3, [pc, #328]	@ (8001968 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001824:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001828:	4950      	ldr	r1, [pc, #320]	@ (800196c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	330c      	adds	r3, #12
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d16e      	bne.n	800191c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800183e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001842:	494a      	ldr	r1, [pc, #296]	@ (800196c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001852:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001856:	4945      	ldr	r1, [pc, #276]	@ (800196c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3310      	adds	r3, #16
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001868:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d04c      	beq.n	800190c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001872:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001876:	493d      	ldr	r1, [pc, #244]	@ (800196c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	330d      	adds	r3, #13
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d124      	bne.n	80018d6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800188c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001890:	2101      	movs	r1, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fdf2 	bl	800147c <UnlinkTimer>
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f383 8810 	msr	PRIMASK, r3
}
 80018a2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80018a4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80018a8:	4930      	ldr	r1, [pc, #192]	@ (800196c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	3304      	adds	r3, #4
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fa32 	bl	8001d28 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	22ca      	movs	r2, #202	@ 0xca
 80018ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2253      	movs	r2, #83	@ 0x53
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80018d4:	e012      	b.n	80018fc <HW_TS_RTC_Wakeup_Handler+0x114>
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f383 8810 	msr	PRIMASK, r3
}
 80018e0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80018e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f99a 	bl	8001c20 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	22ca      	movs	r2, #202	@ 0xca
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2253      	movs	r2, #83	@ 0x53
 80018fa:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80018fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	4619      	mov	r1, r3
 8001904:	69b8      	ldr	r0, [r7, #24]
 8001906:	f000 fa95 	bl	8001e34 <HW_TS_RTC_Int_AppNot>
 800190a:	e022      	b.n	8001952 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800190c:	f7ff fed2 	bl	80016b4 <RescheduleTimerList>
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f383 8810 	msr	PRIMASK, r3
}
 800191a:	e01a      	b.n	8001952 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800191c:	bf00      	nop
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f8      	beq.n	800191e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800193c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001940:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f383 8810 	msr	PRIMASK, r3
}
 8001950:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001952:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	22ff      	movs	r2, #255	@ 0xff
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800195a:	bf00      	nop
}
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000318 	.word	0x20000318
 8001968:	20000204 	.word	0x20000204
 800196c:	20000114 	.word	0x20000114
 8001970:	2000020c 	.word	0x2000020c
 8001974:	58000800 	.word	0x58000800

08001978 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001984:	4b5e      	ldr	r3, [pc, #376]	@ (8001b00 <HW_TS_Init+0x188>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	22ca      	movs	r2, #202	@ 0xca
 800198a:	625a      	str	r2, [r3, #36]	@ 0x24
 800198c:	4b5c      	ldr	r3, [pc, #368]	@ (8001b00 <HW_TS_Init+0x188>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2253      	movs	r2, #83	@ 0x53
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001994:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <HW_TS_Init+0x18c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a5a      	ldr	r2, [pc, #360]	@ (8001b04 <HW_TS_Init+0x18c>)
 800199a:	f043 0320 	orr.w	r3, r3, #32
 800199e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80019a0:	4b58      	ldr	r3, [pc, #352]	@ (8001b04 <HW_TS_Init+0x18c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f1c3 0304 	rsb	r3, r3, #4
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b55      	ldr	r3, [pc, #340]	@ (8001b08 <HW_TS_Init+0x190>)
 80019b4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80019b6:	4b53      	ldr	r3, [pc, #332]	@ (8001b04 <HW_TS_Init+0x18c>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80019be:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80019c2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	fa92 f2a2 	rbit	r2, r2
 80019ca:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d101      	bne.n	80019da <HW_TS_Init+0x62>
  {
    return 32U;
 80019d6:	2220      	movs	r2, #32
 80019d8:	e003      	b.n	80019e2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	fab2 f282 	clz	r2, r2
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	40d3      	lsrs	r3, r2
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b48      	ldr	r3, [pc, #288]	@ (8001b0c <HW_TS_Init+0x194>)
 80019ec:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80019ee:	4b45      	ldr	r3, [pc, #276]	@ (8001b04 <HW_TS_Init+0x18c>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b44      	ldr	r3, [pc, #272]	@ (8001b10 <HW_TS_Init+0x198>)
 8001a00:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001a02:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <HW_TS_Init+0x198>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	4a40      	ldr	r2, [pc, #256]	@ (8001b0c <HW_TS_Init+0x194>)
 8001a0a:	7812      	ldrb	r2, [r2, #0]
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a14:	4a3c      	ldr	r2, [pc, #240]	@ (8001b08 <HW_TS_Init+0x190>)
 8001a16:	7812      	ldrb	r2, [r2, #0]
 8001a18:	40d3      	lsrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d904      	bls.n	8001a30 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001a26:	4b3b      	ldr	r3, [pc, #236]	@ (8001b14 <HW_TS_Init+0x19c>)
 8001a28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	e003      	b.n	8001a38 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b37      	ldr	r3, [pc, #220]	@ (8001b14 <HW_TS_Init+0x19c>)
 8001a36:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001a38:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a3c:	f7ff fb9c 	bl	8001178 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001a40:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a44:	f7ff fb84 	bl	8001150 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d13d      	bne.n	8001aca <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a4e:	4b32      	ldr	r3, [pc, #200]	@ (8001b18 <HW_TS_Init+0x1a0>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a54:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <HW_TS_Init+0x1a4>)
 8001a56:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	77fb      	strb	r3, [r7, #31]
 8001a60:	e00c      	b.n	8001a7c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001a62:	7ffa      	ldrb	r2, [r7, #31]
 8001a64:	492e      	ldr	r1, [pc, #184]	@ (8001b20 <HW_TS_Init+0x1a8>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	330c      	adds	r3, #12
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001a76:	7ffb      	ldrb	r3, [r7, #31]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	77fb      	strb	r3, [r7, #31]
 8001a7c:	7ffb      	ldrb	r3, [r7, #31]
 8001a7e:	2b09      	cmp	r3, #9
 8001a80:	d9ef      	bls.n	8001a62 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001a82:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <HW_TS_Init+0x1ac>)
 8001a84:	220a      	movs	r2, #10
 8001a86:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <HW_TS_Init+0x188>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <HW_TS_Init+0x188>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a96:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HW_TS_Init+0x188>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HW_TS_Init+0x188>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001aa8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <HW_TS_Init+0x1b0>)
 8001aac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ab0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f003 f83d 	bl	8004b32 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HW_TS_Init+0x188>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HW_TS_Init+0x188>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	e009      	b.n	8001ade <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001aca:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <HW_TS_Init+0x188>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f003 f81c 	bl	8004b16 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ade:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <HW_TS_Init+0x188>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	22ff      	movs	r2, #255	@ 0xff
 8001ae4:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2103      	movs	r1, #3
 8001aea:	2003      	movs	r0, #3
 8001aec:	f002 ffd1 	bl	8004a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001af0:	2003      	movs	r0, #3
 8001af2:	f002 ffe8 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

  return;
 8001af6:	bf00      	nop
}
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000318 	.word	0x20000318
 8001b04:	40002800 	.word	0x40002800
 8001b08:	2000020d 	.word	0x2000020d
 8001b0c:	2000020e 	.word	0x2000020e
 8001b10:	20000210 	.word	0x20000210
 8001b14:	20000212 	.word	0x20000212
 8001b18:	2000020c 	.word	0x2000020c
 8001b1c:	20000208 	.word	0x20000208
 8001b20:	20000114 	.word	0x20000114
 8001b24:	20000204 	.word	0x20000204
 8001b28:	58000800 	.word	0x58000800

08001b2c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b08b      	sub	sp, #44	@ 0x2c
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b42:	f3ef 8310 	mrs	r3, PRIMASK
 8001b46:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b48:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001b50:	e004      	b.n	8001b5c <HW_TS_Create+0x30>
  {
    loop++;
 8001b52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b56:	3301      	adds	r3, #1
 8001b58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	d80c      	bhi.n	8001b7e <HW_TS_Create+0x52>
 8001b64:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001b68:	492c      	ldr	r1, [pc, #176]	@ (8001c1c <HW_TS_Create+0xf0>)
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	330c      	adds	r3, #12
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1e9      	bne.n	8001b52 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b82:	2b0a      	cmp	r3, #10
 8001b84:	d038      	beq.n	8001bf8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001b86:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001b8a:	4924      	ldr	r1, [pc, #144]	@ (8001c1c <HW_TS_Create+0xf0>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	330c      	adds	r3, #12
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f383 8810 	msr	PRIMASK, r3
}
 8001ba6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001ba8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001bac:	491b      	ldr	r1, [pc, #108]	@ (8001c1c <HW_TS_Create+0xf0>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3310      	adds	r3, #16
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001bbe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001bc2:	4916      	ldr	r1, [pc, #88]	@ (8001c1c <HW_TS_Create+0xf0>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	330d      	adds	r3, #13
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001bd4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001bd8:	4910      	ldr	r1, [pc, #64]	@ (8001c1c <HW_TS_Create+0xf0>)
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001bee:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001bf6:	e008      	b.n	8001c0a <HW_TS_Create+0xde>
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f383 8810 	msr	PRIMASK, r3
}
 8001c02:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8001c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	372c      	adds	r7, #44	@ 0x2c
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000114 	.word	0x20000114

08001c20 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c30:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f002 ff52 	bl	8004ae2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c3e:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <HW_TS_Stop+0xf0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	22ca      	movs	r2, #202	@ 0xca
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c46:	4b32      	ldr	r3, [pc, #200]	@ (8001d10 <HW_TS_Stop+0xf0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2253      	movs	r2, #83	@ 0x53
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001c4e:	79fa      	ldrb	r2, [r7, #7]
 8001c50:	4930      	ldr	r1, [pc, #192]	@ (8001d14 <HW_TS_Stop+0xf4>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d142      	bne.n	8001cec <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fc06 	bl	800147c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c70:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <HW_TS_Stop+0xf8>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c76:	7cfb      	ldrb	r3, [r7, #19]
 8001c78:	2b0a      	cmp	r3, #10
 8001c7a:	d12f      	bne.n	8001cdc <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001c7c:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <HW_TS_Stop+0xfc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c88:	d107      	bne.n	8001c9a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001c8a:	bf00      	nop
 8001c8c:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <HW_TS_Stop+0xf0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f8      	bne.n	8001c8c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <HW_TS_Stop+0xf0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <HW_TS_Stop+0xf0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ca8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001caa:	bf00      	nop
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HW_TS_Stop+0xf0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f8      	beq.n	8001cac <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HW_TS_Stop+0xf0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <HW_TS_Stop+0xf0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001cca:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ccc:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <HW_TS_Stop+0x100>)
 8001cce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001cd2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f002 ff2c 	bl	8004b32 <HAL_NVIC_ClearPendingIRQ>
 8001cda:	e007      	b.n	8001cec <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <HW_TS_Stop+0x104>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	7cfa      	ldrb	r2, [r7, #19]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001ce8:	f7ff fce4 	bl	80016b4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <HW_TS_Stop+0xf0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	22ff      	movs	r2, #255	@ 0xff
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	f002 fee6 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f383 8810 	msr	PRIMASK, r3
}
 8001d04:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001d06:	bf00      	nop
}
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000318 	.word	0x20000318
 8001d14:	20000114 	.word	0x20000114
 8001d18:	20000204 	.word	0x20000204
 8001d1c:	40002800 	.word	0x40002800
 8001d20:	58000800 	.word	0x58000800
 8001d24:	20000205 	.word	0x20000205

08001d28 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d34:	79fa      	ldrb	r2, [r7, #7]
 8001d36:	493b      	ldr	r1, [pc, #236]	@ (8001e24 <HW_TS_Start+0xfc>)
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	330c      	adds	r3, #12
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d103      	bne.n	8001d54 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff66 	bl	8001c20 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d54:	f3ef 8310 	mrs	r3, PRIMASK
 8001d58:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5e:	b672      	cpsid	i
}
 8001d60:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001d62:	2003      	movs	r0, #3
 8001d64:	f002 febd 	bl	8004ae2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d68:	4b2f      	ldr	r3, [pc, #188]	@ (8001e28 <HW_TS_Start+0x100>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	22ca      	movs	r2, #202	@ 0xca
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d70:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <HW_TS_Start+0x100>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2253      	movs	r2, #83	@ 0x53
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	492a      	ldr	r1, [pc, #168]	@ (8001e24 <HW_TS_Start+0xfc>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	330c      	adds	r3, #12
 8001d88:	2202      	movs	r2, #2
 8001d8a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001d8c:	79fa      	ldrb	r2, [r7, #7]
 8001d8e:	4925      	ldr	r1, [pc, #148]	@ (8001e24 <HW_TS_Start+0xfc>)
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	3308      	adds	r3, #8
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001da0:	79fa      	ldrb	r2, [r7, #7]
 8001da2:	4920      	ldr	r1, [pc, #128]	@ (8001e24 <HW_TS_Start+0xfc>)
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3304      	adds	r3, #4
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fab6 	bl	8001328 <linkTimer>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HW_TS_Start+0x104>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e30 <HW_TS_Start+0x108>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	7c7a      	ldrb	r2, [r7, #17]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d002      	beq.n	8001dd8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001dd2:	f7ff fc6f 	bl	80016b4 <RescheduleTimerList>
 8001dd6:	e013      	b.n	8001e00 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	4912      	ldr	r1, [pc, #72]	@ (8001e24 <HW_TS_Start+0xfc>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	3308      	adds	r3, #8
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	8a7b      	ldrh	r3, [r7, #18]
 8001dec:	79fa      	ldrb	r2, [r7, #7]
 8001dee:	1ac9      	subs	r1, r1, r3
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <HW_TS_Start+0xfc>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4403      	add	r3, r0
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HW_TS_Start+0x100>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	22ff      	movs	r2, #255	@ 0xff
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f002 fe5c 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f383 8810 	msr	PRIMASK, r3
}
 8001e18:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e1a:	bf00      	nop
}
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000114 	.word	0x20000114
 8001e28:	20000318 	.word	0x20000318
 8001e2c:	20000204 	.word	0x20000204
 8001e30:	20000205 	.word	0x20000205

08001e34 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4798      	blx	r3

  return;
 8001e46:	bf00      	nop
}
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e56:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e5a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d013      	beq.n	8001e8e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e66:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e6a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001e6e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e76:	e000      	b.n	8001e7a <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e78:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e7a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f9      	beq.n	8001e78 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e84:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_RCC_LSE_SetDriveCapability>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eac:	f023 0218 	bic.w	r2, r3, #24
 8001eb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eec:	68fb      	ldr	r3, [r7, #12]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
	int j=0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]

	for (j=0; j<len;j++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e009      	b.n	8001f24 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff98 	bl	8001e4e <ITM_SendChar>
	for (j=0; j<len;j++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf1      	blt.n	8001f10 <_write+0x16>
	}
	return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3c:	f000 ff98 	bl	8002e70 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001f40:	f7fe ff64 	bl	8000e0c <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  SystemClock_STARTUP_Config();
 8001f44:	f000 fa80 	bl	8002448 <SystemClock_STARTUP_Config>
  MX_GPIO_Init();
 8001f48:	f000 f9f0 	bl	800232c <MX_GPIO_Init>
  HAL_GPIO_WritePin(HSE_ENABLE_GPIO_Port, HSE_ENABLE_Pin, 1);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2101      	movs	r1, #1
 8001f50:	4814      	ldr	r0, [pc, #80]	@ (8001fa4 <main+0x6c>)
 8001f52:	f003 f829 	bl	8004fa8 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f56:	f000 f82d 	bl	8001fb4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f5a:	f000 f889 	bl	8002070 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001f5e:	f000 f94b 	bl	80021f8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f62:	f000 f9e3 	bl	800232c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f66:	f000 f8a3 	bl	80020b0 <MX_ADC1_Init>
  MX_RTC_Init();
 8001f6a:	f000 f97f 	bl	800226c <MX_RTC_Init>
  MX_IWDG_Init();
 8001f6e:	f000 f957 	bl	8002220 <MX_IWDG_Init>
  MX_I2C3_Init();
 8001f72:	f000 f901 	bl	8002178 <MX_I2C3_Init>
  MX_RF_Init();
 8001f76:	f000 f971 	bl	800225c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  printf("Start\r\n");
 8001f7a:	480b      	ldr	r0, [pc, #44]	@ (8001fa8 <main+0x70>)
 8001f7c:	f00d f87c 	bl	800f078 <puts>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001f80:	217f      	movs	r1, #127	@ 0x7f
 8001f82:	480a      	ldr	r0, [pc, #40]	@ (8001fac <main+0x74>)
 8001f84:	f002 fbb6 	bl	80046f4 <HAL_ADCEx_Calibration_Start>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <main+0x60>
  {
    /* Calibration Error */
    Error_Handler();
 8001f8e:	f000 fabd 	bl	800250c <Error_Handler>
    printf("Error Calibration\r\n");
 8001f92:	4807      	ldr	r0, [pc, #28]	@ (8001fb0 <main+0x78>)
 8001f94:	f00d f870 	bl	800f078 <puts>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001f98:	f7fe ff46 	bl	8000e28 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001f9c:	f7ff f89a 	bl	80010d4 <MX_APPE_Process>
 8001fa0:	e7fc      	b.n	8001f9c <main+0x64>
 8001fa2:	bf00      	nop
 8001fa4:	48000400 	.word	0x48000400
 8001fa8:	08010ca4 	.word	0x08010ca4
 8001fac:	20000214 	.word	0x20000214
 8001fb0:	08010cac 	.word	0x08010cac

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b09a      	sub	sp, #104	@ 0x68
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	2248      	movs	r2, #72	@ 0x48
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00d f938 	bl	800f238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	615a      	str	r2, [r3, #20]
 8001fd8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fda:	f003 ff47 	bl	8005e6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001fde:	2010      	movs	r0, #16
 8001fe0:	f7ff ff5c 	bl	8001e9c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe4:	4b21      	ldr	r3, [pc, #132]	@ (800206c <SystemClock_Config+0xb8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fec:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <SystemClock_Config+0xb8>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <SystemClock_Config+0xb8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002000:	230f      	movs	r3, #15
 8002002:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002004:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800200a:	2301      	movs	r3, #1
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800200e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002014:	2340      	movs	r3, #64	@ 0x40
 8002016:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002018:	2305      	movs	r3, #5
 800201a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800201c:	2300      	movs	r3, #0
 800201e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002020:	f107 0320 	add.w	r3, r7, #32
 8002024:	4618      	mov	r0, r3
 8002026:	f004 fa9d 	bl	8006564 <HAL_RCC_OscConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002030:	f000 fa6c 	bl	800250c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002034:	236f      	movs	r3, #111	@ 0x6f
 8002036:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002038:	2302      	movs	r3, #2
 800203a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2101      	movs	r1, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fdf9 	bl	8006c4c <HAL_RCC_ClockConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002060:	f000 fa54 	bl	800250c <Error_Handler>
  }
}
 8002064:	bf00      	nop
 8002066:	3768      	adds	r7, #104	@ 0x68
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	58000400 	.word	0x58000400

08002070 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b094      	sub	sp, #80	@ 0x50
 8002074:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002076:	463b      	mov	r3, r7
 8002078:	2250      	movs	r2, #80	@ 0x50
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f00d f8db 	bl	800f238 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002082:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002086:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002088:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800208c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800208e:	2300      	movs	r3, #0
 8002090:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002092:	2310      	movs	r3, #16
 8002094:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002096:	463b      	mov	r3, r7
 8002098:	4618      	mov	r0, r3
 800209a:	f005 f9e8 	bl	800746e <HAL_RCCEx_PeriphCLKConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80020a4:	f000 fa32 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80020a8:	bf00      	nop
 80020aa:	3750      	adds	r7, #80	@ 0x50
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020b6:	463b      	mov	r3, r7
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
 80020c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020c6:	4b29      	ldr	r3, [pc, #164]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020c8:	4a29      	ldr	r2, [pc, #164]	@ (8002170 <MX_ADC1_Init+0xc0>)
 80020ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020d4:	2210      	movs	r2, #16
 80020d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020d8:	4b24      	ldr	r3, [pc, #144]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020de:	4b23      	ldr	r3, [pc, #140]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020e4:	4b21      	ldr	r3, [pc, #132]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020e6:	2204      	movs	r2, #4
 80020e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020ea:	4b20      	ldr	r3, [pc, #128]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020f0:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <MX_ADC1_Init+0xbc>)
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <MX_ADC1_Init+0xbc>)
 8002106:	2200      	movs	r2, #0
 8002108:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800210a:	4b18      	ldr	r3, [pc, #96]	@ (800216c <MX_ADC1_Init+0xbc>)
 800210c:	2200      	movs	r2, #0
 800210e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <MX_ADC1_Init+0xbc>)
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <MX_ADC1_Init+0xbc>)
 800211a:	2200      	movs	r2, #0
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <MX_ADC1_Init+0xbc>)
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002126:	4811      	ldr	r0, [pc, #68]	@ (800216c <MX_ADC1_Init+0xbc>)
 8002128:	f001 f98a 	bl	8003440 <HAL_ADC_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002132:	f000 f9eb 	bl	800250c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002136:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <MX_ADC1_Init+0xc4>)
 8002138:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800213a:	2306      	movs	r3, #6
 800213c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002142:	237f      	movs	r3, #127	@ 0x7f
 8002144:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002146:	2304      	movs	r3, #4
 8002148:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214e:	463b      	mov	r3, r7
 8002150:	4619      	mov	r1, r3
 8002152:	4806      	ldr	r0, [pc, #24]	@ (800216c <MX_ADC1_Init+0xbc>)
 8002154:	f001 fd46 	bl	8003be4 <HAL_ADC_ConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800215e:	f000 f9d5 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000214 	.word	0x20000214
 8002170:	50040000 	.word	0x50040000
 8002174:	36902000 	.word	0x36902000

08002178 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800217c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <MX_I2C3_Init+0x74>)
 800217e:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <MX_I2C3_Init+0x78>)
 8002180:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8002182:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <MX_I2C3_Init+0x74>)
 8002184:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <MX_I2C3_Init+0x7c>)
 8002186:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002188:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <MX_I2C3_Init+0x74>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800218e:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <MX_I2C3_Init+0x74>)
 8002190:	2201      	movs	r2, #1
 8002192:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002194:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <MX_I2C3_Init+0x74>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800219a:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <MX_I2C3_Init+0x74>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021b2:	480e      	ldr	r0, [pc, #56]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021b4:	f002 ff66 	bl	8005084 <HAL_I2C_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80021be:	f000 f9a5 	bl	800250c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021c2:	2100      	movs	r1, #0
 80021c4:	4809      	ldr	r0, [pc, #36]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021c6:	f003 fcd3 	bl	8005b70 <HAL_I2CEx_ConfigAnalogFilter>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80021d0:	f000 f99c 	bl	800250c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80021d4:	2100      	movs	r1, #0
 80021d6:	4805      	ldr	r0, [pc, #20]	@ (80021ec <MX_I2C3_Init+0x74>)
 80021d8:	f003 fd15 	bl	8005c06 <HAL_I2CEx_ConfigDigitalFilter>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80021e2:	f000 f993 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000278 	.word	0x20000278
 80021f0:	40005c00 	.word	0x40005c00
 80021f4:	00300f38 	.word	0x00300f38

080021f8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_IPCC_Init+0x20>)
 80021fe:	4a07      	ldr	r2, [pc, #28]	@ (800221c <MX_IPCC_Init+0x24>)
 8002200:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	@ (8002218 <MX_IPCC_Init+0x20>)
 8002204:	f003 fd4c 	bl	8005ca0 <HAL_IPCC_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800220e:	f000 f97d 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200002cc 	.word	0x200002cc
 800221c:	58000c00 	.word	0x58000c00

08002220 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <MX_IWDG_Init+0x34>)
 8002226:	4a0c      	ldr	r2, [pc, #48]	@ (8002258 <MX_IWDG_Init+0x38>)
 8002228:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <MX_IWDG_Init+0x34>)
 800222c:	2206      	movs	r2, #6
 800222e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <MX_IWDG_Init+0x34>)
 8002232:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002236:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4000;
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <MX_IWDG_Init+0x34>)
 800223a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800223e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002240:	4804      	ldr	r0, [pc, #16]	@ (8002254 <MX_IWDG_Init+0x34>)
 8002242:	f003 fdb3 	bl	8005dac <HAL_IWDG_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800224c:	f000 f95e 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000308 	.word	0x20000308
 8002258:	40003000 	.word	0x40003000

0800225c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002280:	2300      	movs	r3, #0
 8002282:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <MX_RTC_Init+0xb8>)
 8002286:	4a28      	ldr	r2, [pc, #160]	@ (8002328 <MX_RTC_Init+0xbc>)
 8002288:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800228a:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <MX_RTC_Init+0xb8>)
 800228c:	2200      	movs	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002290:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <MX_RTC_Init+0xb8>)
 8002292:	220f      	movs	r2, #15
 8002294:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002296:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <MX_RTC_Init+0xb8>)
 8002298:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800229c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800229e:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <MX_RTC_Init+0xb8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <MX_RTC_Init+0xb8>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <MX_RTC_Init+0xb8>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <MX_RTC_Init+0xb8>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022b6:	481b      	ldr	r0, [pc, #108]	@ (8002324 <MX_RTC_Init+0xb8>)
 80022b8:	f005 fb60 	bl	800797c <HAL_RTC_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80022c2:	f000 f923 	bl	800250c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	4619      	mov	r1, r3
 80022e4:	480f      	ldr	r0, [pc, #60]	@ (8002324 <MX_RTC_Init+0xb8>)
 80022e6:	f005 fbf9 	bl	8007adc <HAL_RTC_SetTime>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 80022f0:	f000 f90c 	bl	800250c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022f4:	2301      	movs	r3, #1
 80022f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80022f8:	2301      	movs	r3, #1
 80022fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	2200      	movs	r2, #0
 8002308:	4619      	mov	r1, r3
 800230a:	4806      	ldr	r0, [pc, #24]	@ (8002324 <MX_RTC_Init+0xb8>)
 800230c:	f005 fd06 	bl	8007d1c <HAL_RTC_SetDate>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002316:	f000 f8f9 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000318 	.word	0x20000318
 8002328:	40002800 	.word	0x40002800

0800232c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002340:	2004      	movs	r0, #4
 8002342:	f7ff fdc1 	bl	8001ec8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2002      	movs	r0, #2
 8002348:	f7ff fdbe 	bl	8001ec8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800234c:	2008      	movs	r0, #8
 800234e:	f7ff fdbb 	bl	8001ec8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HSE_ENABLE_Pin|VBAT_ADC_ENABLE_Pin, GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	2111      	movs	r1, #17
 8002356:	4839      	ldr	r0, [pc, #228]	@ (800243c <MX_GPIO_Init+0x110>)
 8002358:	f002 fe26 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(V3_ENABLE_GPIO_Port, V3_ENABLE_Pin, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002362:	4837      	ldr	r0, [pc, #220]	@ (8002440 <MX_GPIO_Init+0x114>)
 8002364:	f002 fe20 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHARGE_ENABLE_GPIO_Port, CHARGE_ENABLE_Pin, GPIO_PIN_SET);
 8002368:	2201      	movs	r2, #1
 800236a:	2101      	movs	r1, #1
 800236c:	4835      	ldr	r0, [pc, #212]	@ (8002444 <MX_GPIO_Init+0x118>)
 800236e:	f002 fe1b 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	2102      	movs	r1, #2
 8002376:	4833      	ldr	r0, [pc, #204]	@ (8002444 <MX_GPIO_Init+0x118>)
 8002378:	f002 fe16 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin;
 800237c:	2304      	movs	r3, #4
 800237e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002380:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT2_GPIO_Port, &GPIO_InitStruct);
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	4619      	mov	r1, r3
 800238e:	482c      	ldr	r0, [pc, #176]	@ (8002440 <MX_GPIO_Init+0x114>)
 8002390:	f002 fc9a 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8002394:	2308      	movs	r3, #8
 8002396:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002398:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800239c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4826      	ldr	r0, [pc, #152]	@ (8002440 <MX_GPIO_Init+0x114>)
 80023a8:	f002 fc8e 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSE_ENABLE_Pin VBAT_ADC_ENABLE_Pin */
  GPIO_InitStruct.Pin = HSE_ENABLE_Pin|VBAT_ADC_ENABLE_Pin;
 80023ac:	2311      	movs	r3, #17
 80023ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	481e      	ldr	r0, [pc, #120]	@ (800243c <MX_GPIO_Init+0x110>)
 80023c2:	f002 fc81 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : V3_ENABLE_Pin */
  GPIO_InitStruct.Pin = V3_ENABLE_Pin;
 80023c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(V3_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	4818      	ldr	r0, [pc, #96]	@ (8002440 <MX_GPIO_Init+0x114>)
 80023de:	f002 fc73 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80023e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	4619      	mov	r1, r3
 80023f4:	4812      	ldr	r0, [pc, #72]	@ (8002440 <MX_GPIO_Init+0x114>)
 80023f6:	f002 fc67 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_ENABLE_Pin LED1_Pin */
  GPIO_InitStruct.Pin = CHARGE_ENABLE_Pin|LED1_Pin;
 80023fa:	2303      	movs	r3, #3
 80023fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fe:	2301      	movs	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	4619      	mov	r1, r3
 800240e:	480d      	ldr	r0, [pc, #52]	@ (8002444 <MX_GPIO_Init+0x118>)
 8002410:	f002 fc5a 	bl	8004cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	2008      	movs	r0, #8
 800241a:	f002 fb3a 	bl	8004a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800241e:	2008      	movs	r0, #8
 8002420:	f002 fb51 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	2009      	movs	r0, #9
 800242a:	f002 fb32 	bl	8004a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800242e:	2009      	movs	r0, #9
 8002430:	f002 fb49 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002434:	bf00      	nop
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	48000400 	.word	0x48000400
 8002440:	48000800 	.word	0x48000800
 8002444:	48000c00 	.word	0x48000c00

08002448 <SystemClock_STARTUP_Config>:

/* USER CODE BEGIN 4 */
void SystemClock_STARTUP_Config(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b09a      	sub	sp, #104	@ 0x68
 800244c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244e:	f107 0320 	add.w	r3, r7, #32
 8002452:	2248      	movs	r2, #72	@ 0x48
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f00c feee 	bl	800f238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
 8002468:	611a      	str	r2, [r3, #16]
 800246a:	615a      	str	r2, [r3, #20]
 800246c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800246e:	f003 fcfd 	bl	8005e6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002472:	2010      	movs	r0, #16
 8002474:	f7ff fd12 	bl	8001e9c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002478:	4b23      	ldr	r3, [pc, #140]	@ (8002508 <SystemClock_STARTUP_Config+0xc0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002480:	4a21      	ldr	r2, [pc, #132]	@ (8002508 <SystemClock_STARTUP_Config+0xc0>)
 8002482:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <SystemClock_STARTUP_Config+0xc0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002494:	232e      	movs	r3, #46	@ 0x2e
 8002496:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002498:	2301      	movs	r3, #1
 800249a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800249c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024a2:	2301      	movs	r3, #1
 80024a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024a6:	2340      	movs	r3, #64	@ 0x40
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80024ae:	23a0      	movs	r3, #160	@ 0xa0
 80024b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024b2:	2305      	movs	r3, #5
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ba:	f107 0320 	add.w	r3, r7, #32
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 f850 	bl	8006564 <HAL_RCC_OscConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <SystemClock_STARTUP_Config+0x86>
  {
    Error_Handler();
 80024ca:	f000 f81f 	bl	800250c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80024ce:	236f      	movs	r3, #111	@ 0x6f
 80024d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2101      	movs	r1, #1
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fbac 	bl	8006c4c <HAL_RCC_ClockConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SystemClock_STARTUP_Config+0xb6>
  {
    Error_Handler();
 80024fa:	f000 f807 	bl	800250c <Error_Handler>
  }
}
 80024fe:	bf00      	nop
 8002500:	3768      	adds	r7, #104	@ 0x68
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	58000400 	.word	0x58000400

0800250c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002510:	b672      	cpsid	i
}
 8002512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <Error_Handler+0x8>

08002518 <LL_PWR_SetPowerMode>:
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <LL_PWR_SetPowerMode+0x24>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 0207 	bic.w	r2, r3, #7
 8002528:	4904      	ldr	r1, [pc, #16]	@ (800253c <LL_PWR_SetPowerMode+0x24>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	58000400 	.word	0x58000400

08002540 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8002544:	4b03      	ldr	r3, [pc, #12]	@ (8002554 <LL_PWR_ClearFlag_WU+0x14>)
 8002546:	221f      	movs	r2, #31
 8002548:	619a      	str	r2, [r3, #24]
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	58000400 	.word	0x58000400

08002558 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 800255c:	4b07      	ldr	r3, [pc, #28]	@ (800257c <LL_PWR_IsActiveFlag_C2SB+0x24>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800256a:	d101      	bne.n	8002570 <LL_PWR_IsActiveFlag_C2SB+0x18>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	58000400 	.word	0x58000400

08002580 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8002584:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800258e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002592:	d101      	bne.n	8002598 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	58000400 	.word	0x58000400

080025a8 <LL_RCC_HSE_Enable>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_RCC_HSE_IsReady>:
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025d8:	d101      	bne.n	80025de <LL_RCC_HSE_IsReady+0x18>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_RCC_HSE_IsReady+0x1a>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_RCC_HSI_Enable>:
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_RCC_HSI_IsReady>:
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261a:	d101      	bne.n	8002620 <LL_RCC_HSI_IsReady+0x18>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <LL_RCC_HSI_IsReady+0x1a>
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_RCC_SetSysClkSource>:
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_RCC_GetSysClkSource>:
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	f023 0203 	bic.w	r2, r3, #3
 800267e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4313      	orrs	r3, r2
 8002686:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_LPM_EnableSleep>:
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <LL_LPM_EnableSleep+0x1c>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <LL_LPM_EnableSleep+0x1c>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	6113      	str	r3, [r2, #16]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <LL_LPM_EnableDeepSleep+0x1c>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <LL_LPM_EnableDeepSleep+0x1c>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6113      	str	r3, [r2, #16]
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	3220      	adds	r2, #32
 80026e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e8:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <LL_HSEM_1StepLock+0x2c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d001      	beq.n	80026f2 <LL_HSEM_1StepLock+0x1e>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <LL_HSEM_1StepLock+0x20>
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	80000400 	.word	0x80000400

08002704 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 800272e:	f000 fc31 	bl	8002f94 <HAL_SuspendTick>

  EnterLowPower();
 8002732:	f000 f835 	bl	80027a0 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8002736:	f7ff ff03 	bl	8002540 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 800273a:	2003      	movs	r0, #3
 800273c:	f7ff feec 	bl	8002518 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002740:	f7ff ffb8 	bl	80026b4 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8002744:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8002746:	bf00      	nop
}
 8002748:	bd80      	pop	{r7, pc}

0800274a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 800274e:	f000 fc31 	bl	8002fb4 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8002752:	bf00      	nop
}
 8002754:	bd80      	pop	{r7, pc}

08002756 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 800275a:	f000 fc1b 	bl	8002f94 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 800275e:	f000 f81f 	bl	80027a0 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 8002762:	2002      	movs	r0, #2
 8002764:	f7ff fed8 	bl	8002518 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002768:	f7ff ffa4 	bl	80026b4 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800276c:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 800276e:	bf00      	nop
}
 8002770:	bd80      	pop	{r7, pc}

08002772 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8002776:	f000 f84f 	bl	8002818 <ExitLowPower>

  HAL_ResumeTick();
 800277a:	f000 fc1b 	bl	8002fb4 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */


/* USER CODE END PWR_ExitStopMode_2 */
  return;
 800277e:	bf00      	nop
}
 8002780:	bd80      	pop	{r7, pc}

08002782 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8002786:	f000 fc05 	bl	8002f94 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800278a:	f7ff ff83 	bl	8002694 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800278e:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8002790:	bf00      	nop
}
 8002792:	bd80      	pop	{r7, pc}

08002794 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8002798:	f000 fc0c 	bl	8002fb4 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 800279c:	bf00      	nop
}
 800279e:	bd80      	pop	{r7, pc}

080027a0 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80027a4:	bf00      	nop
 80027a6:	2103      	movs	r1, #3
 80027a8:	4819      	ldr	r0, [pc, #100]	@ (8002810 <EnterLowPower+0x70>)
 80027aa:	f7ff ff93 	bl	80026d4 <LL_HSEM_1StepLock>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f8      	bne.n	80027a6 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 80027b4:	2104      	movs	r1, #4
 80027b6:	4816      	ldr	r0, [pc, #88]	@ (8002810 <EnterLowPower+0x70>)
 80027b8:	f7ff ff8c 	bl	80026d4 <LL_HSEM_1StepLock>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d117      	bne.n	80027f2 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 80027c2:	f7ff fedd 	bl	8002580 <LL_PWR_IsActiveFlag_C2DS>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d104      	bne.n	80027d6 <EnterLowPower+0x36>
 80027cc:	f7ff fec4 	bl	8002558 <LL_PWR_IsActiveFlag_C2SB>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d015      	beq.n	8002802 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2104      	movs	r1, #4
 80027da:	480d      	ldr	r0, [pc, #52]	@ (8002810 <EnterLowPower+0x70>)
 80027dc:	f7ff ff92 	bl	8002704 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 80027e0:	f000 f852 	bl	8002888 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80027e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <EnterLowPower+0x74>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <EnterLowPower+0x74>)
 80027ea:	f023 0307 	bic.w	r3, r3, #7
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e007      	b.n	8002802 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 80027f2:	f000 f849 	bl	8002888 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <EnterLowPower+0x74>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a06      	ldr	r2, [pc, #24]	@ (8002814 <EnterLowPower+0x74>)
 80027fc:	f023 0307 	bic.w	r3, r3, #7
 8002800:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2103      	movs	r1, #3
 8002806:	4802      	ldr	r0, [pc, #8]	@ (8002810 <EnterLowPower+0x70>)
 8002808:	f7ff ff7c 	bl	8002704 <LL_HSEM_ReleaseLock>

  return;
 800280c:	bf00      	nop
}
 800280e:	bd80      	pop	{r7, pc}
 8002810:	58001400 	.word	0x58001400
 8002814:	58004000 	.word	0x58004000

08002818 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2104      	movs	r1, #4
 8002820:	4817      	ldr	r0, [pc, #92]	@ (8002880 <ExitLowPower+0x68>)
 8002822:	f7ff ff6f 	bl	8002704 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002826:	bf00      	nop
 8002828:	2103      	movs	r1, #3
 800282a:	4815      	ldr	r0, [pc, #84]	@ (8002880 <ExitLowPower+0x68>)
 800282c:	f7ff ff52 	bl	80026d4 <LL_HSEM_1StepLock>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f8      	bne.n	8002828 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002836:	f7ff ff0d 	bl	8002654 <LL_RCC_GetSysClkSource>
 800283a:	4603      	mov	r3, r0
 800283c:	2b04      	cmp	r3, #4
 800283e:	d118      	bne.n	8002872 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */

	    LL_RCC_HSE_Enable( );
 8002840:	f7ff feb2 	bl	80025a8 <LL_RCC_HSE_Enable>
	    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <ExitLowPower+0x6c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 0307 	bic.w	r3, r3, #7
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <ExitLowPower+0x6c>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6013      	str	r3, [r2, #0]
	    while(!LL_RCC_HSE_IsReady( ));
 8002854:	bf00      	nop
 8002856:	f7ff feb6 	bl	80025c6 <LL_RCC_HSE_IsReady>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0fa      	beq.n	8002856 <ExitLowPower+0x3e>
	    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8002860:	2002      	movs	r0, #2
 8002862:	f7ff fee3 	bl	800262c <LL_RCC_SetSysClkSource>
	    //LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSE);
	    //LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
	    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8002866:	bf00      	nop
 8002868:	f7ff fef4 	bl	8002654 <LL_RCC_GetSysClkSource>
 800286c:	4603      	mov	r3, r0
 800286e:	2b08      	cmp	r3, #8
 8002870:	d1fa      	bne.n	8002868 <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2103      	movs	r1, #3
 8002876:	4802      	ldr	r0, [pc, #8]	@ (8002880 <ExitLowPower+0x68>)
 8002878:	f7ff ff44 	bl	8002704 <LL_HSEM_ReleaseLock>

  return;
 800287c:	bf00      	nop
}
 800287e:	bd80      	pop	{r7, pc}
 8002880:	58001400 	.word	0x58001400
 8002884:	58004000 	.word	0x58004000

08002888 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 800288c:	f7ff fead 	bl	80025ea <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8002890:	bf00      	nop
 8002892:	f7ff feb9 	bl	8002608 <LL_RCC_HSI_IsReady>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0fa      	beq.n	8002892 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800289c:	2001      	movs	r0, #1
 800289e:	f7ff fec5 	bl	800262c <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7ff fee2 	bl	800266c <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 80028a8:	bf00      	nop
 80028aa:	f7ff fed3 	bl	8002654 <LL_RCC_GetSysClkSource>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d1fa      	bne.n	80028aa <Switch_On_HSI+0x22>
  return;
 80028b4:	bf00      	nop
}
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_AHB2_GRP1_EnableClock>:
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4013      	ands	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800291a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4313      	orrs	r3, r2
 8002922:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002930:	68fb      	ldr	r3, [r7, #12]
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800294c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4313      	orrs	r3, r2
 8002954:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002974:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002978:	f7ff ffc8 	bl	800290c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	2004      	movs	r0, #4
 8002982:	f002 f886 	bl	8004a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002986:	2004      	movs	r0, #4
 8002988:	f002 f89d 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2101      	movs	r1, #1
 8002990:	2005      	movs	r0, #5
 8002992:	f002 f87e 	bl	8004a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002996:	2005      	movs	r0, #5
 8002998:	f002 f895 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	202e      	movs	r0, #46	@ 0x2e
 80029a2:	f002 f876 	bl	8004a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80029a6:	202e      	movs	r0, #46	@ 0x2e
 80029a8:	f002 f88d 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b09c      	sub	sp, #112	@ 0x70
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	2250      	movs	r2, #80	@ 0x50
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f00c fc31 	bl	800f238 <memset>
  if(hadc->Instance==ADC1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <HAL_ADC_MspInit+0x90>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d12a      	bne.n	8002a36 <HAL_ADC_MspInit+0x86>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80029e6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80029ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fd3c 	bl	800746e <HAL_RCCEx_PeriphCLKConfig>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80029fc:	f7ff fd86 	bl	800250c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a00:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a04:	f7ff ff69 	bl	80028da <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a08:	2004      	movs	r0, #4
 8002a0a:	f7ff ff66 	bl	80028da <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = VBAT_ADC_Pin;
 8002a0e:	2310      	movs	r3, #16
 8002a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a12:	2303      	movs	r3, #3
 8002a14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(VBAT_ADC_GPIO_Port, &GPIO_InitStruct);
 8002a1a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4808      	ldr	r0, [pc, #32]	@ (8002a44 <HAL_ADC_MspInit+0x94>)
 8002a22:	f002 f951 	bl	8004cc8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2012      	movs	r0, #18
 8002a2c:	f002 f831 	bl	8004a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002a30:	2012      	movs	r0, #18
 8002a32:	f002 f848 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3770      	adds	r7, #112	@ 0x70
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	50040000 	.word	0x50040000
 8002a44:	48000800 	.word	0x48000800

08002a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b09c      	sub	sp, #112	@ 0x70
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	2250      	movs	r2, #80	@ 0x50
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00c fbe5 	bl	800f238 <memset>
  if(hi2c->Instance==I2C3)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a16      	ldr	r2, [pc, #88]	@ (8002acc <HAL_I2C_MspInit+0x84>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d125      	bne.n	8002ac4 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002a78:	2308      	movs	r3, #8
 8002a7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002a7c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002a80:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a82:	f107 030c 	add.w	r3, r7, #12
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 fcf1 	bl	800746e <HAL_RCCEx_PeriphCLKConfig>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002a92:	f7ff fd3b 	bl	800250c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	2004      	movs	r0, #4
 8002a98:	f7ff ff1f 	bl	80028da <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa0:	2312      	movs	r3, #18
 8002aa2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002aac:	2304      	movs	r3, #4
 8002aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4806      	ldr	r0, [pc, #24]	@ (8002ad0 <HAL_I2C_MspInit+0x88>)
 8002ab8:	f002 f906 	bl	8004cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002abc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002ac0:	f7ff ff3d 	bl	800293e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	3770      	adds	r7, #112	@ 0x70
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40005c00 	.word	0x40005c00
 8002ad0:	48000800 	.word	0x48000800

08002ad4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b18 <HAL_IPCC_MspInit+0x44>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d113      	bne.n	8002b0e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002ae6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002aea:	f7ff ff0f 	bl	800290c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	202c      	movs	r0, #44	@ 0x2c
 8002af4:	f001 ffcd 	bl	8004a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002af8:	202c      	movs	r0, #44	@ 0x2c
 8002afa:	f001 ffe4 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	202d      	movs	r0, #45	@ 0x2d
 8002b04:	f001 ffc5 	bl	8004a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002b08:	202d      	movs	r0, #45	@ 0x2d
 8002b0a:	f001 ffdc 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	58000c00 	.word	0x58000c00

08002b1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b096      	sub	sp, #88	@ 0x58
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	2250      	movs	r2, #80	@ 0x50
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f00c fb83 	bl	800f238 <memset>
  if(hrtc->Instance==RTC)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a0e      	ldr	r2, [pc, #56]	@ (8002b70 <HAL_RTC_MspInit+0x54>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d115      	bne.n	8002b68 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b40:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b46:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b48:	f107 0308 	add.w	r3, r7, #8
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fc8e 	bl	800746e <HAL_RCCEx_PeriphCLKConfig>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002b58:	f7ff fcd8 	bl	800250c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b5c:	f7ff feac 	bl	80028b8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002b60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002b64:	f7ff feeb 	bl	800293e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b68:	bf00      	nop
 8002b6a:	3758      	adds	r7, #88	@ 0x58
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40002800 	.word	0x40002800

08002b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <NMI_Handler+0x4>

08002b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <HardFault_Handler+0x4>

08002b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <MemManage_Handler+0x4>

08002b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <BusFault_Handler+0x4>

08002b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <UsageFault_Handler+0x4>

08002b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bca:	f000 f9ab 	bl	8002f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002bd6:	f001 ffbb 	bl	8004b50 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8002bf0:	2004      	movs	r0, #4
 8002bf2:	f002 fa0b 	bl	800500c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8002bfe:	2008      	movs	r0, #8
 8002c00:	f002 fa04 	bl	800500c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c0c:	4802      	ldr	r0, [pc, #8]	@ (8002c18 <ADC1_IRQHandler+0x10>)
 8002c0e:	f000 fe28 	bl	8003862 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000214 	.word	0x20000214

08002c1c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002c20:	f00b fd10 	bl	800e644 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002c2c:	f00b fd40 	bl	800e6b0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002c38:	f002 fa00 	bl	800503c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002c44:	f7fe fdd0 	bl	80017e8 <HW_TS_RTC_Wakeup_Handler>
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e00a      	b.n	8002c74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c5e:	f3af 8000 	nop.w
 8002c62:	4601      	mov	r1, r0
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60ba      	str	r2, [r7, #8]
 8002c6a:	b2ca      	uxtb	r2, r1
 8002c6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dbf0      	blt.n	8002c5e <_read+0x12>
	}

return len;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cae:	605a      	str	r2, [r3, #4]
	return 0;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_isatty>:

int _isatty(int file)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
	return 0;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf8:	4a14      	ldr	r2, [pc, #80]	@ (8002d4c <_sbrk+0x5c>)
 8002cfa:	4b15      	ldr	r3, [pc, #84]	@ (8002d50 <_sbrk+0x60>)
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d04:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <_sbrk+0x64>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <_sbrk+0x64>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <_sbrk+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d207      	bcs.n	8002d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d20:	f00c fad8 	bl	800f2d4 <__errno>
 8002d24:	4603      	mov	r3, r0
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e009      	b.n	8002d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d36:	4b07      	ldr	r3, [pc, #28]	@ (8002d54 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a05      	ldr	r2, [pc, #20]	@ (8002d54 <_sbrk+0x64>)
 8002d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20030000 	.word	0x20030000
 8002d50:	00000400 	.word	0x00000400
 8002d54:	2000033c 	.word	0x2000033c
 8002d58:	2001b5e8 	.word	0x2001b5e8

08002d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002d60:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <SystemInit+0x98>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <SystemInit+0x98>)
 8002d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d84:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002d88:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d94:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <SystemInit+0x9c>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002da6:	f023 0305 	bic.w	r3, r3, #5
 8002daa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002db6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8002dfc <SystemInit+0xa0>)
 8002dc8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dce:	4a0b      	ldr	r2, [pc, #44]	@ (8002dfc <SystemInit+0xa0>)
 8002dd0:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de6:	2200      	movs	r2, #0
 8002de8:	619a      	str	r2, [r3, #24]
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00
 8002df8:	faf6fefb 	.word	0xfaf6fefb
 8002dfc:	22041000 	.word	0x22041000

08002e00 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002e00:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e02:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e04:	3304      	adds	r3, #4

08002e06 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e06:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e08:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002e0a:	d3f9      	bcc.n	8002e00 <CopyDataInit>
  bx lr
 8002e0c:	4770      	bx	lr

08002e0e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002e0e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002e10:	3004      	adds	r0, #4

08002e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002e12:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002e14:	d3fb      	bcc.n	8002e0e <FillZerobss>
  bx lr
 8002e16:	4770      	bx	lr

08002e18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e18:	480c      	ldr	r0, [pc, #48]	@ (8002e4c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002e1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e1c:	f7ff ff9e 	bl	8002d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002e20:	480b      	ldr	r0, [pc, #44]	@ (8002e50 <LoopForever+0x8>)
 8002e22:	490c      	ldr	r1, [pc, #48]	@ (8002e54 <LoopForever+0xc>)
 8002e24:	4a0c      	ldr	r2, [pc, #48]	@ (8002e58 <LoopForever+0x10>)
 8002e26:	2300      	movs	r3, #0
 8002e28:	f7ff ffed 	bl	8002e06 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002e2c:	480b      	ldr	r0, [pc, #44]	@ (8002e5c <LoopForever+0x14>)
 8002e2e:	490c      	ldr	r1, [pc, #48]	@ (8002e60 <LoopForever+0x18>)
 8002e30:	2300      	movs	r3, #0
 8002e32:	f7ff ffee 	bl	8002e12 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002e36:	480b      	ldr	r0, [pc, #44]	@ (8002e64 <LoopForever+0x1c>)
 8002e38:	490b      	ldr	r1, [pc, #44]	@ (8002e68 <LoopForever+0x20>)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f7ff ffe9 	bl	8002e12 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e40:	f00c fa4e 	bl	800f2e0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002e44:	f7ff f878 	bl	8001f38 <main>

08002e48 <LoopForever>:

LoopForever:
  b LoopForever
 8002e48:	e7fe      	b.n	8002e48 <LoopForever>
 8002e4a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002e4c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002e50:	20000004 	.word	0x20000004
 8002e54:	20000098 	.word	0x20000098
 8002e58:	08012458 	.word	0x08012458
  INIT_BSS _sbss, _ebss
 8002e5c:	200000f8 	.word	0x200000f8
 8002e60:	2001b5e4 	.word	0x2001b5e4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002e64:	200301e4 	.word	0x200301e4
 8002e68:	20030a67 	.word	0x20030a67

08002e6c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <AES1_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <HAL_Init+0x3c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8002eac <HAL_Init+0x3c>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e86:	2003      	movs	r0, #3
 8002e88:	f001 fdf8 	bl	8004a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e8c:	200f      	movs	r0, #15
 8002e8e:	f000 f80f 	bl	8002eb0 <HAL_InitTick>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	71fb      	strb	r3, [r7, #7]
 8002e9c:	e001      	b.n	8002ea2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e9e:	f7ff fd67 	bl	8002970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	58004000 	.word	0x58004000

08002eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002ebc:	4b17      	ldr	r3, [pc, #92]	@ (8002f1c <HAL_InitTick+0x6c>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d024      	beq.n	8002f0e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ec4:	f004 f86e 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <HAL_InitTick+0x6c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 fe0e 	bl	8004afe <HAL_SYSTICK_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10f      	bne.n	8002f08 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	d809      	bhi.n	8002f02 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef6:	f001 fdcc 	bl	8004a92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002efa:	4a09      	ldr	r2, [pc, #36]	@ (8002f20 <HAL_InitTick+0x70>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e007      	b.n	8002f12 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e004      	b.n	8002f12 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e001      	b.n	8002f12 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	2000000c 	.word	0x2000000c
 8002f20:	20000008 	.word	0x20000008

08002f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_IncTick+0x20>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_IncTick+0x24>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <HAL_IncTick+0x24>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	2000000c 	.word	0x2000000c
 8002f48:	20000340 	.word	0x20000340

08002f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <HAL_GetTick+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000340 	.word	0x20000340

08002f64 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002f68:	4b03      	ldr	r3, [pc, #12]	@ (8002f78 <HAL_GetTickPrio+0x14>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000008 	.word	0x20000008

08002f7c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <HAL_GetTickFreq+0x14>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	2000000c 	.word	0x2000000c

08002f94 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_SuspendTick+0x1c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <HAL_SuspendTick+0x1c>)
 8002f9e:	f023 0302 	bic.w	r3, r3, #2
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e010 	.word	0xe000e010

08002fb4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_ResumeTick+0x1c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <HAL_ResumeTick+0x1c>)
 8002fbe:	f043 0302 	orr.w	r3, r3, #2
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3360      	adds	r3, #96	@ 0x60
 800304e:	461a      	mov	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <LL_ADC_SetOffset+0x44>)
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	4313      	orrs	r3, r2
 800306c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003074:	bf00      	nop
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	03fff000 	.word	0x03fff000

08003084 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3360      	adds	r3, #96	@ 0x60
 8003092:	461a      	mov	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3360      	adds	r3, #96	@ 0x60
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030fe:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3330      	adds	r3, #48	@ 0x30
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	4413      	add	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	211f      	movs	r1, #31
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	0e9b      	lsrs	r3, r3, #26
 8003144:	f003 011f 	and.w	r1, r3, #31
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	431a      	orrs	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3314      	adds	r3, #20
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	0e5b      	lsrs	r3, r3, #25
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	4413      	add	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	0d1b      	lsrs	r3, r3, #20
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2107      	movs	r1, #7
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	401a      	ands	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	0d1b      	lsrs	r3, r3, #20
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	431a      	orrs	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	43db      	mvns	r3, r3
 8003216:	401a      	ands	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0318 	and.w	r3, r3, #24
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003220:	40d9      	lsrs	r1, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	400b      	ands	r3, r1
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	0007ffff 	.word	0x0007ffff

08003244 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6093      	str	r3, [r2, #8]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800327c:	d101      	bne.n	8003282 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032cc:	d101      	bne.n	80032d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800331c:	f043 0202 	orr.w	r2, r3, #2
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <LL_ADC_IsEnabled+0x18>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <LL_ADC_IsEnabled+0x1a>
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d101      	bne.n	800336e <LL_ADC_IsDisableOngoing+0x18>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <LL_ADC_IsDisableOngoing+0x1a>
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800338c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d101      	bne.n	80033e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003402:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b08      	cmp	r3, #8
 800342c:	d101      	bne.n	8003432 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800344c:	2300      	movs	r3, #0
 800344e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e12e      	b.n	80036bc <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fa9f 	bl	80029b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff feef 	bl	8003268 <LL_ADC_IsDeepPowerDownEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fed5 	bl	8003244 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff0a 	bl	80032b8 <LL_ADC_IsInternalRegulatorEnabled>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d115      	bne.n	80034d6 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff feee 	bl	8003290 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b4:	4b83      	ldr	r3, [pc, #524]	@ (80036c4 <HAL_ADC_Init+0x284>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	4a83      	ldr	r2, [pc, #524]	@ (80036c8 <HAL_ADC_Init+0x288>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	3301      	adds	r3, #1
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034c8:	e002      	b.n	80034d0 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f9      	bne.n	80034ca <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff feec 	bl	80032b8 <LL_ADC_IsInternalRegulatorEnabled>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ea:	f043 0210 	orr.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f6:	f043 0201 	orr.w	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ff60 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 800350c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 80c7 	bne.w	80036aa <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 80c3 	bne.w	80036aa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003528:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800352c:	f043 0202 	orr.w	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fef9 	bl	8003330 <LL_ADC_IsEnabled>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003544:	4861      	ldr	r0, [pc, #388]	@ (80036cc <HAL_ADC_Init+0x28c>)
 8003546:	f7ff fef3 	bl	8003330 <LL_ADC_IsEnabled>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4619      	mov	r1, r3
 8003556:	485e      	ldr	r0, [pc, #376]	@ (80036d0 <HAL_ADC_Init+0x290>)
 8003558:	f7ff fd3c 	bl	8002fd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7e5b      	ldrb	r3, [r3, #25]
 8003560:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003566:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800356c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003572:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800357c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d106      	bne.n	800359c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	3b01      	subs	r3, #1
 8003594:	045b      	lsls	r3, r3, #17
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	4b45      	ldr	r3, [pc, #276]	@ (80036d4 <HAL_ADC_Init+0x294>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	69b9      	ldr	r1, [r7, #24]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fefb 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 80035d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff1c 	bl	800341a <LL_ADC_INJ_IsConversionOngoing>
 80035e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d13d      	bne.n	8003666 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d13a      	bne.n	8003666 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035f4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035fc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800360c:	f023 0302 	bic.w	r3, r3, #2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	69b9      	ldr	r1, [r7, #24]
 8003616:	430b      	orrs	r3, r1
 8003618:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003620:	2b01      	cmp	r3, #1
 8003622:	d118      	bne.n	8003656 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800362e:	f023 0304 	bic.w	r3, r3, #4
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800363a:	4311      	orrs	r1, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003640:	4311      	orrs	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003646:	430a      	orrs	r2, r1
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	611a      	str	r2, [r3, #16]
 8003654:	e007      	b.n	8003666 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d10c      	bne.n	8003688 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	f023 010f 	bic.w	r1, r3, #15
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	1e5a      	subs	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	631a      	str	r2, [r3, #48]	@ 0x30
 8003686:	e007      	b.n	8003698 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 020f 	bic.w	r2, r2, #15
 8003696:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	f023 0303 	bic.w	r3, r3, #3
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80036a8:	e007      	b.n	80036ba <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ae:	f043 0210 	orr.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000004 	.word	0x20000004
 80036c8:	053e2d63 	.word	0x053e2d63
 80036cc:	50040000 	.word	0x50040000
 80036d0:	50040300 	.word	0x50040300
 80036d4:	fff0c007 	.word	0xfff0c007

080036d8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fe71 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d169      	bne.n	80037c4 <HAL_ADC_Start_IT+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_Start_IT+0x26>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e065      	b.n	80037ca <HAL_ADC_Start_IT+0xf2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 feee 	bl	80044e8 <ADC_Enable>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d151      	bne.n	80037ba <HAL_ADC_Start_IT+0xe2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d006      	beq.n	8003744 <HAL_ADC_Start_IT+0x6c>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	f023 0206 	bic.w	r2, r3, #6
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	659a      	str	r2, [r3, #88]	@ 0x58
 8003742:	e002      	b.n	800374a <HAL_ADC_Start_IT+0x72>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	221c      	movs	r2, #28
 8003750:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 021c 	bic.w	r2, r2, #28
 8003768:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d108      	bne.n	8003784 <HAL_ADC_Start_IT+0xac>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0208 	orr.w	r2, r2, #8
 8003780:	605a      	str	r2, [r3, #4]
          break;
 8003782:	e008      	b.n	8003796 <HAL_ADC_Start_IT+0xbe>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0204 	orr.w	r2, r2, #4
 8003792:	605a      	str	r2, [r3, #4]
          break;
 8003794:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379a:	2b00      	cmp	r3, #0
 800379c:	d107      	bne.n	80037ae <HAL_ADC_Start_IT+0xd6>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0210 	orr.w	r2, r2, #16
 80037ac:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fde2 	bl	800337c <LL_ADC_REG_StartConversion>
 80037b8:	e006      	b.n	80037c8 <HAL_ADC_Start_IT+0xf0>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80037c2:	e001      	b.n	80037c8 <HAL_ADC_Start_IT+0xf0>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
 80037c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_Stop_IT+0x16>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e02b      	b.n	8003840 <HAL_ADC_Stop_IT+0x6e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80037f0:	2103      	movs	r1, #3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fdbc 	bl	8004370 <ADC_ConversionStop>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d119      	bne.n	8003836 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 021c 	bic.w	r2, r2, #28
 8003810:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fee2 	bl	80045dc <ADC_Disable>
 8003818:	4603      	mov	r3, r0
 800381a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_ADC_Stop_IT+0x64>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b088      	sub	sp, #32
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x56>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d012      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d105      	bne.n	80038aa <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 ffac 	bl	8004808 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2202      	movs	r2, #2
 80038b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_ADC_IRQHandler+0x6a>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d05d      	beq.n	8003992 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d058      	beq.n	8003992 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fbf2 	bl	80030e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d03d      	beq.n	8003984 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003916:	d035      	beq.n	8003984 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b08      	cmp	r3, #8
 8003924:	d12e      	bne.n	8003984 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fd4e 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11a      	bne.n	800396c <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 020c 	bic.w	r2, r2, #12
 8003944:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d112      	bne.n	8003984 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	655a      	str	r2, [r3, #84]	@ 0x54
 800396a:	e00b      	b.n	8003984 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003970:	f043 0210 	orr.w	r2, r3, #16
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f00a fba7 	bl	800e0d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	220c      	movs	r2, #12
 8003990:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <HAL_ADC_IRQHandler+0x144>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d074      	beq.n	8003a9a <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d06f      	beq.n	8003a9a <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ca:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fbd2 	bl	8003180 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039dc:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fb7f 	bl	80030e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039e8:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d049      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <HAL_ADC_IRQHandler+0x1b0>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d041      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d13c      	bne.n	8003a8c <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1c:	2b40      	cmp	r3, #64	@ 0x40
 8003a1e:	d135      	bne.n	8003a8c <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d12e      	bne.n	8003a8c <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fcf1 	bl	800341a <LL_ADC_INJ_IsConversionOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11a      	bne.n	8003a74 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a4c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d112      	bne.n	8003a8c <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a72:	e00b      	b.n	8003a8c <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a78:	f043 0210 	orr.w	r2, r3, #16
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fe93 	bl	80047b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2260      	movs	r2, #96	@ 0x60
 8003a98:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d011      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x266>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f887 	bl	8003bce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2280      	movs	r2, #128	@ 0x80
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d012      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x296>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fe79 	bl	80047e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003af6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d012      	beq.n	8003b28 <HAL_ADC_IRQHandler+0x2c6>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00d      	beq.n	8003b28 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b10:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fe6b 	bl	80047f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02b      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x328>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d026      	beq.n	8003b8a <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8003b44:	2301      	movs	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	e009      	b.n	8003b5e <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fb08 	bl	8003164 <LL_ADC_REG_GetDMATransfer>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10e      	bne.n	8003b82 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b68:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b74:	f043 0202 	orr.w	r2, r3, #2
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f00a fa99 	bl	800e0b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2210      	movs	r2, #16
 8003b88:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d018      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x364>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d013      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	f043 0208 	orr.w	r2, r3, #8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bbe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fe03 	bl	80047cc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8003bc6:	bf00      	nop
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b0b6      	sub	sp, #216	@ 0xd8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x22>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e39f      	b.n	8004346 <HAL_ADC_ConfigChannel+0x762>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fbda 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 8384 	bne.w	8004328 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f7ff fa6d 	bl	800310c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fbc8 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 8003c3c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fbe8 	bl	800341a <LL_ADC_INJ_IsConversionOngoing>
 8003c4a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 81a6 	bne.w	8003fa4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 81a1 	bne.w	8003fa4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6819      	ldr	r1, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f7ff fa99 	bl	80031a6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	08db      	lsrs	r3, r3, #3
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d00a      	beq.n	8003cac <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6919      	ldr	r1, [r3, #16]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ca6:	f7ff f9c9 	bl	800303c <LL_ADC_SetOffset>
 8003caa:	e17b      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff f9e6 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0xf4>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff f9db 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	0e9b      	lsrs	r3, r3, #26
 8003cd2:	f003 021f 	and.w	r2, r3, #31
 8003cd6:	e01e      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x132>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff f9d0 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8003cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8003cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003d06:	2320      	movs	r3, #32
 8003d08:	e004      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x14a>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	0e9b      	lsrs	r3, r3, #26
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	e018      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x17c>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003d52:	2320      	movs	r3, #32
 8003d54:	e004      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d106      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff f99f 	bl	80030b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2101      	movs	r1, #1
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff f983 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x1ba>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff f978 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003d94:	4603      	mov	r3, r0
 8003d96:	0e9b      	lsrs	r3, r3, #26
 8003d98:	f003 021f 	and.w	r2, r3, #31
 8003d9c:	e01e      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x1f8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff f96d 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003dbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	e004      	b.n	8003dda <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x210>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	e018      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x242>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003e18:	2320      	movs	r3, #32
 8003e1a:	e004      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e20:	fab3 f383 	clz	r3, r3
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d106      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2101      	movs	r1, #1
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff f93c 	bl	80030b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff f920 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x280>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff f915 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	0e9b      	lsrs	r3, r3, #26
 8003e5e:	f003 021f 	and.w	r2, r3, #31
 8003e62:	e01e      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x2be>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2102      	movs	r1, #2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f90a 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003e82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003e92:	2320      	movs	r3, #32
 8003e94:	e004      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x2d6>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	0e9b      	lsrs	r3, r3, #26
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	e016      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x304>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ec6:	fa93 f3a3 	rbit	r3, r3
 8003eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003ecc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ece:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003eda:	2320      	movs	r3, #32
 8003edc:	e004      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d106      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff f8db 	bl	80030b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2103      	movs	r1, #3
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff f8bf 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x342>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2103      	movs	r1, #3
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff f8b4 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	0e9b      	lsrs	r3, r3, #26
 8003f20:	f003 021f 	and.w	r2, r3, #31
 8003f24:	e017      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x372>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff f8a9 	bl	8003084 <LL_ADC_GetOffsetChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f40:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003f48:	2320      	movs	r3, #32
 8003f4a:	e003      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003f4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x38a>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	0e9b      	lsrs	r3, r3, #26
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	e011      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x3ae>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f76:	fa93 f3a3 	rbit	r3, r3
 8003f7a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003f86:	2320      	movs	r3, #32
 8003f88:	e003      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f8c:	fab3 f383 	clz	r3, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d106      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2103      	movs	r1, #3
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff f886 	bl	80030b0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff f9c1 	bl	8003330 <LL_ADC_IsEnabled>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 81c2 	bne.w	800433a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f7ff f91a 	bl	80031fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8004208 <HAL_ADC_ConfigChannel+0x624>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	f040 8130 	bne.w	8004234 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x418>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	3301      	adds	r3, #1
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2b09      	cmp	r3, #9
 8003ff2:	bf94      	ite	ls
 8003ff4:	2301      	movls	r3, #1
 8003ff6:	2300      	movhi	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e019      	b.n	8004030 <HAL_ADC_ConfigChannel+0x44c>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800400a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800400c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800400e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8004014:	2320      	movs	r3, #32
 8004016:	e003      	b.n	8004020 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8004018:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3301      	adds	r3, #1
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	2b09      	cmp	r3, #9
 8004028:	bf94      	ite	ls
 800402a:	2301      	movls	r3, #1
 800402c:	2300      	movhi	r3, #0
 800402e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004030:	2b00      	cmp	r3, #0
 8004032:	d079      	beq.n	8004128 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403c:	2b00      	cmp	r3, #0
 800403e:	d107      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x46c>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0e9b      	lsrs	r3, r3, #26
 8004046:	3301      	adds	r3, #1
 8004048:	069b      	lsls	r3, r3, #26
 800404a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800404e:	e015      	b.n	800407c <HAL_ADC_ConfigChannel+0x498>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800405e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004060:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004068:	2320      	movs	r3, #32
 800406a:	e003      	b.n	8004074 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800406c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	3301      	adds	r3, #1
 8004076:	069b      	lsls	r3, r3, #26
 8004078:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_ADC_ConfigChannel+0x4b8>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	0e9b      	lsrs	r3, r3, #26
 800408e:	3301      	adds	r3, #1
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2101      	movs	r1, #1
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	e017      	b.n	80040cc <HAL_ADC_ConfigChannel+0x4e8>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80040aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80040ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80040b4:	2320      	movs	r3, #32
 80040b6:	e003      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80040b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	3301      	adds	r3, #1
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	2101      	movs	r1, #1
 80040c8:	fa01 f303 	lsl.w	r3, r1, r3
 80040cc:	ea42 0103 	orr.w	r1, r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x50e>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0e9b      	lsrs	r3, r3, #26
 80040e2:	3301      	adds	r3, #1
 80040e4:	f003 021f 	and.w	r2, r3, #31
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	051b      	lsls	r3, r3, #20
 80040f0:	e018      	b.n	8004124 <HAL_ADC_ConfigChannel+0x540>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800410a:	2320      	movs	r3, #32
 800410c:	e003      	b.n	8004116 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800410e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f003 021f 	and.w	r2, r3, #31
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004124:	430b      	orrs	r3, r1
 8004126:	e080      	b.n	800422a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004130:	2b00      	cmp	r3, #0
 8004132:	d107      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x560>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	3301      	adds	r3, #1
 800413c:	069b      	lsls	r3, r3, #26
 800413e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004142:	e015      	b.n	8004170 <HAL_ADC_ConfigChannel+0x58c>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800415c:	2320      	movs	r3, #32
 800415e:	e003      	b.n	8004168 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	3301      	adds	r3, #1
 800416a:	069b      	lsls	r3, r3, #26
 800416c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x5ac>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	0e9b      	lsrs	r3, r3, #26
 8004182:	3301      	adds	r3, #1
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2101      	movs	r1, #1
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	e017      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x5dc>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	61fb      	str	r3, [r7, #28]
  return result;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e003      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3301      	adds	r3, #1
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	ea42 0103 	orr.w	r1, r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10d      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x608>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	0e9b      	lsrs	r3, r3, #26
 80041d6:	3301      	adds	r3, #1
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	3b1e      	subs	r3, #30
 80041e4:	051b      	lsls	r3, r3, #20
 80041e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041ea:	e01d      	b.n	8004228 <HAL_ADC_ConfigChannel+0x644>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	613b      	str	r3, [r7, #16]
  return result;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004204:	2320      	movs	r3, #32
 8004206:	e005      	b.n	8004214 <HAL_ADC_ConfigChannel+0x630>
 8004208:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3301      	adds	r3, #1
 8004216:	f003 021f 	and.w	r2, r3, #31
 800421a:	4613      	mov	r3, r2
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	4413      	add	r3, r2
 8004220:	3b1e      	subs	r3, #30
 8004222:	051b      	lsls	r3, r3, #20
 8004224:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004228:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800422e:	4619      	mov	r1, r3
 8004230:	f7fe ffb9 	bl	80031a6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b45      	ldr	r3, [pc, #276]	@ (8004350 <HAL_ADC_ConfigChannel+0x76c>)
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d07c      	beq.n	800433a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004240:	4844      	ldr	r0, [pc, #272]	@ (8004354 <HAL_ADC_ConfigChannel+0x770>)
 8004242:	f7fe feed 	bl	8003020 <LL_ADC_GetCommonPathInternalCh>
 8004246:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800424a:	4843      	ldr	r0, [pc, #268]	@ (8004358 <HAL_ADC_ConfigChannel+0x774>)
 800424c:	f7ff f870 	bl	8003330 <LL_ADC_IsEnabled>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d15e      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a40      	ldr	r2, [pc, #256]	@ (800435c <HAL_ADC_ConfigChannel+0x778>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d127      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x6cc>
 8004260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d121      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a39      	ldr	r2, [pc, #228]	@ (8004358 <HAL_ADC_ConfigChannel+0x774>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d161      	bne.n	800433a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800427a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800427e:	4619      	mov	r1, r3
 8004280:	4834      	ldr	r0, [pc, #208]	@ (8004354 <HAL_ADC_ConfigChannel+0x770>)
 8004282:	f7fe feba 	bl	8002ffa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004286:	4b36      	ldr	r3, [pc, #216]	@ (8004360 <HAL_ADC_ConfigChannel+0x77c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	4a35      	ldr	r2, [pc, #212]	@ (8004364 <HAL_ADC_ConfigChannel+0x780>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	4613      	mov	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80042a0:	e002      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f9      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ae:	e044      	b.n	800433a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004368 <HAL_ADC_ConfigChannel+0x784>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d113      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x6fe>
 80042ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10d      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a23      	ldr	r2, [pc, #140]	@ (8004358 <HAL_ADC_ConfigChannel+0x774>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d134      	bne.n	800433a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80042d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d8:	4619      	mov	r1, r3
 80042da:	481e      	ldr	r0, [pc, #120]	@ (8004354 <HAL_ADC_ConfigChannel+0x770>)
 80042dc:	f7fe fe8d 	bl	8002ffa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042e0:	e02b      	b.n	800433a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a21      	ldr	r2, [pc, #132]	@ (800436c <HAL_ADC_ConfigChannel+0x788>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d126      	bne.n	800433a <HAL_ADC_ConfigChannel+0x756>
 80042ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d120      	bne.n	800433a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a16      	ldr	r2, [pc, #88]	@ (8004358 <HAL_ADC_ConfigChannel+0x774>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d11b      	bne.n	800433a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004306:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800430a:	4619      	mov	r1, r3
 800430c:	4811      	ldr	r0, [pc, #68]	@ (8004354 <HAL_ADC_ConfigChannel+0x770>)
 800430e:	f7fe fe74 	bl	8002ffa <LL_ADC_SetCommonPathInternalCh>
 8004312:	e012      	b.n	800433a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004326:	e008      	b.n	800433a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8004342:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004346:	4618      	mov	r0, r3
 8004348:	37d8      	adds	r7, #216	@ 0xd8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	80080000 	.word	0x80080000
 8004354:	50040300 	.word	0x50040300
 8004358:	50040000 	.word	0x50040000
 800435c:	c7520000 	.word	0xc7520000
 8004360:	20000004 	.word	0x20000004
 8004364:	053e2d63 	.word	0x053e2d63
 8004368:	cb840000 	.word	0xcb840000
 800436c:	80000001 	.word	0x80000001

08004370 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff f820 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 800438c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff f841 	bl	800341a <LL_ADC_INJ_IsConversionOngoing>
 8004398:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d103      	bne.n	80043a8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 8098 	beq.w	80044d8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d02a      	beq.n	800440c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7e5b      	ldrb	r3, [r3, #25]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d126      	bne.n	800440c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	7e1b      	ldrb	r3, [r3, #24]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d122      	bne.n	800440c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043ca:	e014      	b.n	80043f6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4a45      	ldr	r2, [pc, #276]	@ (80044e4 <ADC_ConversionStop+0x174>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d90d      	bls.n	80043f0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	f043 0210 	orr.w	r2, r3, #16
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e074      	b.n	80044da <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	3301      	adds	r3, #1
 80043f4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	d1e3      	bne.n	80043cc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2240      	movs	r2, #64	@ 0x40
 800440a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d014      	beq.n	800443c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe ffd8 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe ff95 	bl	8003356 <LL_ADC_IsDisableOngoing>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe ffb4 	bl	80033a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d014      	beq.n	800446c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe ffe7 	bl	800341a <LL_ADC_INJ_IsConversionOngoing>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe ff7d 	bl	8003356 <LL_ADC_IsDisableOngoing>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe ffc3 	bl	80033f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d005      	beq.n	800447e <ADC_ConversionStop+0x10e>
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d105      	bne.n	8004484 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004478:	230c      	movs	r3, #12
 800447a:	617b      	str	r3, [r7, #20]
        break;
 800447c:	e005      	b.n	800448a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800447e:	2308      	movs	r3, #8
 8004480:	617b      	str	r3, [r7, #20]
        break;
 8004482:	e002      	b.n	800448a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004484:	2304      	movs	r3, #4
 8004486:	617b      	str	r3, [r7, #20]
        break;
 8004488:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800448a:	f7fe fd5f 	bl	8002f4c <HAL_GetTick>
 800448e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004490:	e01b      	b.n	80044ca <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004492:	f7fe fd5b 	bl	8002f4c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b05      	cmp	r3, #5
 800449e:	d914      	bls.n	80044ca <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b2:	f043 0210 	orr.w	r2, r3, #16
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044be:	f043 0201 	orr.w	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e007      	b.n	80044da <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1dc      	bne.n	8004492 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3720      	adds	r7, #32
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	a33fffff 	.word	0xa33fffff

080044e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe ff19 	bl	8003330 <LL_ADC_IsEnabled>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d15e      	bne.n	80045c2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	4b30      	ldr	r3, [pc, #192]	@ (80045cc <ADC_Enable+0xe4>)
 800450c:	4013      	ands	r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004516:	f043 0210 	orr.w	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004522:	f043 0201 	orr.w	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e04a      	b.n	80045c4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fed4 	bl	80032e0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004538:	4825      	ldr	r0, [pc, #148]	@ (80045d0 <ADC_Enable+0xe8>)
 800453a:	f7fe fd71 	bl	8003020 <LL_ADC_GetCommonPathInternalCh>
 800453e:	4603      	mov	r3, r0
 8004540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00f      	beq.n	8004568 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004548:	4b22      	ldr	r3, [pc, #136]	@ (80045d4 <ADC_Enable+0xec>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	099b      	lsrs	r3, r3, #6
 800454e:	4a22      	ldr	r2, [pc, #136]	@ (80045d8 <ADC_Enable+0xf0>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	099b      	lsrs	r3, r3, #6
 8004556:	3301      	adds	r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800455a:	e002      	b.n	8004562 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	3b01      	subs	r3, #1
 8004560:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f9      	bne.n	800455c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004568:	f7fe fcf0 	bl	8002f4c <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800456e:	e021      	b.n	80045b4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe fedb 	bl	8003330 <LL_ADC_IsEnabled>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe feab 	bl	80032e0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800458a:	f7fe fcdf 	bl	8002f4c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d90d      	bls.n	80045b4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e007      	b.n	80045c4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d1d6      	bne.n	8004570 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	8000003f 	.word	0x8000003f
 80045d0:	50040300 	.word	0x50040300
 80045d4:	20000004 	.word	0x20000004
 80045d8:	053e2d63 	.word	0x053e2d63

080045dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe feb4 	bl	8003356 <LL_ADC_IsDisableOngoing>
 80045ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe fe9b 	bl	8003330 <LL_ADC_IsEnabled>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d047      	beq.n	8004690 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d144      	bne.n	8004690 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 030d 	and.w	r3, r3, #13
 8004610:	2b01      	cmp	r3, #1
 8004612:	d10c      	bne.n	800462e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe fe75 	bl	8003308 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2203      	movs	r2, #3
 8004624:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004626:	f7fe fc91 	bl	8002f4c <HAL_GetTick>
 800462a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800462c:	e029      	b.n	8004682 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004632:	f043 0210 	orr.w	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	f043 0201 	orr.w	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e023      	b.n	8004692 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800464a:	f7fe fc7f 	bl	8002f4c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d914      	bls.n	8004682 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466a:	f043 0210 	orr.w	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e007      	b.n	8004692 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1dc      	bne.n	800464a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <LL_ADC_StartCalibration>:
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80046ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <LL_ADC_IsCalibrationOnGoing>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046e0:	d101      	bne.n	80046e6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_ADCEx_Calibration_Start+0x1c>
 800470c:	2302      	movs	r3, #2
 800470e:	e04d      	b.n	80047ac <HAL_ADCEx_Calibration_Start+0xb8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff5f 	bl	80045dc <ADC_Disable>
 800471e:	4603      	mov	r3, r0
 8004720:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d136      	bne.n	8004796 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004730:	f023 0302 	bic.w	r3, r3, #2
 8004734:	f043 0202 	orr.w	r2, r3, #2
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	@ 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff ffa9 	bl	800469a <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004748:	e014      	b.n	8004774 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3301      	adds	r3, #1
 800474e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d90d      	bls.n	8004774 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475c:	f023 0312 	bic.w	r3, r3, #18
 8004760:	f043 0210 	orr.w	r2, r3, #16
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e01b      	b.n	80047ac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff ffa7 	bl	80046cc <LL_ADC_IsCalibrationOnGoing>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e2      	bne.n	800474a <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004788:	f023 0303 	bic.w	r3, r3, #3
 800478c:	f043 0201 	orr.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	@ 0x54
 8004794:	e005      	b.n	80047a2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	f043 0210 	orr.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	00026aaa 	.word	0x00026aaa

080047b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <__NVIC_SetPriorityGrouping>:
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800482c:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <__NVIC_SetPriorityGrouping+0x44>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004838:	4013      	ands	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800484c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800484e:	4a04      	ldr	r2, [pc, #16]	@ (8004860 <__NVIC_SetPriorityGrouping+0x44>)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	60d3      	str	r3, [r2, #12]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <__NVIC_GetPriorityGrouping>:
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004868:	4b04      	ldr	r3, [pc, #16]	@ (800487c <__NVIC_GetPriorityGrouping+0x18>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	0a1b      	lsrs	r3, r3, #8
 800486e:	f003 0307 	and.w	r3, r3, #7
}
 8004872:	4618      	mov	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	e000ed00 	.word	0xe000ed00

08004880 <__NVIC_EnableIRQ>:
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	2b00      	cmp	r3, #0
 8004890:	db0b      	blt.n	80048aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	f003 021f 	and.w	r2, r3, #31
 8004898:	4907      	ldr	r1, [pc, #28]	@ (80048b8 <__NVIC_EnableIRQ+0x38>)
 800489a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	2001      	movs	r0, #1
 80048a2:	fa00 f202 	lsl.w	r2, r0, r2
 80048a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	e000e100 	.word	0xe000e100

080048bc <__NVIC_DisableIRQ>:
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	db12      	blt.n	80048f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	f003 021f 	and.w	r2, r3, #31
 80048d4:	490a      	ldr	r1, [pc, #40]	@ (8004900 <__NVIC_DisableIRQ+0x44>)
 80048d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2001      	movs	r0, #1
 80048de:	fa00 f202 	lsl.w	r2, r0, r2
 80048e2:	3320      	adds	r3, #32
 80048e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80048e8:	f3bf 8f4f 	dsb	sy
}
 80048ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048ee:	f3bf 8f6f 	isb	sy
}
 80048f2:	bf00      	nop
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000e100 	.word	0xe000e100

08004904 <__NVIC_SetPendingIRQ>:
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800490e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004912:	2b00      	cmp	r3, #0
 8004914:	db0c      	blt.n	8004930 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	f003 021f 	and.w	r2, r3, #31
 800491c:	4907      	ldr	r1, [pc, #28]	@ (800493c <__NVIC_SetPendingIRQ+0x38>)
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	2001      	movs	r0, #1
 8004926:	fa00 f202 	lsl.w	r2, r0, r2
 800492a:	3340      	adds	r3, #64	@ 0x40
 800492c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	e000e100 	.word	0xe000e100

08004940 <__NVIC_ClearPendingIRQ>:
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800494a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494e:	2b00      	cmp	r3, #0
 8004950:	db0c      	blt.n	800496c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	f003 021f 	and.w	r2, r3, #31
 8004958:	4907      	ldr	r1, [pc, #28]	@ (8004978 <__NVIC_ClearPendingIRQ+0x38>)
 800495a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	2001      	movs	r0, #1
 8004962:	fa00 f202 	lsl.w	r2, r0, r2
 8004966:	3360      	adds	r3, #96	@ 0x60
 8004968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	e000e100 	.word	0xe000e100

0800497c <__NVIC_SetPriority>:
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	6039      	str	r1, [r7, #0]
 8004986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498c:	2b00      	cmp	r3, #0
 800498e:	db0a      	blt.n	80049a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	490c      	ldr	r1, [pc, #48]	@ (80049c8 <__NVIC_SetPriority+0x4c>)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	0112      	lsls	r2, r2, #4
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	440b      	add	r3, r1
 80049a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80049a4:	e00a      	b.n	80049bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	4908      	ldr	r1, [pc, #32]	@ (80049cc <__NVIC_SetPriority+0x50>)
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	3b04      	subs	r3, #4
 80049b4:	0112      	lsls	r2, r2, #4
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	440b      	add	r3, r1
 80049ba:	761a      	strb	r2, [r3, #24]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000e100 	.word	0xe000e100
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <NVIC_EncodePriority>:
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	@ 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f1c3 0307 	rsb	r3, r3, #7
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	bf28      	it	cs
 80049ee:	2304      	movcs	r3, #4
 80049f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3304      	adds	r3, #4
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d902      	bls.n	8004a00 <NVIC_EncodePriority+0x30>
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	3b03      	subs	r3, #3
 80049fe:	e000      	b.n	8004a02 <NVIC_EncodePriority+0x32>
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	401a      	ands	r2, r3
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a18:	f04f 31ff 	mov.w	r1, #4294967295
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a22:	43d9      	mvns	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a28:	4313      	orrs	r3, r2
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3724      	adds	r7, #36	@ 0x24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <SysTick_Config>:
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a48:	d301      	bcc.n	8004a4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e00f      	b.n	8004a6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a78 <SysTick_Config+0x40>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a56:	210f      	movs	r1, #15
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5c:	f7ff ff8e 	bl	800497c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a60:	4b05      	ldr	r3, [pc, #20]	@ (8004a78 <SysTick_Config+0x40>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a66:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <SysTick_Config+0x40>)
 8004a68:	2207      	movs	r2, #7
 8004a6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	e000e010 	.word	0xe000e010

08004a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fec9 	bl	800481c <__NVIC_SetPriorityGrouping>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	4603      	mov	r3, r0
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa0:	f7ff fee0 	bl	8004864 <__NVIC_GetPriorityGrouping>
 8004aa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6978      	ldr	r0, [r7, #20]
 8004aac:	f7ff ff90 	bl	80049d0 <NVIC_EncodePriority>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff5f 	bl	800497c <__NVIC_SetPriority>
}
 8004abe:	bf00      	nop
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fed3 	bl	8004880 <__NVIC_EnableIRQ>
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	4603      	mov	r3, r0
 8004aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fee3 	bl	80048bc <__NVIC_DisableIRQ>
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff ff96 	bl	8004a38 <SysTick_Config>
 8004b0c:	4603      	mov	r3, r0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff feed 	bl	8004904 <__NVIC_SetPendingIRQ>
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	4603      	mov	r3, r0
 8004b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff fefd 	bl	8004940 <__NVIC_ClearPendingIRQ>
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5a:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004b5c:	4b40      	ldr	r3, [pc, #256]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004b64:	4013      	ands	r3, r2
 8004b66:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 8004b68:	4b3d      	ldr	r3, [pc, #244]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	43db      	mvns	r3, r3
 8004b72:	493b      	ldr	r1, [pc, #236]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 8004b78:	4b3a      	ldr	r3, [pc, #232]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c68 <HAL_FLASH_IRQHandler+0x118>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 8004b84:	4b37      	ldr	r3, [pc, #220]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	e008      	b.n	8004b9e <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 8004b8c:	4b35      	ldr	r3, [pc, #212]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 8004b98:	4b32      	ldr	r3, [pc, #200]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d021      	beq.n	8004be8 <HAL_FLASH_IRQHandler+0x98>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	4a2d      	ldr	r2, [pc, #180]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004bae:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb6:	d307      	bcc.n	8004bc8 <HAL_FLASH_IRQHandler+0x78>
 8004bb8:	4b29      	ldr	r3, [pc, #164]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004bc2:	4927      	ldr	r1, [pc, #156]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	618b      	str	r3, [r1, #24]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_FLASH_IRQHandler+0x8c>
 8004bd2:	4a23      	ldr	r2, [pc, #140]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004bda:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004bdc:	4b21      	ldr	r3, [pc, #132]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f84c 	bl	8004c80 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004be8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d124      	bne.n	8004c3e <HAL_FLASH_IRQHandler+0xee>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d117      	bne.n	8004c32 <HAL_FLASH_IRQHandler+0xe2>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8004c02:	4b18      	ldr	r3, [pc, #96]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	4a16      	ldr	r2, [pc, #88]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c0a:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8004c0c:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_FLASH_IRQHandler+0xda>
      {
        /* Increment page number */
        pFlash.Page++;
 8004c14:	4b13      	ldr	r3, [pc, #76]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	4a12      	ldr	r2, [pc, #72]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c1c:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 8004c1e:	4b11      	ldr	r3, [pc, #68]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f836 	bl	8004c94 <FLASH_PageErase>
 8004c28:	e006      	b.n	8004c38 <HAL_FLASH_IRQHandler+0xe8>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	e002      	b.n	8004c38 <HAL_FLASH_IRQHandler+0xe8>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 8004c32:	4b0c      	ldr	r3, [pc, #48]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f817 	bl	8004c6c <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 8004c3e:	4b09      	ldr	r3, [pc, #36]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d108      	bne.n	8004c58 <HAL_FLASH_IRQHandler+0x108>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004c46:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	4a05      	ldr	r2, [pc, #20]	@ (8004c60 <HAL_FLASH_IRQHandler+0x110>)
 8004c4c:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8004c50:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004c52:	4b04      	ldr	r3, [pc, #16]	@ (8004c64 <HAL_FLASH_IRQHandler+0x114>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
  }
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	58004000 	.word	0x58004000
 8004c64:	20000344 	.word	0x20000344
 8004c68:	00040001 	.word	0x00040001

08004c6c <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004c9c:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <FLASH_PageErase+0x30>)
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	4a06      	ldr	r2, [pc, #24]	@ (8004cc4 <FLASH_PageErase+0x30>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb0:	f043 0302 	orr.w	r3, r3, #2
 8004cb4:	6153      	str	r3, [r2, #20]
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	58004000 	.word	0x58004000

08004cc8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cd6:	e14c      	b.n	8004f72 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 813e 	beq.w	8004f6c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d005      	beq.n	8004d08 <HAL_GPIO_Init+0x40>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d130      	bne.n	8004d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	2203      	movs	r2, #3
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d3e:	2201      	movs	r2, #1
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	f003 0201 	and.w	r2, r3, #1
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d017      	beq.n	8004da6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	2203      	movs	r2, #3
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d123      	bne.n	8004dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	08da      	lsrs	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3208      	adds	r2, #8
 8004dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	220f      	movs	r2, #15
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	08da      	lsrs	r2, r3, #3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3208      	adds	r2, #8
 8004df4:	6939      	ldr	r1, [r7, #16]
 8004df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	2203      	movs	r2, #3
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0203 	and.w	r2, r3, #3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8098 	beq.w	8004f6c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004e3c:	4a54      	ldr	r2, [pc, #336]	@ (8004f90 <HAL_GPIO_Init+0x2c8>)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	3302      	adds	r3, #2
 8004e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	220f      	movs	r2, #15
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e66:	d019      	beq.n	8004e9c <HAL_GPIO_Init+0x1d4>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f94 <HAL_GPIO_Init+0x2cc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <HAL_GPIO_Init+0x1d0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a49      	ldr	r2, [pc, #292]	@ (8004f98 <HAL_GPIO_Init+0x2d0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00d      	beq.n	8004e94 <HAL_GPIO_Init+0x1cc>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a48      	ldr	r2, [pc, #288]	@ (8004f9c <HAL_GPIO_Init+0x2d4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <HAL_GPIO_Init+0x1c8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a47      	ldr	r2, [pc, #284]	@ (8004fa0 <HAL_GPIO_Init+0x2d8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d101      	bne.n	8004e8c <HAL_GPIO_Init+0x1c4>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	e008      	b.n	8004e9e <HAL_GPIO_Init+0x1d6>
 8004e8c:	2307      	movs	r3, #7
 8004e8e:	e006      	b.n	8004e9e <HAL_GPIO_Init+0x1d6>
 8004e90:	2303      	movs	r3, #3
 8004e92:	e004      	b.n	8004e9e <HAL_GPIO_Init+0x1d6>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e002      	b.n	8004e9e <HAL_GPIO_Init+0x1d6>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <HAL_GPIO_Init+0x1d6>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	f002 0203 	and.w	r2, r2, #3
 8004ea4:	0092      	lsls	r2, r2, #2
 8004ea6:	4093      	lsls	r3, r2
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004eae:	4938      	ldr	r1, [pc, #224]	@ (8004f90 <HAL_GPIO_Init+0x2c8>)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	089b      	lsrs	r3, r3, #2
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ebc:	4b39      	ldr	r3, [pc, #228]	@ (8004fa4 <HAL_GPIO_Init+0x2dc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ee0:	4a30      	ldr	r2, [pc, #192]	@ (8004fa4 <HAL_GPIO_Init+0x2dc>)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa4 <HAL_GPIO_Init+0x2dc>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f0a:	4a26      	ldr	r2, [pc, #152]	@ (8004fa4 <HAL_GPIO_Init+0x2dc>)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f10:	4b24      	ldr	r3, [pc, #144]	@ (8004fa4 <HAL_GPIO_Init+0x2dc>)
 8004f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f36:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa4 <HAL_GPIO_Init+0x2dc>)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004f3e:	4b19      	ldr	r3, [pc, #100]	@ (8004fa4 <HAL_GPIO_Init+0x2dc>)
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f64:	4a0f      	ldr	r2, [pc, #60]	@ (8004fa4 <HAL_GPIO_Init+0x2dc>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f47f aeab 	bne.w	8004cd8 <HAL_GPIO_Init+0x10>
  }
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40010000 	.word	0x40010000
 8004f94:	48000400 	.word	0x48000400
 8004f98:	48000800 	.word	0x48000800
 8004f9c:	48000c00 	.word	0x48000c00
 8004fa0:	48001000 	.word	0x48001000
 8004fa4:	58000800 	.word	0x58000800

08004fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fb8:	787b      	ldrb	r3, [r7, #1]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fbe:	887a      	ldrh	r2, [r7, #2]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fc4:	e002      	b.n	8004fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fc6:	887a      	ldrh	r2, [r7, #2]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	041a      	lsls	r2, r3, #16
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	43d9      	mvns	r1, r3
 8004ff6:	887b      	ldrh	r3, [r7, #2]
 8004ff8:	400b      	ands	r3, r1
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	619a      	str	r2, [r3, #24]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005016:	4b08      	ldr	r3, [pc, #32]	@ (8005038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	4013      	ands	r3, r2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d006      	beq.n	8005030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005022:	4a05      	ldr	r2, [pc, #20]	@ (8005038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005028:	88fb      	ldrh	r3, [r7, #6]
 800502a:	4618      	mov	r0, r3
 800502c:	f006 fe0c 	bl	800bc48 <HAL_GPIO_EXTI_Callback>
  }
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	58000800 	.word	0x58000800

0800503c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005042:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <HAL_HSEM_IRQHandler+0x30>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005048:	4b08      	ldr	r3, [pc, #32]	@ (800506c <HAL_HSEM_IRQHandler+0x30>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	43db      	mvns	r3, r3
 8005050:	4906      	ldr	r1, [pc, #24]	@ (800506c <HAL_HSEM_IRQHandler+0x30>)
 8005052:	4013      	ands	r3, r2
 8005054:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005056:	4a05      	ldr	r2, [pc, #20]	@ (800506c <HAL_HSEM_IRQHandler+0x30>)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f807 	bl	8005070 <HAL_HSEM_FreeCallback>
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	58001500 	.word	0x58001500

08005070 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e081      	b.n	800519a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fd fccc 	bl	8002a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2224      	movs	r2, #36	@ 0x24
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050fa:	609a      	str	r2, [r3, #8]
 80050fc:	e006      	b.n	800510c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800510a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d104      	bne.n	800511e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800511c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800512c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005130:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005140:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69d9      	ldr	r1, [r3, #28]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1a      	ldr	r2, [r3, #32]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	817b      	strh	r3, [r7, #10]
 80051b6:	460b      	mov	r3, r1
 80051b8:	813b      	strh	r3, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	f040 80f9 	bne.w	80053be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_I2C_Mem_Write+0x34>
 80051d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0ed      	b.n	80053c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_I2C_Mem_Write+0x4e>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e0e6      	b.n	80053c0 <HAL_I2C_Mem_Write+0x21c>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051fa:	f7fd fea7 	bl	8002f4c <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	2319      	movs	r3, #25
 8005206:	2201      	movs	r2, #1
 8005208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fac3 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0d1      	b.n	80053c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2221      	movs	r2, #33	@ 0x21
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2240      	movs	r2, #64	@ 0x40
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a3a      	ldr	r2, [r7, #32]
 8005236:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800523c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005244:	88f8      	ldrh	r0, [r7, #6]
 8005246:	893a      	ldrh	r2, [r7, #8]
 8005248:	8979      	ldrh	r1, [r7, #10]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	4603      	mov	r3, r0
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f9d3 	bl	8005600 <I2C_RequestMemoryWrite>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0a9      	b.n	80053c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	2bff      	cmp	r3, #255	@ 0xff
 8005274:	d90e      	bls.n	8005294 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	22ff      	movs	r2, #255	@ 0xff
 800527a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005280:	b2da      	uxtb	r2, r3
 8005282:	8979      	ldrh	r1, [r7, #10]
 8005284:	2300      	movs	r3, #0
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fc3d 	bl	8005b0c <I2C_TransferConfig>
 8005292:	e00f      	b.n	80052b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	8979      	ldrh	r1, [r7, #10]
 80052a6:	2300      	movs	r3, #0
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fc2c 	bl	8005b0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fabc 	bl	8005836 <I2C_WaitOnTXISFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e07b      	b.n	80053c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d034      	beq.n	800536c <HAL_I2C_Mem_Write+0x1c8>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005306:	2b00      	cmp	r3, #0
 8005308:	d130      	bne.n	800536c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	2200      	movs	r2, #0
 8005312:	2180      	movs	r1, #128	@ 0x80
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fa3f 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e04d      	b.n	80053c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2bff      	cmp	r3, #255	@ 0xff
 800532c:	d90e      	bls.n	800534c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	22ff      	movs	r2, #255	@ 0xff
 8005332:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005338:	b2da      	uxtb	r2, r3
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	2300      	movs	r3, #0
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fbe1 	bl	8005b0c <I2C_TransferConfig>
 800534a:	e00f      	b.n	800536c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535a:	b2da      	uxtb	r2, r3
 800535c:	8979      	ldrh	r1, [r7, #10]
 800535e:	2300      	movs	r3, #0
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fbd0 	bl	8005b0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d19e      	bne.n	80052b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 faa2 	bl	80058c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e01a      	b.n	80053c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2220      	movs	r2, #32
 8005390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6859      	ldr	r1, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <HAL_I2C_Mem_Write+0x224>)
 800539e:	400b      	ands	r3, r1
 80053a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e000      	b.n	80053c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
  }
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	fe00e800 	.word	0xfe00e800

080053cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	4608      	mov	r0, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	461a      	mov	r2, r3
 80053da:	4603      	mov	r3, r0
 80053dc:	817b      	strh	r3, [r7, #10]
 80053de:	460b      	mov	r3, r1
 80053e0:	813b      	strh	r3, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	f040 80fd 	bne.w	80055ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_I2C_Mem_Read+0x34>
 80053fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d105      	bne.n	800540c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005406:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0f1      	b.n	80055f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_I2C_Mem_Read+0x4e>
 8005416:	2302      	movs	r3, #2
 8005418:	e0ea      	b.n	80055f0 <HAL_I2C_Mem_Read+0x224>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005422:	f7fd fd93 	bl	8002f4c <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	2319      	movs	r3, #25
 800542e:	2201      	movs	r2, #1
 8005430:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f9af 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0d5      	b.n	80055f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2222      	movs	r2, #34	@ 0x22
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2240      	movs	r2, #64	@ 0x40
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800546c:	88f8      	ldrh	r0, [r7, #6]
 800546e:	893a      	ldrh	r2, [r7, #8]
 8005470:	8979      	ldrh	r1, [r7, #10]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	4603      	mov	r3, r0
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f913 	bl	80056a8 <I2C_RequestMemoryRead>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e0ad      	b.n	80055f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	2bff      	cmp	r3, #255	@ 0xff
 800549c:	d90e      	bls.n	80054bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	22ff      	movs	r2, #255	@ 0xff
 80054a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	8979      	ldrh	r1, [r7, #10]
 80054ac:	4b52      	ldr	r3, [pc, #328]	@ (80055f8 <HAL_I2C_Mem_Read+0x22c>)
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fb29 	bl	8005b0c <I2C_TransferConfig>
 80054ba:	e00f      	b.n	80054dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	8979      	ldrh	r1, [r7, #10]
 80054ce:	4b4a      	ldr	r3, [pc, #296]	@ (80055f8 <HAL_I2C_Mem_Read+0x22c>)
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fb18 	bl	8005b0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e2:	2200      	movs	r2, #0
 80054e4:	2104      	movs	r1, #4
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f956 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e07c      	b.n	80055f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d034      	beq.n	800559c <HAL_I2C_Mem_Read+0x1d0>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005536:	2b00      	cmp	r3, #0
 8005538:	d130      	bne.n	800559c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005540:	2200      	movs	r2, #0
 8005542:	2180      	movs	r1, #128	@ 0x80
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f927 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e04d      	b.n	80055f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2bff      	cmp	r3, #255	@ 0xff
 800555c:	d90e      	bls.n	800557c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	22ff      	movs	r2, #255	@ 0xff
 8005562:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005568:	b2da      	uxtb	r2, r3
 800556a:	8979      	ldrh	r1, [r7, #10]
 800556c:	2300      	movs	r3, #0
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 fac9 	bl	8005b0c <I2C_TransferConfig>
 800557a:	e00f      	b.n	800559c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558a:	b2da      	uxtb	r2, r3
 800558c:	8979      	ldrh	r1, [r7, #10]
 800558e:	2300      	movs	r3, #0
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 fab8 	bl	8005b0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d19a      	bne.n	80054dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f98a 	bl	80058c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e01a      	b.n	80055f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2220      	movs	r2, #32
 80055c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6859      	ldr	r1, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	4b0b      	ldr	r3, [pc, #44]	@ (80055fc <HAL_I2C_Mem_Read+0x230>)
 80055ce:	400b      	ands	r3, r1
 80055d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	80002400 	.word	0x80002400
 80055fc:	fe00e800 	.word	0xfe00e800

08005600 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	4608      	mov	r0, r1
 800560a:	4611      	mov	r1, r2
 800560c:	461a      	mov	r2, r3
 800560e:	4603      	mov	r3, r0
 8005610:	817b      	strh	r3, [r7, #10]
 8005612:	460b      	mov	r3, r1
 8005614:	813b      	strh	r3, [r7, #8]
 8005616:	4613      	mov	r3, r2
 8005618:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	8979      	ldrh	r1, [r7, #10]
 8005620:	4b20      	ldr	r3, [pc, #128]	@ (80056a4 <I2C_RequestMemoryWrite+0xa4>)
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fa6f 	bl	8005b0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	69b9      	ldr	r1, [r7, #24]
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 f8ff 	bl	8005836 <I2C_WaitOnTXISFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e02c      	b.n	800569c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d105      	bne.n	8005654 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005648:	893b      	ldrh	r3, [r7, #8]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	629a      	str	r2, [r3, #40]	@ 0x28
 8005652:	e015      	b.n	8005680 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005654:	893b      	ldrh	r3, [r7, #8]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	b29b      	uxth	r3, r3
 800565a:	b2da      	uxtb	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	69b9      	ldr	r1, [r7, #24]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f8e5 	bl	8005836 <I2C_WaitOnTXISFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e012      	b.n	800569c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005676:	893b      	ldrh	r3, [r7, #8]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2200      	movs	r2, #0
 8005688:	2180      	movs	r1, #128	@ 0x80
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f884 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	80002000 	.word	0x80002000

080056a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	4608      	mov	r0, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	817b      	strh	r3, [r7, #10]
 80056ba:	460b      	mov	r3, r1
 80056bc:	813b      	strh	r3, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	8979      	ldrh	r1, [r7, #10]
 80056c8:	4b20      	ldr	r3, [pc, #128]	@ (800574c <I2C_RequestMemoryRead+0xa4>)
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2300      	movs	r3, #0
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fa1c 	bl	8005b0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	69b9      	ldr	r1, [r7, #24]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f8ac 	bl	8005836 <I2C_WaitOnTXISFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e02c      	b.n	8005742 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d105      	bne.n	80056fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056ee:	893b      	ldrh	r3, [r7, #8]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80056f8:	e015      	b.n	8005726 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056fa:	893b      	ldrh	r3, [r7, #8]
 80056fc:	0a1b      	lsrs	r3, r3, #8
 80056fe:	b29b      	uxth	r3, r3
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	69b9      	ldr	r1, [r7, #24]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f892 	bl	8005836 <I2C_WaitOnTXISFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e012      	b.n	8005742 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800571c:	893b      	ldrh	r3, [r7, #8]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2200      	movs	r2, #0
 800572e:	2140      	movs	r1, #64	@ 0x40
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f831 	bl	8005798 <I2C_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	80002000 	.word	0x80002000

08005750 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b02      	cmp	r3, #2
 8005764:	d103      	bne.n	800576e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d007      	beq.n	800578c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	619a      	str	r2, [r3, #24]
  }
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	4613      	mov	r3, r2
 80057a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057a8:	e031      	b.n	800580e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d02d      	beq.n	800580e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b2:	f7fd fbcb 	bl	8002f4c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d122      	bne.n	800580e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4013      	ands	r3, r2
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	bf0c      	ite	eq
 80057d8:	2301      	moveq	r3, #1
 80057da:	2300      	movne	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d113      	bne.n	800580e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	f043 0220 	orr.w	r2, r3, #32
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e00f      	b.n	800582e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4013      	ands	r3, r2
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	429a      	cmp	r2, r3
 800581c:	bf0c      	ite	eq
 800581e:	2301      	moveq	r3, #1
 8005820:	2300      	movne	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	429a      	cmp	r2, r3
 800582a:	d0be      	beq.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005842:	e033      	b.n	80058ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f87f 	bl	800594c <I2C_IsErrorOccurred>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e031      	b.n	80058bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d025      	beq.n	80058ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005860:	f7fd fb74 	bl	8002f4c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	d302      	bcc.n	8005876 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d11a      	bne.n	80058ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d013      	beq.n	80058ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e007      	b.n	80058bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d1c4      	bne.n	8005844 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058d0:	e02f      	b.n	8005932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f838 	bl	800594c <I2C_IsErrorOccurred>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e02d      	b.n	8005942 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e6:	f7fd fb31 	bl	8002f4c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d302      	bcc.n	80058fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11a      	bne.n	8005932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b20      	cmp	r3, #32
 8005908:	d013      	beq.n	8005932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590e:	f043 0220 	orr.w	r2, r3, #32
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e007      	b.n	8005942 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b20      	cmp	r3, #32
 800593e:	d1c8      	bne.n	80058d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	@ 0x28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b00      	cmp	r3, #0
 8005976:	d068      	beq.n	8005a4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2210      	movs	r2, #16
 800597e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005980:	e049      	b.n	8005a16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005988:	d045      	beq.n	8005a16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800598a:	f7fd fadf 	bl	8002f4c <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	d302      	bcc.n	80059a0 <I2C_IsErrorOccurred+0x54>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d13a      	bne.n	8005a16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c2:	d121      	bne.n	8005a08 <I2C_IsErrorOccurred+0xbc>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059ca:	d01d      	beq.n	8005a08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d01a      	beq.n	8005a08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80059e2:	f7fd fab3 	bl	8002f4c <HAL_GetTick>
 80059e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059e8:	e00e      	b.n	8005a08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80059ea:	f7fd faaf 	bl	8002f4c <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b19      	cmp	r3, #25
 80059f6:	d907      	bls.n	8005a08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	f043 0320 	orr.w	r3, r3, #32
 80059fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005a06:	e006      	b.n	8005a16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d1e9      	bne.n	80059ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d003      	beq.n	8005a2c <I2C_IsErrorOccurred+0xe0>
 8005a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0aa      	beq.n	8005982 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d103      	bne.n	8005a3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	f043 0304 	orr.w	r3, r3, #4
 8005a42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	f043 0308 	orr.w	r3, r3, #8
 8005a84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ab0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01c      	beq.n	8005afa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff fe45 	bl	8005750 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8005b08 <I2C_IsErrorOccurred+0x1bc>)
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005afa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3728      	adds	r7, #40	@ 0x28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	fe00e800 	.word	0xfe00e800

08005b0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	817b      	strh	r3, [r7, #10]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b1e:	897b      	ldrh	r3, [r7, #10]
 8005b20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b24:	7a7b      	ldrb	r3, [r7, #9]
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	0d5b      	lsrs	r3, r3, #21
 8005b46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005b4a:	4b08      	ldr	r3, [pc, #32]	@ (8005b6c <I2C_TransferConfig+0x60>)
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	ea02 0103 	and.w	r1, r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	03ff63ff 	.word	0x03ff63ff

08005b70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d138      	bne.n	8005bf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e032      	b.n	8005bfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2224      	movs	r2, #36	@ 0x24
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6819      	ldr	r1, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d139      	bne.n	8005c90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e033      	b.n	8005c92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2224      	movs	r2, #36	@ 0x24
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e000      	b.n	8005c92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01e      	beq.n	8005cf0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005cb2:	4b13      	ldr	r3, [pc, #76]	@ (8005d00 <HAL_IPCC_Init+0x60>)
 8005cb4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d102      	bne.n	8005cc8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc ff06 	bl	8002ad4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005cc8:	68b8      	ldr	r0, [r7, #8]
 8005cca:	f000 f85b 	bl	8005d84 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f82c 	bl	8005d38 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005cee:	e001      	b.n	8005cf4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	58000c00 	.word	0x58000c00

08005d04 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	e00f      	b.n	8005d66 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8005d7c <IPCC_SetDefaultCallbacks+0x44>)
 8005d50:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3306      	adds	r3, #6
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	4a08      	ldr	r2, [pc, #32]	@ (8005d80 <IPCC_SetDefaultCallbacks+0x48>)
 8005d5e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b05      	cmp	r3, #5
 8005d6a:	d9ec      	bls.n	8005d46 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	08005d05 	.word	0x08005d05
 8005d80:	08005d1f 	.word	0x08005d1f

08005d84 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005d98:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	223f      	movs	r2, #63	@ 0x3f
 8005d9e:	609a      	str	r2, [r3, #8]
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e041      	b.n	8005e42 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f245 5255 	movw	r2, #21845	@ 0x5555
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6852      	ldr	r2, [r2, #4]
 8005dda:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6892      	ldr	r2, [r2, #8]
 8005de4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005de6:	f7fd f8b1 	bl	8002f4c <HAL_GetTick>
 8005dea:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005dec:	e00f      	b.n	8005e0e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005dee:	f7fd f8ad 	bl	8002f4c <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b31      	cmp	r3, #49	@ 0x31
 8005dfa:	d908      	bls.n	8005e0e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e019      	b.n	8005e42 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e8      	bne.n	8005dee <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d005      	beq.n	8005e36 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68d2      	ldr	r2, [r2, #12]
 8005e32:	611a      	str	r2, [r3, #16]
 8005e34:	e004      	b.n	8005e40 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e70:	4b05      	ldr	r3, [pc, #20]	@ (8005e88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a04      	ldr	r2, [pc, #16]	@ (8005e88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e7a:	6013      	str	r3, [r2, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	58000400 	.word	0x58000400

08005e8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005e90:	4b04      	ldr	r3, [pc, #16]	@ (8005ea4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	58000400 	.word	0x58000400

08005ea8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eba:	d101      	bne.n	8005ec0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <LL_RCC_HSE_Enable>:
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ede:	6013      	str	r3, [r2, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <LL_RCC_HSE_Disable>:
{
 8005eea:	b480      	push	{r7}
 8005eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005efc:	6013      	str	r3, [r2, #0]
}
 8005efe:	bf00      	nop
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <LL_RCC_HSE_IsReady>:
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f1a:	d101      	bne.n	8005f20 <LL_RCC_HSE_IsReady+0x18>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <LL_RCC_HSE_IsReady+0x1a>
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <LL_RCC_HSI_Enable>:
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f3e:	6013      	str	r3, [r2, #0]
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <LL_RCC_HSI_Disable>:
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f5c:	6013      	str	r3, [r2, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <LL_RCC_HSI_IsReady>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f7a:	d101      	bne.n	8005f80 <LL_RCC_HSI_IsReady+0x18>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <LL_RCC_HSI_IsReady+0x1a>
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <LL_RCC_HSI_SetCalibTrimming>:
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	604b      	str	r3, [r1, #4]
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <LL_RCC_HSI48_Enable>:
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005fce:	bf00      	nop
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <LL_RCC_HSI48_Disable>:
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fe4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <LL_RCC_HSI48_IsReady>:
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d101      	bne.n	8006012 <LL_RCC_HSI48_IsReady+0x18>
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <LL_RCC_HSI48_IsReady+0x1a>
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <LL_RCC_LSE_Enable>:
{
 800601e:	b480      	push	{r7}
 8006020:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006036:	bf00      	nop
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <LL_RCC_LSE_Disable>:
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800604c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <LL_RCC_LSE_EnableBypass>:
{
 8006062:	b480      	push	{r7}
 8006064:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006072:	f043 0304 	orr.w	r3, r3, #4
 8006076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800607a:	bf00      	nop
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <LL_RCC_LSE_DisableBypass>:
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006090:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006094:	f023 0304 	bic.w	r3, r3, #4
 8006098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <LL_RCC_LSE_IsReady>:
{
 80060a6:	b480      	push	{r7}
 80060a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d101      	bne.n	80060be <LL_RCC_LSE_IsReady+0x18>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <LL_RCC_LSE_IsReady+0x1a>
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <LL_RCC_LSI1_Enable>:
{
 80060ca:	b480      	push	{r7}
 80060cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80060ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80060e2:	bf00      	nop
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <LL_RCC_LSI1_Disable>:
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80060f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006104:	bf00      	nop
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <LL_RCC_LSI1_IsReady>:
{
 800610e:	b480      	push	{r7}
 8006110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b02      	cmp	r3, #2
 8006120:	d101      	bne.n	8006126 <LL_RCC_LSI1_IsReady+0x18>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <LL_RCC_LSI1_IsReady+0x1a>
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <LL_RCC_LSI2_Enable>:
{
 8006132:	b480      	push	{r7}
 8006134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800613a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800613e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006142:	f043 0304 	orr.w	r3, r3, #4
 8006146:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800614a:	bf00      	nop
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <LL_RCC_LSI2_Disable>:
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800615c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006160:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006164:	f023 0304 	bic.w	r3, r3, #4
 8006168:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800616c:	bf00      	nop
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <LL_RCC_LSI2_IsReady>:
{
 8006176:	b480      	push	{r7}
 8006178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800617a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800617e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b08      	cmp	r3, #8
 8006188:	d101      	bne.n	800618e <LL_RCC_LSI2_IsReady+0x18>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <LL_RCC_LSI2_IsReady+0x1a>
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <LL_RCC_LSI2_SetTrimming>:
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80061a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <LL_RCC_MSI_Enable>:
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80061cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <LL_RCC_MSI_Disable>:
{
 80061e6:	b480      	push	{r7}
 80061e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80061ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	6013      	str	r3, [r2, #0]
}
 80061fa:	bf00      	nop
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <LL_RCC_MSI_IsReady>:
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b02      	cmp	r3, #2
 8006214:	d101      	bne.n	800621a <LL_RCC_MSI_IsReady+0x16>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <LL_RCC_MSI_IsReady+0x18>
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <LL_RCC_MSI_SetRange>:
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006238:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <LL_RCC_MSI_GetRange>:
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800625e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2bb0      	cmp	r3, #176	@ 0xb0
 8006264:	d901      	bls.n	800626a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006266:	23b0      	movs	r3, #176	@ 0xb0
 8006268:	607b      	str	r3, [r7, #4]
  return msiRange;
 800626a:	687b      	ldr	r3, [r7, #4]
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006292:	4313      	orrs	r3, r2
 8006294:	604b      	str	r3, [r1, #4]
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <LL_RCC_SetSysClkSource>:
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80062aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f023 0203 	bic.w	r2, r3, #3
 80062b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	608b      	str	r3, [r1, #8]
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <LL_RCC_GetSysClkSource>:
{
 80062ca:	b480      	push	{r7}
 80062cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80062ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 030c 	and.w	r3, r3, #12
}
 80062d8:	4618      	mov	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <LL_RCC_SetAHBPrescaler>:
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80062ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <LL_C2_RCC_SetAHBPrescaler>:
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006316:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800631a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800631e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <LL_RCC_SetAHB4Prescaler>:
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800633e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006342:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006346:	f023 020f 	bic.w	r2, r3, #15
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <LL_RCC_SetAPB1Prescaler>:
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800636c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006376:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4313      	orrs	r3, r2
 800637e:	608b      	str	r3, [r1, #8]
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <LL_RCC_SetAPB2Prescaler>:
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800639e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	608b      	str	r3, [r1, #8]
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <LL_RCC_GetAHBPrescaler>:
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80063b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <LL_RCC_GetAHB4Prescaler>:
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80063ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063fa:	6013      	str	r3, [r2, #0]
}
 80063fc:	bf00      	nop
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006406:	b480      	push	{r7}
 8006408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800640a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006414:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006418:	6013      	str	r3, [r2, #0]
}
 800641a:	bf00      	nop
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006436:	d101      	bne.n	800643c <LL_RCC_PLL_IsReady+0x18>
 8006438:	2301      	movs	r3, #1
 800643a:	e000      	b.n	800643e <LL_RCC_PLL_IsReady+0x1a>
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800644c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006458:	4618      	mov	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006462:	b480      	push	{r7}
 8006464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800647a:	b480      	push	{r7}
 800647c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800647e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006488:	4618      	mov	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006492:	b480      	push	{r7}
 8006494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0303 	and.w	r3, r3, #3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80064aa:	b480      	push	{r7}
 80064ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80064ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064bc:	d101      	bne.n	80064c2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80064ce:	b480      	push	{r7}
 80064d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80064d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80064da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064e2:	d101      	bne.n	80064e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80064f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006508:	d101      	bne.n	800650e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800651a:	b480      	push	{r7}
 800651c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800651e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800652c:	d101      	bne.n	8006532 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800653e:	b480      	push	{r7}
 8006540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800654c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006550:	d101      	bne.n	8006556 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006564:	b590      	push	{r4, r7, lr}
 8006566:	b08d      	sub	sp, #52	@ 0x34
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e363      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 808d 	beq.w	800669e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006584:	f7ff fea1 	bl	80062ca <LL_RCC_GetSysClkSource>
 8006588:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800658a:	f7ff ff82 	bl	8006492 <LL_RCC_PLL_GetMainSource>
 800658e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <HAL_RCC_OscConfig+0x3e>
 8006596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006598:	2b0c      	cmp	r3, #12
 800659a:	d147      	bne.n	800662c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d144      	bne.n	800662c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e347      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80065b2:	f7ff fe4c 	bl	800624e <LL_RCC_MSI_GetRange>
 80065b6:	4603      	mov	r3, r0
 80065b8:	429c      	cmp	r4, r3
 80065ba:	d914      	bls.n	80065e6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fd03 	bl	8006fcc <RCC_SetFlashLatencyFromMSIRange>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e336      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fe26 	bl	8006226 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fe4a 	bl	8006278 <LL_RCC_MSI_SetCalibTrimming>
 80065e4:	e013      	b.n	800660e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fe1b 	bl	8006226 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fe3f 	bl	8006278 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fce4 	bl	8006fcc <RCC_SetFlashLatencyFromMSIRange>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e317      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800660e:	f000 fcc9 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 8006612:	4603      	mov	r3, r0
 8006614:	4aa4      	ldr	r2, [pc, #656]	@ (80068a8 <HAL_RCC_OscConfig+0x344>)
 8006616:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006618:	4ba4      	ldr	r3, [pc, #656]	@ (80068ac <HAL_RCC_OscConfig+0x348>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f7fc fc47 	bl	8002eb0 <HAL_InitTick>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d039      	beq.n	800669c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e308      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01e      	beq.n	8006672 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006634:	f7ff fdc8 	bl	80061c8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006638:	f7fc fc88 	bl	8002f4c <HAL_GetTick>
 800663c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006640:	f7fc fc84 	bl	8002f4c <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e2f5      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006652:	f7ff fdd7 	bl	8006204 <LL_RCC_MSI_IsReady>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f1      	beq.n	8006640 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fde0 	bl	8006226 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fe04 	bl	8006278 <LL_RCC_MSI_SetCalibTrimming>
 8006670:	e015      	b.n	800669e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006672:	f7ff fdb8 	bl	80061e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006676:	f7fc fc69 	bl	8002f4c <HAL_GetTick>
 800667a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800667e:	f7fc fc65 	bl	8002f4c <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e2d6      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006690:	f7ff fdb8 	bl	8006204 <LL_RCC_MSI_IsReady>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f1      	bne.n	800667e <HAL_RCC_OscConfig+0x11a>
 800669a:	e000      	b.n	800669e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800669c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d047      	beq.n	800673a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066aa:	f7ff fe0e 	bl	80062ca <LL_RCC_GetSysClkSource>
 80066ae:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066b0:	f7ff feef 	bl	8006492 <LL_RCC_PLL_GetMainSource>
 80066b4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d005      	beq.n	80066c8 <HAL_RCC_OscConfig+0x164>
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	2b0c      	cmp	r3, #12
 80066c0:	d108      	bne.n	80066d4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d105      	bne.n	80066d4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d134      	bne.n	800673a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e2b4      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066dc:	d102      	bne.n	80066e4 <HAL_RCC_OscConfig+0x180>
 80066de:	f7ff fbf5 	bl	8005ecc <LL_RCC_HSE_Enable>
 80066e2:	e001      	b.n	80066e8 <HAL_RCC_OscConfig+0x184>
 80066e4:	f7ff fc01 	bl	8005eea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d012      	beq.n	8006716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f0:	f7fc fc2c 	bl	8002f4c <HAL_GetTick>
 80066f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80066f6:	e008      	b.n	800670a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066f8:	f7fc fc28 	bl	8002f4c <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b64      	cmp	r3, #100	@ 0x64
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e299      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800670a:	f7ff fbfd 	bl	8005f08 <LL_RCC_HSE_IsReady>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f1      	beq.n	80066f8 <HAL_RCC_OscConfig+0x194>
 8006714:	e011      	b.n	800673a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006716:	f7fc fc19 	bl	8002f4c <HAL_GetTick>
 800671a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800671e:	f7fc fc15 	bl	8002f4c <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b64      	cmp	r3, #100	@ 0x64
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e286      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006730:	f7ff fbea 	bl	8005f08 <LL_RCC_HSE_IsReady>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f1      	bne.n	800671e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d04c      	beq.n	80067e0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006746:	f7ff fdc0 	bl	80062ca <LL_RCC_GetSysClkSource>
 800674a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800674c:	f7ff fea1 	bl	8006492 <LL_RCC_PLL_GetMainSource>
 8006750:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d005      	beq.n	8006764 <HAL_RCC_OscConfig+0x200>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b0c      	cmp	r3, #12
 800675c:	d10e      	bne.n	800677c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d10b      	bne.n	800677c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e266      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff fc09 	bl	8005f8c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800677a:	e031      	b.n	80067e0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d019      	beq.n	80067b8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006784:	f7ff fbd2 	bl	8005f2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006788:	f7fc fbe0 	bl	8002f4c <HAL_GetTick>
 800678c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006790:	f7fc fbdc 	bl	8002f4c <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e24d      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80067a2:	f7ff fbe1 	bl	8005f68 <LL_RCC_HSI_IsReady>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f1      	beq.n	8006790 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fbeb 	bl	8005f8c <LL_RCC_HSI_SetCalibTrimming>
 80067b6:	e013      	b.n	80067e0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067b8:	f7ff fbc7 	bl	8005f4a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067bc:	f7fc fbc6 	bl	8002f4c <HAL_GetTick>
 80067c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c4:	f7fc fbc2 	bl	8002f4c <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e233      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80067d6:	f7ff fbc7 	bl	8005f68 <LL_RCC_HSI_IsReady>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f1      	bne.n	80067c4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80a3 	beq.w	8006940 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d076      	beq.n	80068f0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b00      	cmp	r3, #0
 800680c:	d046      	beq.n	800689c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800680e:	f7ff fc7e 	bl	800610e <LL_RCC_LSI1_IsReady>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d113      	bne.n	8006840 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006818:	f7ff fc57 	bl	80060ca <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800681c:	f7fc fb96 	bl	8002f4c <HAL_GetTick>
 8006820:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006824:	f7fc fb92 	bl	8002f4c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e203      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006836:	f7ff fc6a 	bl	800610e <LL_RCC_LSI1_IsReady>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0f1      	beq.n	8006824 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006840:	f7ff fc77 	bl	8006132 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fc fb82 	bl	8002f4c <HAL_GetTick>
 8006848:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800684c:	f7fc fb7e 	bl	8002f4c <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e1ef      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800685e:	f7ff fc8a 	bl	8006176 <LL_RCC_LSI2_IsReady>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f1      	beq.n	800684c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fc94 	bl	800619a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006872:	f7ff fc3b 	bl	80060ec <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006876:	f7fc fb69 	bl	8002f4c <HAL_GetTick>
 800687a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800687c:	e008      	b.n	8006890 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800687e:	f7fc fb65 	bl	8002f4c <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e1d6      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006890:	f7ff fc3d 	bl	800610e <LL_RCC_LSI1_IsReady>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f1      	bne.n	800687e <HAL_RCC_OscConfig+0x31a>
 800689a:	e051      	b.n	8006940 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800689c:	f7ff fc15 	bl	80060ca <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7fc fb54 	bl	8002f4c <HAL_GetTick>
 80068a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80068a6:	e00c      	b.n	80068c2 <HAL_RCC_OscConfig+0x35e>
 80068a8:	20000004 	.word	0x20000004
 80068ac:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068b0:	f7fc fb4c 	bl	8002f4c <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e1bd      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80068c2:	f7ff fc24 	bl	800610e <LL_RCC_LSI1_IsReady>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0f1      	beq.n	80068b0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80068cc:	f7ff fc42 	bl	8006154 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80068d2:	f7fc fb3b 	bl	8002f4c <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e1ac      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80068e4:	f7ff fc47 	bl	8006176 <LL_RCC_LSI2_IsReady>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f1      	bne.n	80068d2 <HAL_RCC_OscConfig+0x36e>
 80068ee:	e027      	b.n	8006940 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80068f0:	f7ff fc30 	bl	8006154 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f4:	f7fc fb2a 	bl	8002f4c <HAL_GetTick>
 80068f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80068fc:	f7fc fb26 	bl	8002f4c <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b03      	cmp	r3, #3
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e197      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800690e:	f7ff fc32 	bl	8006176 <LL_RCC_LSI2_IsReady>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f1      	bne.n	80068fc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006918:	f7ff fbe8 	bl	80060ec <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691c:	f7fc fb16 	bl	8002f4c <HAL_GetTick>
 8006920:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006924:	f7fc fb12 	bl	8002f4c <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e183      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006936:	f7ff fbea 	bl	800610e <LL_RCC_LSI1_IsReady>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1f1      	bne.n	8006924 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d05b      	beq.n	8006a04 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800694c:	4ba7      	ldr	r3, [pc, #668]	@ (8006bec <HAL_RCC_OscConfig+0x688>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006954:	2b00      	cmp	r3, #0
 8006956:	d114      	bne.n	8006982 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006958:	f7ff fa88 	bl	8005e6c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800695c:	f7fc faf6 	bl	8002f4c <HAL_GetTick>
 8006960:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006962:	e008      	b.n	8006976 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006964:	f7fc faf2 	bl	8002f4c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e163      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006976:	4b9d      	ldr	r3, [pc, #628]	@ (8006bec <HAL_RCC_OscConfig+0x688>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0f0      	beq.n	8006964 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d102      	bne.n	8006990 <HAL_RCC_OscConfig+0x42c>
 800698a:	f7ff fb48 	bl	800601e <LL_RCC_LSE_Enable>
 800698e:	e00c      	b.n	80069aa <HAL_RCC_OscConfig+0x446>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b05      	cmp	r3, #5
 8006996:	d104      	bne.n	80069a2 <HAL_RCC_OscConfig+0x43e>
 8006998:	f7ff fb63 	bl	8006062 <LL_RCC_LSE_EnableBypass>
 800699c:	f7ff fb3f 	bl	800601e <LL_RCC_LSE_Enable>
 80069a0:	e003      	b.n	80069aa <HAL_RCC_OscConfig+0x446>
 80069a2:	f7ff fb4d 	bl	8006040 <LL_RCC_LSE_Disable>
 80069a6:	f7ff fb6d 	bl	8006084 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d014      	beq.n	80069dc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fc facb 	bl	8002f4c <HAL_GetTick>
 80069b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80069b8:	e00a      	b.n	80069d0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ba:	f7fc fac7 	bl	8002f4c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e136      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80069d0:	f7ff fb69 	bl	80060a6 <LL_RCC_LSE_IsReady>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0ef      	beq.n	80069ba <HAL_RCC_OscConfig+0x456>
 80069da:	e013      	b.n	8006a04 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069dc:	f7fc fab6 	bl	8002f4c <HAL_GetTick>
 80069e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80069e2:	e00a      	b.n	80069fa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e4:	f7fc fab2 	bl	8002f4c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e121      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80069fa:	f7ff fb54 	bl	80060a6 <LL_RCC_LSE_IsReady>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1ef      	bne.n	80069e4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d02c      	beq.n	8006a6a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d014      	beq.n	8006a42 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a18:	f7ff facd 	bl	8005fb6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1c:	f7fc fa96 	bl	8002f4c <HAL_GetTick>
 8006a20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a24:	f7fc fa92 	bl	8002f4c <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e103      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a36:	f7ff fae0 	bl	8005ffa <LL_RCC_HSI48_IsReady>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0f1      	beq.n	8006a24 <HAL_RCC_OscConfig+0x4c0>
 8006a40:	e013      	b.n	8006a6a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a42:	f7ff fac9 	bl	8005fd8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a46:	f7fc fa81 	bl	8002f4c <HAL_GetTick>
 8006a4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a4e:	f7fc fa7d 	bl	8002f4c <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e0ee      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006a60:	f7ff facb 	bl	8005ffa <LL_RCC_HSI48_IsReady>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f1      	bne.n	8006a4e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80e4 	beq.w	8006c3c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a74:	f7ff fc29 	bl	80062ca <LL_RCC_GetSysClkSource>
 8006a78:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	f040 80b4 	bne.w	8006bf4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f003 0203 	and.w	r2, r3, #3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d123      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d11c      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	0a1b      	lsrs	r3, r3, #8
 8006aac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d114      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d10d      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d106      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d05d      	beq.n	8006b9e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b0c      	cmp	r3, #12
 8006ae6:	d058      	beq.n	8006b9a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e0a1      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006afa:	f7ff fc84 	bl	8006406 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006afe:	f7fc fa25 	bl	8002f4c <HAL_GetTick>
 8006b02:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b06:	f7fc fa21 	bl	8002f4c <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e092      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1ef      	bne.n	8006b06 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	4b30      	ldr	r3, [pc, #192]	@ (8006bf0 <HAL_RCC_OscConfig+0x68c>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b38:	4311      	orrs	r1, r2
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b3e:	0212      	lsls	r2, r2, #8
 8006b40:	4311      	orrs	r1, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b46:	4311      	orrs	r1, r2
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b4c:	4311      	orrs	r1, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006b52:	430a      	orrs	r2, r1
 8006b54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b5c:	f7ff fc44 	bl	80063e8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b70:	f7fc f9ec 	bl	8002f4c <HAL_GetTick>
 8006b74:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b78:	f7fc f9e8 	bl	8002f4c <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e059      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0ef      	beq.n	8006b78 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b98:	e050      	b.n	8006c3c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e04f      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d147      	bne.n	8006c3c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006bac:	f7ff fc1c 	bl	80063e8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bc0:	f7fc f9c4 	bl	8002f4c <HAL_GetTick>
 8006bc4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc8:	f7fc f9c0 	bl	8002f4c <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e031      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0ef      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x664>
 8006be8:	e028      	b.n	8006c3c <HAL_RCC_OscConfig+0x6d8>
 8006bea:	bf00      	nop
 8006bec:	58000400 	.word	0x58000400
 8006bf0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b0c      	cmp	r3, #12
 8006bf8:	d01e      	beq.n	8006c38 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfa:	f7ff fc04 	bl	8006406 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfe:	f7fc f9a5 	bl	8002f4c <HAL_GetTick>
 8006c02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c06:	f7fc f9a1 	bl	8002f4c <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e012      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1ef      	bne.n	8006c06 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c30:	4b05      	ldr	r3, [pc, #20]	@ (8006c48 <HAL_RCC_OscConfig+0x6e4>)
 8006c32:	4013      	ands	r3, r2
 8006c34:	60cb      	str	r3, [r1, #12]
 8006c36:	e001      	b.n	8006c3c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3734      	adds	r7, #52	@ 0x34
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd90      	pop	{r4, r7, pc}
 8006c46:	bf00      	nop
 8006c48:	eefefffc 	.word	0xeefefffc

08006c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e12d      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c60:	4b98      	ldr	r3, [pc, #608]	@ (8006ec4 <HAL_RCC_ClockConfig+0x278>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d91b      	bls.n	8006ca6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6e:	4b95      	ldr	r3, [pc, #596]	@ (8006ec4 <HAL_RCC_ClockConfig+0x278>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 0207 	bic.w	r2, r3, #7
 8006c76:	4993      	ldr	r1, [pc, #588]	@ (8006ec4 <HAL_RCC_ClockConfig+0x278>)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c7e:	f7fc f965 	bl	8002f4c <HAL_GetTick>
 8006c82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c86:	f7fc f961 	bl	8002f4c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e111      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c98:	4b8a      	ldr	r3, [pc, #552]	@ (8006ec4 <HAL_RCC_ClockConfig+0x278>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d1ef      	bne.n	8006c86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d016      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fb13 	bl	80062e2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cbc:	f7fc f946 	bl	8002f4c <HAL_GetTick>
 8006cc0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cc4:	f7fc f942 	bl	8002f4c <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e0f2      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006cd6:	f7ff fbe8 	bl	80064aa <LL_RCC_IsActiveFlag_HPRE>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0f1      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d016      	beq.n	8006d1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fb0a 	bl	800630a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cf6:	f7fc f929 	bl	8002f4c <HAL_GetTick>
 8006cfa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cfe:	f7fc f925 	bl	8002f4c <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e0d5      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d10:	f7ff fbdd 	bl	80064ce <LL_RCC_IsActiveFlag_C2HPRE>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f1      	beq.n	8006cfe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d016      	beq.n	8006d54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff fb03 	bl	8006336 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d30:	f7fc f90c 	bl	8002f4c <HAL_GetTick>
 8006d34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d38:	f7fc f908 	bl	8002f4c <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e0b8      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d4a:	f7ff fbd3 	bl	80064f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0f1      	beq.n	8006d38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d016      	beq.n	8006d8e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fafd 	bl	8006364 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d6a:	f7fc f8ef 	bl	8002f4c <HAL_GetTick>
 8006d6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d72:	f7fc f8eb 	bl	8002f4c <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e09b      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006d84:	f7ff fbc9 	bl	800651a <LL_RCC_IsActiveFlag_PPRE1>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f1      	beq.n	8006d72 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d017      	beq.n	8006dca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff faf3 	bl	800638c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006da6:	f7fc f8d1 	bl	8002f4c <HAL_GetTick>
 8006daa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006dae:	f7fc f8cd 	bl	8002f4c <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e07d      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006dc0:	f7ff fbbd 	bl	800653e <LL_RCC_IsActiveFlag_PPRE2>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f1      	beq.n	8006dae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d043      	beq.n	8006e5e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d106      	bne.n	8006dec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006dde:	f7ff f893 	bl	8005f08 <LL_RCC_HSE_IsReady>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11e      	bne.n	8006e26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e067      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d106      	bne.n	8006e02 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006df4:	f7ff fb16 	bl	8006424 <LL_RCC_PLL_IsReady>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d113      	bne.n	8006e26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e05c      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006e0a:	f7ff f9fb 	bl	8006204 <LL_RCC_MSI_IsReady>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e051      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006e18:	f7ff f8a6 	bl	8005f68 <LL_RCC_HSI_IsReady>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e04a      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fa39 	bl	80062a2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e30:	f7fc f88c 	bl	8002f4c <HAL_GetTick>
 8006e34:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e36:	e00a      	b.n	8006e4e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e38:	f7fc f888 	bl	8002f4c <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e036      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4e:	f7ff fa3c 	bl	80062ca <LL_RCC_GetSysClkSource>
 8006e52:	4602      	mov	r2, r0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d1ec      	bne.n	8006e38 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e5e:	4b19      	ldr	r3, [pc, #100]	@ (8006ec4 <HAL_RCC_ClockConfig+0x278>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d21b      	bcs.n	8006ea4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6c:	4b15      	ldr	r3, [pc, #84]	@ (8006ec4 <HAL_RCC_ClockConfig+0x278>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f023 0207 	bic.w	r2, r3, #7
 8006e74:	4913      	ldr	r1, [pc, #76]	@ (8006ec4 <HAL_RCC_ClockConfig+0x278>)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7c:	f7fc f866 	bl	8002f4c <HAL_GetTick>
 8006e80:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e84:	f7fc f862 	bl	8002f4c <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e012      	b.n	8006ebc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e96:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec4 <HAL_RCC_ClockConfig+0x278>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d1ef      	bne.n	8006e84 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006ea4:	f000 f87e 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	4a07      	ldr	r2, [pc, #28]	@ (8006ec8 <HAL_RCC_ClockConfig+0x27c>)
 8006eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006eae:	f7fc f859 	bl	8002f64 <HAL_GetTickPrio>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fb fffb 	bl	8002eb0 <HAL_InitTick>
 8006eba:	4603      	mov	r3, r0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	58004000 	.word	0x58004000
 8006ec8:	20000004 	.word	0x20000004

08006ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ecc:	b590      	push	{r4, r7, lr}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ed2:	f7ff f9fa 	bl	80062ca <LL_RCC_GetSysClkSource>
 8006ed6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006ede:	f7ff f9b6 	bl	800624e <LL_RCC_MSI_GetRange>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	091b      	lsrs	r3, r3, #4
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	4a2b      	ldr	r2, [pc, #172]	@ (8006f98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	e04b      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d102      	bne.n	8006f00 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006efa:	4b28      	ldr	r3, [pc, #160]	@ (8006f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e045      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d10a      	bne.n	8006f1c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f06:	f7fe ffcf 	bl	8005ea8 <LL_RCC_HSE_IsEnabledDiv2>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d102      	bne.n	8006f16 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006f10:	4b22      	ldr	r3, [pc, #136]	@ (8006f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e03a      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006f16:	4b22      	ldr	r3, [pc, #136]	@ (8006fa0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	e037      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006f1c:	f7ff fab9 	bl	8006492 <LL_RCC_PLL_GetMainSource>
 8006f20:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d003      	beq.n	8006f30 <HAL_RCC_GetSysClockFreq+0x64>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d003      	beq.n	8006f36 <HAL_RCC_GetSysClockFreq+0x6a>
 8006f2e:	e00d      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006f30:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f32:	60bb      	str	r3, [r7, #8]
        break;
 8006f34:	e015      	b.n	8006f62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f36:	f7fe ffb7 	bl	8005ea8 <LL_RCC_HSE_IsEnabledDiv2>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d102      	bne.n	8006f46 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006f40:	4b16      	ldr	r3, [pc, #88]	@ (8006f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f42:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006f44:	e00d      	b.n	8006f62 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006f46:	4b16      	ldr	r3, [pc, #88]	@ (8006fa0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006f48:	60bb      	str	r3, [r7, #8]
        break;
 8006f4a:	e00a      	b.n	8006f62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f4c:	f7ff f97f 	bl	800624e <LL_RCC_MSI_GetRange>
 8006f50:	4603      	mov	r3, r0
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	4a0f      	ldr	r2, [pc, #60]	@ (8006f98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f5e:	60bb      	str	r3, [r7, #8]
        break;
 8006f60:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006f62:	f7ff fa71 	bl	8006448 <LL_RCC_PLL_GetN>
 8006f66:	4602      	mov	r2, r0
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	fb03 f402 	mul.w	r4, r3, r2
 8006f6e:	f7ff fa84 	bl	800647a <LL_RCC_PLL_GetDivider>
 8006f72:	4603      	mov	r3, r0
 8006f74:	091b      	lsrs	r3, r3, #4
 8006f76:	3301      	adds	r3, #1
 8006f78:	fbb4 f4f3 	udiv	r4, r4, r3
 8006f7c:	f7ff fa71 	bl	8006462 <LL_RCC_PLL_GetR>
 8006f80:	4603      	mov	r3, r0
 8006f82:	0f5b      	lsrs	r3, r3, #29
 8006f84:	3301      	adds	r3, #1
 8006f86:	fbb4 f3f3 	udiv	r3, r4, r3
 8006f8a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd90      	pop	{r4, r7, pc}
 8006f96:	bf00      	nop
 8006f98:	0801235c 	.word	0x0801235c
 8006f9c:	00f42400 	.word	0x00f42400
 8006fa0:	01e84800 	.word	0x01e84800

08006fa4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fa4:	b598      	push	{r3, r4, r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006fa8:	f7ff ff90 	bl	8006ecc <HAL_RCC_GetSysClockFreq>
 8006fac:	4604      	mov	r4, r0
 8006fae:	f7ff fa01 	bl	80063b4 <LL_RCC_GetAHBPrescaler>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	4a03      	ldr	r2, [pc, #12]	@ (8006fc8 <HAL_RCC_GetHCLKFreq+0x24>)
 8006fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	bd98      	pop	{r3, r4, r7, pc}
 8006fc8:	0801231c 	.word	0x0801231c

08006fcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006fcc:	b590      	push	{r4, r7, lr}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2bb0      	cmp	r3, #176	@ 0xb0
 8006fd8:	d903      	bls.n	8006fe2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006fda:	4b15      	ldr	r3, [pc, #84]	@ (8007030 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e007      	b.n	8006ff2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	091b      	lsrs	r3, r3, #4
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	4a11      	ldr	r2, [pc, #68]	@ (8007030 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006ff2:	f7ff f9eb 	bl	80063cc <LL_RCC_GetAHB4Prescaler>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8007034 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	fbb2 f3f3 	udiv	r3, r2, r3
 800700a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4a0a      	ldr	r2, [pc, #40]	@ (8007038 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007010:	fba2 2303 	umull	r2, r3, r2, r3
 8007014:	0c9c      	lsrs	r4, r3, #18
 8007016:	f7fe ff39 	bl	8005e8c <HAL_PWREx_GetVoltageRange>
 800701a:	4603      	mov	r3, r0
 800701c:	4619      	mov	r1, r3
 800701e:	4620      	mov	r0, r4
 8007020:	f000 f80c 	bl	800703c <RCC_SetFlashLatency>
 8007024:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	bd90      	pop	{r4, r7, pc}
 800702e:	bf00      	nop
 8007030:	0801235c 	.word	0x0801235c
 8007034:	0801231c 	.word	0x0801231c
 8007038:	431bde83 	.word	0x431bde83

0800703c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800703c:	b590      	push	{r4, r7, lr}
 800703e:	b093      	sub	sp, #76	@ 0x4c
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007046:	4b37      	ldr	r3, [pc, #220]	@ (8007124 <RCC_SetFlashLatency+0xe8>)
 8007048:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800704c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800704e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007052:	4a35      	ldr	r2, [pc, #212]	@ (8007128 <RCC_SetFlashLatency+0xec>)
 8007054:	f107 031c 	add.w	r3, r7, #28
 8007058:	ca07      	ldmia	r2, {r0, r1, r2}
 800705a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800705e:	4b33      	ldr	r3, [pc, #204]	@ (800712c <RCC_SetFlashLatency+0xf0>)
 8007060:	f107 040c 	add.w	r4, r7, #12
 8007064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800706a:	2300      	movs	r3, #0
 800706c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007074:	d11a      	bne.n	80070ac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007076:	2300      	movs	r3, #0
 8007078:	643b      	str	r3, [r7, #64]	@ 0x40
 800707a:	e013      	b.n	80070a4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800707c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	3348      	adds	r3, #72	@ 0x48
 8007082:	443b      	add	r3, r7
 8007084:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	429a      	cmp	r2, r3
 800708c:	d807      	bhi.n	800709e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800708e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	3348      	adds	r3, #72	@ 0x48
 8007094:	443b      	add	r3, r7
 8007096:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800709a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800709c:	e020      	b.n	80070e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800709e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a0:	3301      	adds	r3, #1
 80070a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80070a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d9e8      	bls.n	800707c <RCC_SetFlashLatency+0x40>
 80070aa:	e019      	b.n	80070e0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070ac:	2300      	movs	r3, #0
 80070ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b0:	e013      	b.n	80070da <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80070b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	3348      	adds	r3, #72	@ 0x48
 80070b8:	443b      	add	r3, r7
 80070ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d807      	bhi.n	80070d4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80070c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	3348      	adds	r3, #72	@ 0x48
 80070ca:	443b      	add	r3, r7
 80070cc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80070d0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80070d2:	e005      	b.n	80070e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d6:	3301      	adds	r3, #1
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d9e8      	bls.n	80070b2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80070e0:	4b13      	ldr	r3, [pc, #76]	@ (8007130 <RCC_SetFlashLatency+0xf4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f023 0207 	bic.w	r2, r3, #7
 80070e8:	4911      	ldr	r1, [pc, #68]	@ (8007130 <RCC_SetFlashLatency+0xf4>)
 80070ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ec:	4313      	orrs	r3, r2
 80070ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070f0:	f7fb ff2c 	bl	8002f4c <HAL_GetTick>
 80070f4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80070f6:	e008      	b.n	800710a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80070f8:	f7fb ff28 	bl	8002f4c <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e007      	b.n	800711a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800710a:	4b09      	ldr	r3, [pc, #36]	@ (8007130 <RCC_SetFlashLatency+0xf4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007114:	429a      	cmp	r2, r3
 8007116:	d1ef      	bne.n	80070f8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	374c      	adds	r7, #76	@ 0x4c
 800711e:	46bd      	mov	sp, r7
 8007120:	bd90      	pop	{r4, r7, pc}
 8007122:	bf00      	nop
 8007124:	08010cc0 	.word	0x08010cc0
 8007128:	08010cd0 	.word	0x08010cd0
 800712c:	08010cdc 	.word	0x08010cdc
 8007130:	58004000 	.word	0x58004000

08007134 <LL_RCC_LSE_IsEnabled>:
{
 8007134:	b480      	push	{r7}
 8007136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <LL_RCC_LSE_IsEnabled+0x18>
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <LL_RCC_LSE_IsEnabled+0x1a>
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <LL_RCC_LSE_IsReady>:
{
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800715c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b02      	cmp	r3, #2
 800716a:	d101      	bne.n	8007170 <LL_RCC_LSE_IsReady+0x18>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <LL_RCC_LSE_IsReady+0x1a>
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <LL_RCC_SetRFWKPClockSource>:
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800718c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007190:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <LL_RCC_SetSMPSClockSource>:
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80071b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	f023 0203 	bic.w	r2, r3, #3
 80071ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <LL_RCC_SetSMPSPrescaler>:
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80071d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <LL_RCC_SetUSARTClockSource>:
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007208:	f023 0203 	bic.w	r2, r3, #3
 800720c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <LL_RCC_SetLPUARTClockSource>:
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800722c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007234:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007238:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <LL_RCC_SetI2CClockSource>:
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800725c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007268:	43db      	mvns	r3, r3
 800726a:	401a      	ands	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007274:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007278:	4313      	orrs	r3, r2
 800727a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <LL_RCC_SetLPTIMClockSource>:
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007296:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0c1b      	lsrs	r3, r3, #16
 800729e:	041b      	lsls	r3, r3, #16
 80072a0:	43db      	mvns	r3, r3
 80072a2:	401a      	ands	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	041b      	lsls	r3, r3, #16
 80072a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80072b2:	bf00      	nop
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <LL_RCC_SetSAIClockSource>:
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80072c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80072d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4313      	orrs	r3, r2
 80072da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <LL_RCC_SetRNGClockSource>:
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80072f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80072fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4313      	orrs	r3, r2
 8007306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <LL_RCC_SetCLK48ClockSource>:
{
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800731e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007326:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800732a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4313      	orrs	r3, r2
 8007332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <LL_RCC_SetUSBClockSource>:
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff ffe3 	bl	8007316 <LL_RCC_SetCLK48ClockSource>
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <LL_RCC_SetADCClockSource>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007368:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800736c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4313      	orrs	r3, r2
 8007374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <LL_RCC_SetRTCClockSource>:
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800738c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007398:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <LL_RCC_GetRTCClockSource>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80073b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <LL_RCC_ForceBackupDomainReset>:
{
 80073ca:	b480      	push	{r7}
 80073cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80073e2:	bf00      	nop
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <LL_RCC_ReleaseBackupDomainReset>:
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007404:	bf00      	nop
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <LL_RCC_PLLSAI1_Enable>:
{
 800740e:	b480      	push	{r7}
 8007410:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800741c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007420:	6013      	str	r3, [r2, #0]
}
 8007422:	bf00      	nop
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <LL_RCC_PLLSAI1_Disable>:
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800743a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800743e:	6013      	str	r3, [r2, #0]
}
 8007440:	bf00      	nop
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <LL_RCC_PLLSAI1_IsReady>:
{
 800744a:	b480      	push	{r7}
 800744c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800744e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800745c:	d101      	bne.n	8007462 <LL_RCC_PLLSAI1_IsReady+0x18>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b088      	sub	sp, #32
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007476:	2300      	movs	r3, #0
 8007478:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800747a:	2300      	movs	r3, #0
 800747c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d034      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007492:	d021      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007494:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007498:	d81b      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800749a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800749e:	d01d      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80074a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074a4:	d815      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80074aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074ae:	d110      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80074b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074be:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80074c0:	e00d      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 f947 	bl	800775a <RCCEx_PLLSAI1_ConfigNP>
 80074cc:	4603      	mov	r3, r0
 80074ce:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80074d0:	e005      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	77fb      	strb	r3, [r7, #31]
        break;
 80074d6:	e002      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80074d8:	bf00      	nop
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80074dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074de:	7ffb      	ldrb	r3, [r7, #31]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d105      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fee8 	bl	80072be <LL_RCC_SetSAIClockSource>
 80074ee:	e001      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f0:	7ffb      	ldrb	r3, [r7, #31]
 80074f2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d046      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007500:	f7ff ff56 	bl	80073b0 <LL_RCC_GetRTCClockSource>
 8007504:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	429a      	cmp	r2, r3
 800750e:	d03c      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007510:	f7fe fcac 	bl	8005e6c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff ff30 	bl	8007384 <LL_RCC_SetRTCClockSource>
 8007524:	e02e      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007530:	f7ff ff4b 	bl	80073ca <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007534:	f7ff ff5a 	bl	80073ec <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007546:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007550:	f7ff fdf0 	bl	8007134 <LL_RCC_LSE_IsEnabled>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d114      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800755a:	f7fb fcf7 	bl	8002f4c <HAL_GetTick>
 800755e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007560:	e00b      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007562:	f7fb fcf3 	bl	8002f4c <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007570:	4293      	cmp	r3, r2
 8007572:	d902      	bls.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	77fb      	strb	r3, [r7, #31]
              break;
 8007578:	e004      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800757a:	f7ff fded 	bl	8007158 <LL_RCC_LSE_IsReady>
 800757e:	4603      	mov	r3, r0
 8007580:	2b01      	cmp	r3, #1
 8007582:	d1ee      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007584:	7ffb      	ldrb	r3, [r7, #31]
 8007586:	77bb      	strb	r3, [r7, #30]
 8007588:	e001      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758a:	7ffb      	ldrb	r3, [r7, #31]
 800758c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d004      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fe2a 	bl	80071f8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff fe35 	bl	8007224 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7ff fe5d 	bl	800728a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d004      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff fe52 	bl	800728a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d004      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff fe2a 	bl	8007250 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b00      	cmp	r3, #0
 8007606:	d004      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff fe1f 	bl	8007250 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761a:	2b00      	cmp	r3, #0
 800761c:	d022      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff fe8d 	bl	8007342 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800762c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007630:	d107      	bne.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800763c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007640:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007646:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800764a:	d10b      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3304      	adds	r3, #4
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f8dd 	bl	8007810 <RCCEx_PLLSAI1_ConfigNQ>
 8007656:	4603      	mov	r3, r0
 8007658:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800765a:	7ffb      	ldrb	r3, [r7, #31]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007660:	7ffb      	ldrb	r3, [r7, #31]
 8007662:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800766c:	2b00      	cmp	r3, #0
 800766e:	d02b      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007678:	d008      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007682:	d003      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007688:	2b00      	cmp	r3, #0
 800768a:	d105      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff fe2a 	bl	80072ea <LL_RCC_SetRNGClockSource>
 8007696:	e00a      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	2000      	movs	r0, #0
 80076a4:	f7ff fe21 	bl	80072ea <LL_RCC_SetRNGClockSource>
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7ff fe34 	bl	8007316 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80076b6:	d107      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80076b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d022      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff fe3d 	bl	8007358 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e6:	d107      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076f6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007700:	d10b      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3304      	adds	r3, #4
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f8dd 	bl	80078c6 <RCCEx_PLLSAI1_ConfigNR>
 800770c:	4603      	mov	r3, r0
 800770e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007710:	7ffb      	ldrb	r3, [r7, #31]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007716:	7ffb      	ldrb	r3, [r7, #31]
 8007718:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d004      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fd26 	bl	800717c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d009      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fd45 	bl	80071d0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff fd2c 	bl	80071a8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007750:	7fbb      	ldrb	r3, [r7, #30]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007766:	f7ff fe61 	bl	800742c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800776a:	f7fb fbef 	bl	8002f4c <HAL_GetTick>
 800776e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007770:	e009      	b.n	8007786 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007772:	f7fb fbeb 	bl	8002f4c <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d902      	bls.n	8007786 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	73fb      	strb	r3, [r7, #15]
      break;
 8007784:	e004      	b.n	8007790 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007786:	f7ff fe60 	bl	800744a <LL_RCC_PLLSAI1_IsReady>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1f0      	bne.n	8007772 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d137      	bne.n	8007806 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077aa:	4313      	orrs	r3, r2
 80077ac:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80077ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077c0:	4313      	orrs	r3, r2
 80077c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80077c4:	f7ff fe23 	bl	800740e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077c8:	f7fb fbc0 	bl	8002f4c <HAL_GetTick>
 80077cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077ce:	e009      	b.n	80077e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077d0:	f7fb fbbc 	bl	8002f4c <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d902      	bls.n	80077e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	73fb      	strb	r3, [r7, #15]
        break;
 80077e2:	e004      	b.n	80077ee <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077e4:	f7ff fe31 	bl	800744a <LL_RCC_PLLSAI1_IsReady>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d1f0      	bne.n	80077d0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d108      	bne.n	8007806 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80077f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007802:	4313      	orrs	r3, r2
 8007804:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800781c:	f7ff fe06 	bl	800742c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007820:	f7fb fb94 	bl	8002f4c <HAL_GetTick>
 8007824:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007826:	e009      	b.n	800783c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007828:	f7fb fb90 	bl	8002f4c <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d902      	bls.n	800783c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	73fb      	strb	r3, [r7, #15]
      break;
 800783a:	e004      	b.n	8007846 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800783c:	f7ff fe05 	bl	800744a <LL_RCC_PLLSAI1_IsReady>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f0      	bne.n	8007828 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d137      	bne.n	80078bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800784c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007860:	4313      	orrs	r3, r2
 8007862:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007876:	4313      	orrs	r3, r2
 8007878:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800787a:	f7ff fdc8 	bl	800740e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800787e:	f7fb fb65 	bl	8002f4c <HAL_GetTick>
 8007882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007884:	e009      	b.n	800789a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007886:	f7fb fb61 	bl	8002f4c <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d902      	bls.n	800789a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	73fb      	strb	r3, [r7, #15]
        break;
 8007898:	e004      	b.n	80078a4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800789a:	f7ff fdd6 	bl	800744a <LL_RCC_PLLSAI1_IsReady>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d1f0      	bne.n	8007886 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d108      	bne.n	80078bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80078aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ae:	691a      	ldr	r2, [r3, #16]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078b8:	4313      	orrs	r3, r2
 80078ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80078d2:	f7ff fdab 	bl	800742c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078d6:	f7fb fb39 	bl	8002f4c <HAL_GetTick>
 80078da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078dc:	e009      	b.n	80078f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078de:	f7fb fb35 	bl	8002f4c <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d902      	bls.n	80078f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	73fb      	strb	r3, [r7, #15]
      break;
 80078f0:	e004      	b.n	80078fc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078f2:	f7ff fdaa 	bl	800744a <LL_RCC_PLLSAI1_IsReady>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1f0      	bne.n	80078de <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d137      	bne.n	8007972 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007916:	4313      	orrs	r3, r2
 8007918:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800791a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800792c:	4313      	orrs	r3, r2
 800792e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007930:	f7ff fd6d 	bl	800740e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007934:	f7fb fb0a 	bl	8002f4c <HAL_GetTick>
 8007938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800793a:	e009      	b.n	8007950 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800793c:	f7fb fb06 	bl	8002f4c <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b02      	cmp	r3, #2
 8007948:	d902      	bls.n	8007950 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	73fb      	strb	r3, [r7, #15]
        break;
 800794e:	e004      	b.n	800795a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007950:	f7ff fd7b 	bl	800744a <LL_RCC_PLLSAI1_IsReady>
 8007954:	4603      	mov	r3, r0
 8007956:	2b01      	cmp	r3, #1
 8007958:	d1f0      	bne.n	800793c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d108      	bne.n	8007972 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800796e:	4313      	orrs	r3, r2
 8007970:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007972:	7bfb      	ldrb	r3, [r7, #15]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e09f      	b.n	8007ace <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fb f8ba 	bl	8002b1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80079b0:	4b49      	ldr	r3, [pc, #292]	@ (8007ad8 <HAL_RTC_Init+0x15c>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	d07e      	beq.n	8007aba <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	22ca      	movs	r2, #202	@ 0xca
 80079c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2253      	movs	r2, #83	@ 0x53
 80079ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fac6 	bl	8007f5e <RTC_EnterInitMode>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	22ff      	movs	r2, #255	@ 0xff
 80079de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2204      	movs	r2, #4
 80079e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
 80079ec:	e067      	b.n	8007abe <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80079fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a00:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6899      	ldr	r1, [r3, #8]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	68d2      	ldr	r2, [r2, #12]
 8007a28:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6919      	ldr	r1, [r3, #16]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	041a      	lsls	r2, r3, #16
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a4c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0203 	bic.w	r2, r2, #3
 8007a5c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69da      	ldr	r2, [r3, #28]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d113      	bne.n	8007aac <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fa44 	bl	8007f12 <HAL_RTC_WaitForSynchro>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00d      	beq.n	8007aac <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	22ff      	movs	r2, #255	@ 0xff
 8007a96:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2204      	movs	r2, #4
 8007a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e010      	b.n	8007ace <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	22ff      	movs	r2, #255	@ 0xff
 8007ab2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
 8007ab8:	e001      	b.n	8007abe <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40002800 	.word	0x40002800

08007adc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007adc:	b590      	push	{r4, r7, lr}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d101      	bne.n	8007af6 <HAL_RTC_SetTime+0x1a>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e0b2      	b.n	8007c5c <HAL_RTC_SetTime+0x180>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2202      	movs	r2, #2
 8007b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d126      	bne.n	8007b5a <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d102      	bne.n	8007b20 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fa44 	bl	8007fb2 <RTC_ByteToBcd2>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	785b      	ldrb	r3, [r3, #1]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fa3d 	bl	8007fb2 <RTC_ByteToBcd2>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b3c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	789b      	ldrb	r3, [r3, #2]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fa35 	bl	8007fb2 <RTC_ByteToBcd2>
 8007b48:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007b4a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	e018      	b.n	8007b8c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d102      	bne.n	8007b6e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	785b      	ldrb	r3, [r3, #1]
 8007b78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007b7a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007b80:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	78db      	ldrb	r3, [r3, #3]
 8007b86:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	22ca      	movs	r2, #202	@ 0xca
 8007b92:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2253      	movs	r2, #83	@ 0x53
 8007b9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 f9de 	bl	8007f5e <RTC_EnterInitMode>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00d      	beq.n	8007bc4 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	22ff      	movs	r2, #255	@ 0xff
 8007bae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e04b      	b.n	8007c5c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007bce:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007bd2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007be2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6899      	ldr	r1, [r3, #8]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c0a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d113      	bne.n	8007c42 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f979 	bl	8007f12 <HAL_RTC_WaitForSynchro>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	22ff      	movs	r2, #255	@ 0xff
 8007c2c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2204      	movs	r2, #4
 8007c32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e00c      	b.n	8007c5c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	22ff      	movs	r2, #255	@ 0xff
 8007c48:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
  }
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd90      	pop	{r4, r7, pc}

08007c64 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007c92:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007c96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	0c1b      	lsrs	r3, r3, #16
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	0a1b      	lsrs	r3, r3, #8
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	0c1b      	lsrs	r3, r3, #16
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d11a      	bne.n	8007d12 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f986 	bl	8007ff2 <RTC_Bcd2ToByte>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	461a      	mov	r2, r3
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f97d 	bl	8007ff2 <RTC_Bcd2ToByte>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	789b      	ldrb	r3, [r3, #2]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 f974 	bl	8007ff2 <RTC_Bcd2ToByte>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_RTC_SetDate+0x1a>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e09c      	b.n	8007e70 <HAL_RTC_SetDate+0x154>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10e      	bne.n	8007d6a <HAL_RTC_SetDate+0x4e>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d008      	beq.n	8007d6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	f023 0310 	bic.w	r3, r3, #16
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	330a      	adds	r3, #10
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d11c      	bne.n	8007daa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	78db      	ldrb	r3, [r3, #3]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 f91c 	bl	8007fb2 <RTC_ByteToBcd2>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f915 	bl	8007fb2 <RTC_ByteToBcd2>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007d8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	789b      	ldrb	r3, [r3, #2]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f90d 	bl	8007fb2 <RTC_ByteToBcd2>
 8007d98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007d9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007da4:	4313      	orrs	r3, r2
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	e00e      	b.n	8007dc8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	78db      	ldrb	r3, [r3, #3]
 8007dae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	785b      	ldrb	r3, [r3, #1]
 8007db4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007db6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007dbc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	22ca      	movs	r2, #202	@ 0xca
 8007dce:	625a      	str	r2, [r3, #36]	@ 0x24
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2253      	movs	r2, #83	@ 0x53
 8007dd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 f8c0 	bl	8007f5e <RTC_EnterInitMode>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00d      	beq.n	8007e00 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	22ff      	movs	r2, #255	@ 0xff
 8007dea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2204      	movs	r2, #4
 8007df0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e037      	b.n	8007e70 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e0a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e0e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d113      	bne.n	8007e56 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 f86f 	bl	8007f12 <HAL_RTC_WaitForSynchro>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00d      	beq.n	8007e56 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	22ff      	movs	r2, #255	@ 0xff
 8007e40:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2204      	movs	r2, #4
 8007e46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e00c      	b.n	8007e70 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	22ff      	movs	r2, #255	@ 0xff
 8007e5c:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
  }
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd90      	pop	{r4, r7, pc}

08007e78 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e8e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	0c1b      	lsrs	r3, r3, #16
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	0a1b      	lsrs	r3, r3, #8
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	0b5b      	lsrs	r3, r3, #13
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d11a      	bne.n	8007f08 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	78db      	ldrb	r3, [r3, #3]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 f88b 	bl	8007ff2 <RTC_Bcd2ToByte>
 8007edc:	4603      	mov	r3, r0
 8007ede:	461a      	mov	r2, r3
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	785b      	ldrb	r3, [r3, #1]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 f882 	bl	8007ff2 <RTC_Bcd2ToByte>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	789b      	ldrb	r3, [r3, #2]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 f879 	bl	8007ff2 <RTC_Bcd2ToByte>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007f28:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007f2a:	f7fb f80f 	bl	8002f4c <HAL_GetTick>
 8007f2e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f30:	e009      	b.n	8007f46 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f32:	f7fb f80b 	bl	8002f4c <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f40:	d901      	bls.n	8007f46 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e007      	b.n	8007f56 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0ee      	beq.n	8007f32 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d119      	bne.n	8007fa8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007f7e:	f7fa ffe5 	bl	8002f4c <HAL_GetTick>
 8007f82:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007f84:	e009      	b.n	8007f9a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007f86:	f7fa ffe1 	bl	8002f4c <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f94:	d901      	bls.n	8007f9a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e007      	b.n	8007faa <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0ee      	beq.n	8007f86 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	4603      	mov	r3, r0
 8007fba:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8007fc4:	e005      	b.n	8007fd2 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	3b0a      	subs	r3, #10
 8007fd0:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8007fd2:	7afb      	ldrb	r3, [r7, #11]
 8007fd4:	2b09      	cmp	r3, #9
 8007fd6:	d8f6      	bhi.n	8007fc6 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	7afb      	ldrb	r3, [r7, #11]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b2db      	uxtb	r3, r3
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	091b      	lsrs	r3, r3, #4
 8008000:	b2db      	uxtb	r3, r3
 8008002:	461a      	mov	r2, r3
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	b2db      	uxtb	r3, r3
 800801a:	4413      	add	r3, r2
 800801c:	b2db      	uxtb	r3, r3
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b088      	sub	sp, #32
 800802e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	2218      	movs	r2, #24
 800803a:	2100      	movs	r1, #0
 800803c:	4618      	mov	r0, r3
 800803e:	f001 f985 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008042:	233f      	movs	r3, #63	@ 0x3f
 8008044:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008046:	2381      	movs	r3, #129	@ 0x81
 8008048:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800804a:	1dfb      	adds	r3, r7, #7
 800804c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800804e:	2301      	movs	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008052:	f107 0308 	add.w	r3, r7, #8
 8008056:	2100      	movs	r1, #0
 8008058:	4618      	mov	r0, r3
 800805a:	f001 fc07 	bl	800986c <hci_send_req>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	da01      	bge.n	8008068 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008064:	23ff      	movs	r3, #255	@ 0xff
 8008066:	e000      	b.n	800806a <aci_gap_set_non_discoverable+0x40>
  return status;
 8008068:	79fb      	ldrb	r3, [r7, #7]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008072:	b5b0      	push	{r4, r5, r7, lr}
 8008074:	b0ce      	sub	sp, #312	@ 0x138
 8008076:	af00      	add	r7, sp, #0
 8008078:	4605      	mov	r5, r0
 800807a:	460c      	mov	r4, r1
 800807c:	4610      	mov	r0, r2
 800807e:	4619      	mov	r1, r3
 8008080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008084:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008088:	462a      	mov	r2, r5
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008090:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008094:	4622      	mov	r2, r4
 8008096:	801a      	strh	r2, [r3, #0]
 8008098:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800809c:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80080a0:	4602      	mov	r2, r0
 80080a2:	801a      	strh	r2, [r3, #0]
 80080a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080a8:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80080ac:	460a      	mov	r2, r1
 80080ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80080b0:	f107 0310 	add.w	r3, r7, #16
 80080b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80080b8:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80080bc:	3308      	adds	r3, #8
 80080be:	f107 0210 	add.w	r2, r7, #16
 80080c2:	4413      	add	r3, r2
 80080c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80080c8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80080cc:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80080d0:	4413      	add	r3, r2
 80080d2:	3309      	adds	r3, #9
 80080d4:	f107 0210 	add.w	r2, r7, #16
 80080d8:	4413      	add	r3, r2
 80080da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80080de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080e2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80080e6:	2200      	movs	r2, #0
 80080e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80080f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80080f4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80080f8:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80080fc:	7812      	ldrb	r2, [r2, #0]
 80080fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008100:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008104:	3301      	adds	r3, #1
 8008106:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800810a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800810e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008112:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008116:	8812      	ldrh	r2, [r2, #0]
 8008118:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800811c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008120:	3302      	adds	r3, #2
 8008122:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008126:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800812a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800812e:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8008132:	8812      	ldrh	r2, [r2, #0]
 8008134:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008138:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800813c:	3302      	adds	r3, #2
 800813e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008142:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008146:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800814a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800814e:	7812      	ldrb	r2, [r2, #0]
 8008150:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008152:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008156:	3301      	adds	r3, #1
 8008158:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800815c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008160:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008164:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008166:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800816a:	3301      	adds	r3, #1
 800816c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008170:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008174:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008178:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800817a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800817e:	3301      	adds	r3, #1
 8008180:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008184:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008188:	3308      	adds	r3, #8
 800818a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800818e:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8008192:	4618      	mov	r0, r3
 8008194:	f001 f8ca 	bl	800932c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008198:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800819c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80081a0:	4413      	add	r3, r2
 80081a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80081a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80081aa:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80081ae:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80081b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081b4:	3301      	adds	r3, #1
 80081b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80081ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80081be:	3301      	adds	r3, #1
 80081c0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80081c4:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80081c8:	4618      	mov	r0, r3
 80081ca:	f001 f8af 	bl	800932c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80081ce:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80081d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80081d6:	4413      	add	r3, r2
 80081d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80081dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081e0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80081e4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80081e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081ea:	3302      	adds	r3, #2
 80081ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80081f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081f4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80081f8:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80081fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081fe:	3302      	adds	r3, #2
 8008200:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008208:	2218      	movs	r2, #24
 800820a:	2100      	movs	r1, #0
 800820c:	4618      	mov	r0, r3
 800820e:	f001 f89d 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008212:	233f      	movs	r3, #63	@ 0x3f
 8008214:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8008218:	2383      	movs	r3, #131	@ 0x83
 800821a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800821e:	f107 0310 	add.w	r3, r7, #16
 8008222:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008226:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800822a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800822e:	f107 030f 	add.w	r3, r7, #15
 8008232:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008236:	2301      	movs	r3, #1
 8008238:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800823c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008240:	2100      	movs	r1, #0
 8008242:	4618      	mov	r0, r3
 8008244:	f001 fb12 	bl	800986c <hci_send_req>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	da01      	bge.n	8008252 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800824e:	23ff      	movs	r3, #255	@ 0xff
 8008250:	e004      	b.n	800825c <aci_gap_set_discoverable+0x1ea>
  return status;
 8008252:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008256:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800825a:	781b      	ldrb	r3, [r3, #0]
}
 800825c:	4618      	mov	r0, r3
 800825e:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008262:	46bd      	mov	sp, r7
 8008264:	bdb0      	pop	{r4, r5, r7, pc}

08008266 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b0cc      	sub	sp, #304	@ 0x130
 800826a:	af00      	add	r7, sp, #0
 800826c:	4602      	mov	r2, r0
 800826e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008272:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008276:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008278:	f107 0310 	add.w	r3, r7, #16
 800827c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008280:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008284:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8008292:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008296:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800829a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80082a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80082a6:	3301      	adds	r3, #1
 80082a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80082b0:	2218      	movs	r2, #24
 80082b2:	2100      	movs	r1, #0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 f849 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 80082ba:	233f      	movs	r3, #63	@ 0x3f
 80082bc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80082c0:	2385      	movs	r3, #133	@ 0x85
 80082c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80082c6:	f107 0310 	add.w	r3, r7, #16
 80082ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80082ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80082d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80082d6:	f107 030f 	add.w	r3, r7, #15
 80082da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80082de:	2301      	movs	r3, #1
 80082e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80082e8:	2100      	movs	r1, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 fabe 	bl	800986c <hci_send_req>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da01      	bge.n	80082fa <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80082f6:	23ff      	movs	r3, #255	@ 0xff
 80082f8:	e004      	b.n	8008304 <aci_gap_set_io_capability+0x9e>
  return status;
 80082fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80082fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008302:	781b      	ldrb	r3, [r3, #0]
}
 8008304:	4618      	mov	r0, r3
 8008306:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800830e:	b5b0      	push	{r4, r5, r7, lr}
 8008310:	b0cc      	sub	sp, #304	@ 0x130
 8008312:	af00      	add	r7, sp, #0
 8008314:	4605      	mov	r5, r0
 8008316:	460c      	mov	r4, r1
 8008318:	4610      	mov	r0, r2
 800831a:	4619      	mov	r1, r3
 800831c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008320:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008324:	462a      	mov	r2, r5
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800832c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008330:	4622      	mov	r2, r4
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008338:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800833c:	4602      	mov	r2, r0
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008344:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008348:	460a      	mov	r2, r1
 800834a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800834c:	f107 0310 	add.w	r3, r7, #16
 8008350:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008354:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008358:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008366:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800836a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800836e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008376:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800837a:	3301      	adds	r3, #1
 800837c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008380:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008384:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008388:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800838c:	7812      	ldrb	r2, [r2, #0]
 800838e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008390:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008394:	3301      	adds	r3, #1
 8008396:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800839a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800839e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80083a2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80083a6:	7812      	ldrb	r2, [r2, #0]
 80083a8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80083aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083ae:	3301      	adds	r3, #1
 80083b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80083b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80083bc:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80083c0:	7812      	ldrb	r2, [r2, #0]
 80083c2:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80083c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083c8:	3301      	adds	r3, #1
 80083ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80083ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083d2:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80083d6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80083d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083dc:	3301      	adds	r3, #1
 80083de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80083e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083e6:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80083ea:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80083ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083f0:	3301      	adds	r3, #1
 80083f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80083f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083fa:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80083fe:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008400:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008404:	3301      	adds	r3, #1
 8008406:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800840a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800840e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008412:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008416:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800841a:	3304      	adds	r3, #4
 800841c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008420:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008424:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008428:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800842a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800842e:	3301      	adds	r3, #1
 8008430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008434:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008438:	2218      	movs	r2, #24
 800843a:	2100      	movs	r1, #0
 800843c:	4618      	mov	r0, r3
 800843e:	f000 ff85 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008442:	233f      	movs	r3, #63	@ 0x3f
 8008444:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8008448:	2386      	movs	r3, #134	@ 0x86
 800844a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800844e:	f107 0310 	add.w	r3, r7, #16
 8008452:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008456:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800845a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800845e:	f107 030f 	add.w	r3, r7, #15
 8008462:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008466:	2301      	movs	r3, #1
 8008468:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800846c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008470:	2100      	movs	r1, #0
 8008472:	4618      	mov	r0, r3
 8008474:	f001 f9fa 	bl	800986c <hci_send_req>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	da01      	bge.n	8008482 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800847e:	23ff      	movs	r3, #255	@ 0xff
 8008480:	e004      	b.n	800848c <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008482:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008486:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800848a:	781b      	ldrb	r3, [r3, #0]
}
 800848c:	4618      	mov	r0, r3
 800848e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008492:	46bd      	mov	sp, r7
 8008494:	bdb0      	pop	{r4, r5, r7, pc}

08008496 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b0cc      	sub	sp, #304	@ 0x130
 800849a:	af00      	add	r7, sp, #0
 800849c:	4602      	mov	r2, r0
 800849e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80084a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80084a6:	6019      	str	r1, [r3, #0]
 80084a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80084ac:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80084b0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80084b2:	f107 0310 	add.w	r3, r7, #16
 80084b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80084ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80084be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80084c2:	2200      	movs	r2, #0
 80084c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80084cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80084d4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80084d8:	8812      	ldrh	r2, [r2, #0]
 80084da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80084dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084e0:	3302      	adds	r3, #2
 80084e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80084e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80084ee:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80084f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084fc:	3304      	adds	r3, #4
 80084fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008502:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008506:	2218      	movs	r2, #24
 8008508:	2100      	movs	r1, #0
 800850a:	4618      	mov	r0, r3
 800850c:	f000 ff1e 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008510:	233f      	movs	r3, #63	@ 0x3f
 8008512:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8008516:	2388      	movs	r3, #136	@ 0x88
 8008518:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800851c:	f107 0310 	add.w	r3, r7, #16
 8008520:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008524:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008528:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800852c:	f107 030f 	add.w	r3, r7, #15
 8008530:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008534:	2301      	movs	r3, #1
 8008536:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800853a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800853e:	2100      	movs	r1, #0
 8008540:	4618      	mov	r0, r3
 8008542:	f001 f993 	bl	800986c <hci_send_req>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	da01      	bge.n	8008550 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800854c:	23ff      	movs	r3, #255	@ 0xff
 800854e:	e004      	b.n	800855a <aci_gap_pass_key_resp+0xc4>
  return status;
 8008550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008554:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008558:	781b      	ldrb	r3, [r3, #0]
}
 800855a:	4618      	mov	r0, r3
 800855c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008564:	b590      	push	{r4, r7, lr}
 8008566:	b0cd      	sub	sp, #308	@ 0x134
 8008568:	af00      	add	r7, sp, #0
 800856a:	4604      	mov	r4, r0
 800856c:	4608      	mov	r0, r1
 800856e:	4611      	mov	r1, r2
 8008570:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008574:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800857e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008582:	4622      	mov	r2, r4
 8008584:	701a      	strb	r2, [r3, #0]
 8008586:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800858a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800858e:	4602      	mov	r2, r0
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008596:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800859a:	460a      	mov	r2, r1
 800859c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800859e:	f107 0310 	add.w	r3, r7, #16
 80085a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80085a6:	f107 0308 	add.w	r3, r7, #8
 80085aa:	2207      	movs	r2, #7
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fecc 	bl	800934c <Osal_MemSet>
  int index_input = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80085ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085c2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80085c6:	7812      	ldrb	r2, [r2, #0]
 80085c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80085ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085ce:	3301      	adds	r3, #1
 80085d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80085d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085dc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80085e0:	7812      	ldrb	r2, [r2, #0]
 80085e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80085e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085e8:	3301      	adds	r3, #1
 80085ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80085ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085f6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80085fa:	7812      	ldrb	r2, [r2, #0]
 80085fc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80085fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008602:	3301      	adds	r3, #1
 8008604:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008608:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800860c:	2218      	movs	r2, #24
 800860e:	2100      	movs	r1, #0
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fe9b 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008616:	233f      	movs	r3, #63	@ 0x3f
 8008618:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800861c:	238a      	movs	r3, #138	@ 0x8a
 800861e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008622:	f107 0310 	add.w	r3, r7, #16
 8008626:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800862a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800862e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008632:	f107 0308 	add.w	r3, r7, #8
 8008636:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800863a:	2307      	movs	r3, #7
 800863c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008640:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f001 f910 	bl	800986c <hci_send_req>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	da01      	bge.n	8008656 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008652:	23ff      	movs	r3, #255	@ 0xff
 8008654:	e02e      	b.n	80086b4 <aci_gap_init+0x150>
  if ( resp.Status )
 8008656:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800865a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <aci_gap_init+0x10c>
    return resp.Status;
 8008664:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008668:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	e021      	b.n	80086b4 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008670:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008674:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008678:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800867c:	b29a      	uxth	r2, r3
 800867e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008682:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800868a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800868e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008692:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008696:	b29a      	uxth	r2, r3
 8008698:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800869c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800869e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80086a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80086a6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80086b0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd90      	pop	{r4, r7, pc}

080086be <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b0cc      	sub	sp, #304	@ 0x130
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	4602      	mov	r2, r0
 80086c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80086ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80086ce:	6019      	str	r1, [r3, #0]
 80086d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80086d4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80086d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80086da:	f107 0310 	add.w	r3, r7, #16
 80086de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80086e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80086e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80086ea:	2200      	movs	r2, #0
 80086ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80086f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80086fc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008700:	7812      	ldrb	r2, [r2, #0]
 8008702:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008704:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008708:	3301      	adds	r3, #1
 800870a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800870e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008712:	1c58      	adds	r0, r3, #1
 8008714:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008718:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800871c:	781a      	ldrb	r2, [r3, #0]
 800871e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008722:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008726:	6819      	ldr	r1, [r3, #0]
 8008728:	f000 fe00 	bl	800932c <Osal_MemCpy>
  index_input += AdvDataLen;
 800872c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008730:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800873a:	4413      	add	r3, r2
 800873c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008740:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008744:	2218      	movs	r2, #24
 8008746:	2100      	movs	r1, #0
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fdff 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 800874e:	233f      	movs	r3, #63	@ 0x3f
 8008750:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8008754:	238e      	movs	r3, #142	@ 0x8e
 8008756:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800875a:	f107 0310 	add.w	r3, r7, #16
 800875e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008766:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800876a:	f107 030f 	add.w	r3, r7, #15
 800876e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008772:	2301      	movs	r3, #1
 8008774:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008778:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800877c:	2100      	movs	r1, #0
 800877e:	4618      	mov	r0, r3
 8008780:	f001 f874 	bl	800986c <hci_send_req>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	da01      	bge.n	800878e <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800878a:	23ff      	movs	r3, #255	@ 0xff
 800878c:	e004      	b.n	8008798 <aci_gap_update_adv_data+0xda>
  return status;
 800878e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008792:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008796:	781b      	ldrb	r3, [r3, #0]
}
 8008798:	4618      	mov	r0, r3
 800879a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b088      	sub	sp, #32
 80087a6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087ac:	f107 0308 	add.w	r3, r7, #8
 80087b0:	2218      	movs	r2, #24
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 fdc9 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 80087ba:	233f      	movs	r3, #63	@ 0x3f
 80087bc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80087be:	2392      	movs	r3, #146	@ 0x92
 80087c0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80087c2:	1dfb      	adds	r3, r7, #7
 80087c4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80087c6:	2301      	movs	r3, #1
 80087c8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087ca:	f107 0308 	add.w	r3, r7, #8
 80087ce:	2100      	movs	r1, #0
 80087d0:	4618      	mov	r0, r3
 80087d2:	f001 f84b 	bl	800986c <hci_send_req>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	da01      	bge.n	80087e0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80087dc:	23ff      	movs	r3, #255	@ 0xff
 80087de:	e000      	b.n	80087e2 <aci_gap_configure_whitelist+0x40>
  return status;
 80087e0:	79fb      	ldrb	r3, [r7, #7]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3720      	adds	r7, #32
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b0cc      	sub	sp, #304	@ 0x130
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	4602      	mov	r2, r0
 80087f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80087f6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80087fa:	801a      	strh	r2, [r3, #0]
 80087fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008800:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008804:	460a      	mov	r2, r1
 8008806:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008808:	f107 0310 	add.w	r3, r7, #16
 800880c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008810:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008814:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008818:	2200      	movs	r2, #0
 800881a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008822:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008826:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800882a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800882e:	8812      	ldrh	r2, [r2, #0]
 8008830:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008832:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008836:	3302      	adds	r3, #2
 8008838:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800883c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008840:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008844:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008848:	7812      	ldrb	r2, [r2, #0]
 800884a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800884c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008850:	3301      	adds	r3, #1
 8008852:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800885a:	2218      	movs	r2, #24
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fd74 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008864:	233f      	movs	r3, #63	@ 0x3f
 8008866:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800886a:	23a5      	movs	r3, #165	@ 0xa5
 800886c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008870:	f107 0310 	add.w	r3, r7, #16
 8008874:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800887c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008880:	f107 030f 	add.w	r3, r7, #15
 8008884:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008888:	2301      	movs	r3, #1
 800888a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800888e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f000 ffe9 	bl	800986c <hci_send_req>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	da01      	bge.n	80088a4 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80088a0:	23ff      	movs	r3, #255	@ 0xff
 80088a2:	e004      	b.n	80088ae <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80088a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80088ac:	781b      	ldrb	r3, [r3, #0]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b088      	sub	sp, #32
 80088bc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088c2:	f107 0308 	add.w	r3, r7, #8
 80088c6:	2218      	movs	r2, #24
 80088c8:	2100      	movs	r1, #0
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fd3e 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 80088d0:	233f      	movs	r3, #63	@ 0x3f
 80088d2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80088d4:	f240 1301 	movw	r3, #257	@ 0x101
 80088d8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80088da:	1dfb      	adds	r3, r7, #7
 80088dc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80088de:	2301      	movs	r3, #1
 80088e0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088e2:	f107 0308 	add.w	r3, r7, #8
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 ffbf 	bl	800986c <hci_send_req>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da01      	bge.n	80088f8 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80088f4:	23ff      	movs	r3, #255	@ 0xff
 80088f6:	e000      	b.n	80088fa <aci_gatt_init+0x42>
  return status;
 80088f8:	79fb      	ldrb	r3, [r7, #7]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3720      	adds	r7, #32
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008902:	b590      	push	{r4, r7, lr}
 8008904:	b0cf      	sub	sp, #316	@ 0x13c
 8008906:	af00      	add	r7, sp, #0
 8008908:	4604      	mov	r4, r0
 800890a:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800890e:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8008912:	6001      	str	r1, [r0, #0]
 8008914:	4610      	mov	r0, r2
 8008916:	4619      	mov	r1, r3
 8008918:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800891c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008920:	4622      	mov	r2, r4
 8008922:	701a      	strb	r2, [r3, #0]
 8008924:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008928:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800892c:	4602      	mov	r2, r0
 800892e:	701a      	strb	r2, [r3, #0]
 8008930:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008934:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008938:	460a      	mov	r2, r1
 800893a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800893c:	f107 0310 	add.w	r3, r7, #16
 8008940:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008944:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008948:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d00a      	beq.n	8008968 <aci_gatt_add_service+0x66>
 8008952:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008956:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d101      	bne.n	8008964 <aci_gatt_add_service+0x62>
 8008960:	2311      	movs	r3, #17
 8008962:	e002      	b.n	800896a <aci_gatt_add_service+0x68>
 8008964:	2301      	movs	r3, #1
 8008966:	e000      	b.n	800896a <aci_gatt_add_service+0x68>
 8008968:	2303      	movs	r3, #3
 800896a:	f107 0210 	add.w	r2, r7, #16
 800896e:	4413      	add	r3, r2
 8008970:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008974:	f107 030c 	add.w	r3, r7, #12
 8008978:	2203      	movs	r2, #3
 800897a:	2100      	movs	r1, #0
 800897c:	4618      	mov	r0, r3
 800897e:	f000 fce5 	bl	800934c <Osal_MemSet>
  int index_input = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008988:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800898c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008990:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008994:	7812      	ldrb	r2, [r2, #0]
 8008996:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008998:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800899c:	3301      	adds	r3, #1
 800899e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80089a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089a6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d002      	beq.n	80089b6 <aci_gatt_add_service+0xb4>
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d004      	beq.n	80089be <aci_gatt_add_service+0xbc>
 80089b4:	e007      	b.n	80089c6 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80089b6:	2302      	movs	r3, #2
 80089b8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80089bc:	e005      	b.n	80089ca <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80089be:	2310      	movs	r3, #16
 80089c0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80089c4:	e001      	b.n	80089ca <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80089c6:	2397      	movs	r3, #151	@ 0x97
 80089c8:	e06c      	b.n	8008aa4 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80089ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80089ce:	1c58      	adds	r0, r3, #1
 80089d0:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80089d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089d8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80089dc:	6819      	ldr	r1, [r3, #0]
 80089de:	f000 fca5 	bl	800932c <Osal_MemCpy>
    index_input += size;
 80089e2:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80089e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80089ea:	4413      	add	r3, r2
 80089ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80089f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089f4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80089f8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80089fc:	7812      	ldrb	r2, [r2, #0]
 80089fe:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a04:	3301      	adds	r3, #1
 8008a06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a0e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a12:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008a16:	7812      	ldrb	r2, [r2, #0]
 8008a18:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008a1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a1e:	3301      	adds	r3, #1
 8008a20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a28:	2218      	movs	r2, #24
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fc8d 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a32:	233f      	movs	r3, #63	@ 0x3f
 8008a34:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8008a38:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008a3c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008a40:	f107 0310 	add.w	r3, r7, #16
 8008a44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008a50:	f107 030c 	add.w	r3, r7, #12
 8008a54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008a58:	2303      	movs	r3, #3
 8008a5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 ff01 	bl	800986c <hci_send_req>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	da01      	bge.n	8008a74 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008a70:	23ff      	movs	r3, #255	@ 0xff
 8008a72:	e017      	b.n	8008aa4 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008a74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008a82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	e00a      	b.n	8008aa4 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008a8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008aa0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd90      	pop	{r4, r7, pc}

08008aae <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008aae:	b590      	push	{r4, r7, lr}
 8008ab0:	b0d1      	sub	sp, #324	@ 0x144
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8008abc:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8008ac0:	600a      	str	r2, [r1, #0]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008ac8:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008acc:	4622      	mov	r2, r4
 8008ace:	801a      	strh	r2, [r3, #0]
 8008ad0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008ad4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008ad8:	4602      	mov	r2, r0
 8008ada:	701a      	strb	r2, [r3, #0]
 8008adc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008ae0:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8008ae4:	460a      	mov	r2, r1
 8008ae6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008ae8:	f107 0318 	add.w	r3, r7, #24
 8008aec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008af0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008af4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d00a      	beq.n	8008b14 <aci_gatt_add_char+0x66>
 8008afe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008b02:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d101      	bne.n	8008b10 <aci_gatt_add_char+0x62>
 8008b0c:	2313      	movs	r3, #19
 8008b0e:	e002      	b.n	8008b16 <aci_gatt_add_char+0x68>
 8008b10:	2303      	movs	r3, #3
 8008b12:	e000      	b.n	8008b16 <aci_gatt_add_char+0x68>
 8008b14:	2305      	movs	r3, #5
 8008b16:	f107 0218 	add.w	r2, r7, #24
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008b20:	f107 0314 	add.w	r3, r7, #20
 8008b24:	2203      	movs	r2, #3
 8008b26:	2100      	movs	r1, #0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fc0f 	bl	800934c <Osal_MemSet>
  int index_input = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8008b34:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008b38:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008b3c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008b40:	8812      	ldrh	r2, [r2, #0]
 8008b42:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008b44:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008b48:	3302      	adds	r3, #2
 8008b4a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008b4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008b52:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008b56:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008b5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008b62:	3301      	adds	r3, #1
 8008b64:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008b68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008b6c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d002      	beq.n	8008b7c <aci_gatt_add_char+0xce>
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d004      	beq.n	8008b84 <aci_gatt_add_char+0xd6>
 8008b7a:	e007      	b.n	8008b8c <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008b82:	e005      	b.n	8008b90 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008b84:	2310      	movs	r3, #16
 8008b86:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008b8a:	e001      	b.n	8008b90 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008b8c:	2397      	movs	r3, #151	@ 0x97
 8008b8e:	e091      	b.n	8008cb4 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008b90:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008b94:	1cd8      	adds	r0, r3, #3
 8008b96:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8008b9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008b9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	f000 fbc2 	bl	800932c <Osal_MemCpy>
    index_input += size;
 8008ba8:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8008bac:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008bb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008bba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008bbe:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8008bc2:	8812      	ldrh	r2, [r2, #0]
 8008bc4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008bca:	3302      	adds	r3, #2
 8008bcc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008bd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008bd4:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008bd8:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008bda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008bde:	3301      	adds	r3, #1
 8008be0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008be4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008be8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008bec:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008bee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008bf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008bfc:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8008c00:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008c02:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008c06:	3301      	adds	r3, #1
 8008c08:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008c0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008c10:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8008c14:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008c16:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008c20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008c24:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8008c28:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008c2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008c2e:	3301      	adds	r3, #1
 8008c30:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008c38:	2218      	movs	r2, #24
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 fb85 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c42:	233f      	movs	r3, #63	@ 0x3f
 8008c44:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8008c48:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008c4c:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8008c50:	f107 0318 	add.w	r3, r7, #24
 8008c54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008c58:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008c5c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8008c60:	f107 0314 	add.w	r3, r7, #20
 8008c64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8008c68:	2303      	movs	r3, #3
 8008c6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008c72:	2100      	movs	r1, #0
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fdf9 	bl	800986c <hci_send_req>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da01      	bge.n	8008c84 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008c80:	23ff      	movs	r3, #255	@ 0xff
 8008c82:	e017      	b.n	8008cb4 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008c84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008c88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d005      	beq.n	8008c9e <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008c92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008c96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	e00a      	b.n	8008cb4 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008c9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008ca2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ca6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8008cb0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd90      	pop	{r4, r7, pc}

08008cbe <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008cbe:	b5b0      	push	{r4, r5, r7, lr}
 8008cc0:	b0cc      	sub	sp, #304	@ 0x130
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cd0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008cd4:	462a      	mov	r2, r5
 8008cd6:	801a      	strh	r2, [r3, #0]
 8008cd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	801a      	strh	r2, [r3, #0]
 8008ce4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ce8:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008cec:	4602      	mov	r2, r0
 8008cee:	701a      	strb	r2, [r3, #0]
 8008cf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cf4:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008cf8:	460a      	mov	r2, r1
 8008cfa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008cfc:	f107 0310 	add.w	r3, r7, #16
 8008d00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008d04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8008d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d1a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d1e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008d22:	8812      	ldrh	r2, [r2, #0]
 8008d24:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d2a:	3302      	adds	r3, #2
 8008d2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8008d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d34:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d38:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008d3c:	8812      	ldrh	r2, [r2, #0]
 8008d3e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008d40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d44:	3302      	adds	r3, #2
 8008d46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8008d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d4e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d52:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8008d56:	7812      	ldrb	r2, [r2, #0]
 8008d58:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008d5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d5e:	3301      	adds	r3, #1
 8008d60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d68:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d6c:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8008d70:	7812      	ldrb	r2, [r2, #0]
 8008d72:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d78:	3301      	adds	r3, #1
 8008d7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d82:	1d98      	adds	r0, r3, #6
 8008d84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d88:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8008d94:	f000 faca 	bl	800932c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008d98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d9c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008da6:	4413      	add	r3, r2
 8008da8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008db0:	2218      	movs	r2, #24
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 fac9 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dba:	233f      	movs	r3, #63	@ 0x3f
 8008dbc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8008dc0:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008dc4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008dc8:	f107 0310 	add.w	r3, r7, #16
 8008dcc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008dd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008dd4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008dd8:	f107 030f 	add.w	r3, r7, #15
 8008ddc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008de6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dea:	2100      	movs	r1, #0
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 fd3d 	bl	800986c <hci_send_req>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da01      	bge.n	8008dfc <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008df8:	23ff      	movs	r3, #255	@ 0xff
 8008dfa:	e004      	b.n	8008e06 <aci_gatt_update_char_value+0x148>
  return status;
 8008dfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e00:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008e04:	781b      	ldrb	r3, [r3, #0]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bdb0      	pop	{r4, r5, r7, pc}

08008e10 <aci_gatt_exchange_config>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_exchange_config( uint16_t Connection_Handle )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b0cc      	sub	sp, #304	@ 0x130
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4602      	mov	r2, r0
 8008e18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e1c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008e20:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 8008e22:	f107 0310 	add.w	r3, r7, #16
 8008e26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e2e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e44:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008e48:	8812      	ldrh	r2, [r2, #0]
 8008e4a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e50:	3302      	adds	r3, #2
 8008e52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e5a:	2218      	movs	r2, #24
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fa74 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e64:	233f      	movs	r3, #63	@ 0x3f
 8008e66:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x10b;
 8008e6a:	f240 130b 	movw	r3, #267	@ 0x10b
 8008e6e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8008e72:	230f      	movs	r3, #15
 8008e74:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8008e78:	f107 0310 	add.w	r3, r7, #16
 8008e7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008e88:	f107 030f 	add.w	r3, r7, #15
 8008e8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008e90:	2301      	movs	r3, #1
 8008e92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fce5 	bl	800986c <hci_send_req>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	da01      	bge.n	8008eac <aci_gatt_exchange_config+0x9c>
    return BLE_STATUS_TIMEOUT;
 8008ea8:	23ff      	movs	r3, #255	@ 0xff
 8008eaa:	e004      	b.n	8008eb6 <aci_gatt_exchange_config+0xa6>
  return status;
 8008eac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008eb0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008eb4:	781b      	ldrb	r3, [r3, #0]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b0cc      	sub	sp, #304	@ 0x130
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ecc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008ed0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8008ed2:	f107 0310 	add.w	r3, r7, #16
 8008ed6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008eda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ede:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ef0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ef4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008ef8:	8812      	ldrh	r2, [r2, #0]
 8008efa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008efc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f00:	3302      	adds	r3, #2
 8008f02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f0a:	2218      	movs	r2, #24
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 fa1c 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f14:	233f      	movs	r3, #63	@ 0x3f
 8008f16:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 8008f1a:	f240 1327 	movw	r3, #295	@ 0x127
 8008f1e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008f22:	f107 0310 	add.w	r3, r7, #16
 8008f26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008f32:	f107 030f 	add.w	r3, r7, #15
 8008f36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f44:	2100      	movs	r1, #0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fc90 	bl	800986c <hci_send_req>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	da01      	bge.n	8008f56 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8008f52:	23ff      	movs	r3, #255	@ 0xff
 8008f54:	e004      	b.n	8008f60 <aci_gatt_allow_read+0xa0>
  return status;
 8008f56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f5a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008f5e:	781b      	ldrb	r3, [r3, #0]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b0cc      	sub	sp, #304	@ 0x130
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f74:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f7e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008f82:	4602      	mov	r2, r0
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f8a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008f8e:	460a      	mov	r2, r1
 8008f90:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008f92:	f107 0310 	add.w	r3, r7, #16
 8008f96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008f9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8008fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fb0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008fb4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008fb8:	7812      	ldrb	r2, [r2, #0]
 8008fba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008fbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8008fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008fce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fda:	3301      	adds	r3, #1
 8008fdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fe4:	1c98      	adds	r0, r3, #2
 8008fe6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008fee:	781a      	ldrb	r2, [r3, #0]
 8008ff0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ff4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	f000 f997 	bl	800932c <Osal_MemCpy>
  index_input += Length;
 8008ffe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009002:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800900c:	4413      	add	r3, r2
 800900e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009012:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009016:	2218      	movs	r2, #24
 8009018:	2100      	movs	r1, #0
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f996 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009020:	233f      	movs	r3, #63	@ 0x3f
 8009022:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8009026:	230c      	movs	r3, #12
 8009028:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009034:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009038:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800903c:	f107 030f 	add.w	r3, r7, #15
 8009040:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009044:	2301      	movs	r3, #1
 8009046:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800904a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800904e:	2100      	movs	r1, #0
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fc0b 	bl	800986c <hci_send_req>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	da01      	bge.n	8009060 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800905c:	23ff      	movs	r3, #255	@ 0xff
 800905e:	e004      	b.n	800906a <aci_hal_write_config_data+0x100>
  return status;
 8009060:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009064:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009068:	781b      	ldrb	r3, [r3, #0]
}
 800906a:	4618      	mov	r0, r3
 800906c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b0cc      	sub	sp, #304	@ 0x130
 8009078:	af00      	add	r7, sp, #0
 800907a:	4602      	mov	r2, r0
 800907c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009080:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800908a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800908e:	460a      	mov	r2, r1
 8009090:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009092:	f107 0310 	add.w	r3, r7, #16
 8009096:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800909a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800909e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80090a2:	2200      	movs	r2, #0
 80090a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80090ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80090b4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80090b8:	7812      	ldrb	r2, [r2, #0]
 80090ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80090bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090c0:	3301      	adds	r3, #1
 80090c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80090c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80090ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80090d2:	7812      	ldrb	r2, [r2, #0]
 80090d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80090d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090da:	3301      	adds	r3, #1
 80090dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090e4:	2218      	movs	r2, #24
 80090e6:	2100      	movs	r1, #0
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f92f 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 80090ee:	233f      	movs	r3, #63	@ 0x3f
 80090f0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80090f4:	230f      	movs	r3, #15
 80090f6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80090fa:	f107 0310 	add.w	r3, r7, #16
 80090fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009102:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009106:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800910a:	f107 030f 	add.w	r3, r7, #15
 800910e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009112:	2301      	movs	r3, #1
 8009114:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009118:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fba4 	bl	800986c <hci_send_req>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	da01      	bge.n	800912e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800912a:	23ff      	movs	r3, #255	@ 0xff
 800912c:	e004      	b.n	8009138 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800912e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009132:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009136:	781b      	ldrb	r3, [r3, #0]
}
 8009138:	4618      	mov	r0, r3
 800913a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b0cc      	sub	sp, #304	@ 0x130
 8009146:	af00      	add	r7, sp, #0
 8009148:	4602      	mov	r2, r0
 800914a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800914e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009152:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009154:	f107 0310 	add.w	r3, r7, #16
 8009158:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800915c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009160:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009164:	2200      	movs	r2, #0
 8009166:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800916e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009172:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009176:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800917a:	8812      	ldrh	r2, [r2, #0]
 800917c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800917e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009182:	3302      	adds	r3, #2
 8009184:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009188:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800918c:	2218      	movs	r2, #24
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f000 f8db 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009196:	233f      	movs	r3, #63	@ 0x3f
 8009198:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800919c:	2318      	movs	r3, #24
 800919e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80091a2:	f107 0310 	add.w	r3, r7, #16
 80091a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80091aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80091b2:	f107 030f 	add.w	r3, r7, #15
 80091b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80091ba:	2301      	movs	r3, #1
 80091bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091c4:	2100      	movs	r1, #0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fb50 	bl	800986c <hci_send_req>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da01      	bge.n	80091d6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80091d2:	23ff      	movs	r3, #255	@ 0xff
 80091d4:	e004      	b.n	80091e0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80091d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80091da:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80091de:	781b      	ldrb	r3, [r3, #0]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b088      	sub	sp, #32
 80091ee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091f4:	f107 0308 	add.w	r3, r7, #8
 80091f8:	2218      	movs	r2, #24
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 f8a5 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x03;
 8009202:	2303      	movs	r3, #3
 8009204:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009206:	2303      	movs	r3, #3
 8009208:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800920a:	1dfb      	adds	r3, r7, #7
 800920c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800920e:	2301      	movs	r3, #1
 8009210:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009212:	f107 0308 	add.w	r3, r7, #8
 8009216:	2100      	movs	r1, #0
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fb27 	bl	800986c <hci_send_req>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	da01      	bge.n	8009228 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009224:	23ff      	movs	r3, #255	@ 0xff
 8009226:	e000      	b.n	800922a <hci_reset+0x40>
  return status;
 8009228:	79fb      	ldrb	r3, [r7, #7]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3720      	adds	r7, #32
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009232:	b590      	push	{r4, r7, lr}
 8009234:	b0cd      	sub	sp, #308	@ 0x134
 8009236:	af00      	add	r7, sp, #0
 8009238:	4604      	mov	r4, r0
 800923a:	4608      	mov	r0, r1
 800923c:	4611      	mov	r1, r2
 800923e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009242:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009246:	4622      	mov	r2, r4
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800924e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009252:	4602      	mov	r2, r0
 8009254:	701a      	strb	r2, [r3, #0]
 8009256:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800925a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800925e:	460a      	mov	r2, r1
 8009260:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009262:	f107 0310 	add.w	r3, r7, #16
 8009266:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800926a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800926e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800927c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009280:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009284:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009288:	7812      	ldrb	r2, [r2, #0]
 800928a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800928c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009290:	3301      	adds	r3, #1
 8009292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009296:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800929a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800929e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80092a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092aa:	3301      	adds	r3, #1
 80092ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80092b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092b8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80092bc:	7812      	ldrb	r2, [r2, #0]
 80092be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80092c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092c4:	3301      	adds	r3, #1
 80092c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092ce:	2218      	movs	r2, #24
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 f83a 	bl	800934c <Osal_MemSet>
  rq.ogf = 0x08;
 80092d8:	2308      	movs	r3, #8
 80092da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80092de:	2331      	movs	r3, #49	@ 0x31
 80092e0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80092e4:	f107 0310 	add.w	r3, r7, #16
 80092e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80092ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80092f4:	f107 030f 	add.w	r3, r7, #15
 80092f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80092fc:	2301      	movs	r3, #1
 80092fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009302:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009306:	2100      	movs	r1, #0
 8009308:	4618      	mov	r0, r3
 800930a:	f000 faaf 	bl	800986c <hci_send_req>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	da01      	bge.n	8009318 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009314:	23ff      	movs	r3, #255	@ 0xff
 8009316:	e004      	b.n	8009322 <hci_le_set_default_phy+0xf0>
  return status;
 8009318:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800931c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009320:	781b      	ldrb	r3, [r3, #0]
}
 8009322:	4618      	mov	r0, r3
 8009324:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009328:	46bd      	mov	sp, r7
 800932a:	bd90      	pop	{r4, r7, pc}

0800932c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f005 fff6 	bl	800f32e <memcpy>
 8009342:	4603      	mov	r3, r0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	68b9      	ldr	r1, [r7, #8]
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f005 ff6b 	bl	800f238 <memset>
 8009362:	4603      	mov	r3, r0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
  return;
 8009370:	bf00      	nop
}
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800937a:	b480      	push	{r7}
 800937c:	af00      	add	r7, sp, #0
  return;
 800937e:	bf00      	nop
}
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0
  return;
 800938c:	bf00      	nop
}
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009396:	b480      	push	{r7}
 8009398:	af00      	add	r7, sp, #0
  return;
 800939a:	bf00      	nop
}
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  return;
 80093a8:	bf00      	nop
}
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80093b2:	b480      	push	{r7}
 80093b4:	af00      	add	r7, sp, #0
  return;
 80093b6:	bf00      	nop
}
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80093c0:	b480      	push	{r7}
 80093c2:	af00      	add	r7, sp, #0
  return;
 80093c4:	bf00      	nop
}
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80093ce:	b480      	push	{r7}
 80093d0:	af00      	add	r7, sp, #0
  return;
 80093d2:	bf00      	nop
}
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
  return;
 80093e0:	bf00      	nop
}
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80093ea:	b480      	push	{r7}
 80093ec:	af00      	add	r7, sp, #0
  return;
 80093ee:	bf00      	nop
}
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
  return;
 80093fc:	bf00      	nop
}
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009406:	b480      	push	{r7}
 8009408:	af00      	add	r7, sp, #0
  return;
 800940a:	bf00      	nop
}
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0
  return;
 8009418:	bf00      	nop
}
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009422:	b480      	push	{r7}
 8009424:	af00      	add	r7, sp, #0
  return;
 8009426:	bf00      	nop
}
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  return;
 8009434:	bf00      	nop
}
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800943e:	b480      	push	{r7}
 8009440:	af00      	add	r7, sp, #0
  return;
 8009442:	bf00      	nop
}
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800944c:	b480      	push	{r7}
 800944e:	af00      	add	r7, sp, #0
  return;
 8009450:	bf00      	nop
}
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
	...

0800945c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009460:	4b05      	ldr	r3, [pc, #20]	@ (8009478 <SVCCTL_Init+0x1c>)
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009468:	4b04      	ldr	r3, [pc, #16]	@ (800947c <SVCCTL_Init+0x20>)
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800946e:	f000 f807 	bl	8009480 <SVCCTL_SvcInit>

  return;
 8009472:	bf00      	nop
}
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000098 	.word	0x20000098
 800947c:	200000cc 	.word	0x200000cc

08009480 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
  BAS_Init();
 8009484:	f7ff ff72 	bl	800936c <BAS_Init>

  BLS_Init();
 8009488:	f7ff ff77 	bl	800937a <BLS_Init>

  CRS_STM_Init();
 800948c:	f7ff ff7c 	bl	8009388 <CRS_STM_Init>

  DIS_Init();
 8009490:	f7ff ff81 	bl	8009396 <DIS_Init>

  EDS_STM_Init();
 8009494:	f7ff ff86 	bl	80093a4 <EDS_STM_Init>

  HIDS_Init();
 8009498:	f7ff ff8b 	bl	80093b2 <HIDS_Init>

  HRS_Init();
 800949c:	f7ff ff90 	bl	80093c0 <HRS_Init>

  HTS_Init();
 80094a0:	f7ff ff95 	bl	80093ce <HTS_Init>

  IAS_Init();
 80094a4:	f7ff ff9a 	bl	80093dc <IAS_Init>

  LLS_Init();
 80094a8:	f7ff ff9f 	bl	80093ea <LLS_Init>

  TPS_Init();
 80094ac:	f7ff ffa4 	bl	80093f8 <TPS_Init>

  MOTENV_STM_Init();
 80094b0:	f7ff ffa9 	bl	8009406 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80094b4:	f7ff ffae 	bl	8009414 <P2PS_STM_Init>

  ZDD_STM_Init();
 80094b8:	f7ff ffb3 	bl	8009422 <ZDD_STM_Init>

  OTAS_STM_Init();
 80094bc:	f7ff ffb8 	bl	8009430 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80094c0:	f7ff ffc4 	bl	800944c <BVOPUS_STM_Init>

  MESH_Init();
 80094c4:	f7ff ffbb 	bl	800943e <MESH_Init>

  SVCCTL_InitCustomSvc();
 80094c8:	f002 fd72 	bl	800bfb0 <SVCCTL_InitCustomSvc>
  
  return;
 80094cc:	bf00      	nop
}
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80094d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009504 <SVCCTL_RegisterSvcHandler+0x34>)
 80094da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80094de:	4619      	mov	r1, r3
 80094e0:	4a08      	ldr	r2, [pc, #32]	@ (8009504 <SVCCTL_RegisterSvcHandler+0x34>)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80094e8:	4b06      	ldr	r3, [pc, #24]	@ (8009504 <SVCCTL_RegisterSvcHandler+0x34>)
 80094ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80094ee:	3301      	adds	r3, #1
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	4b04      	ldr	r3, [pc, #16]	@ (8009504 <SVCCTL_RegisterSvcHandler+0x34>)
 80094f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80094f8:	bf00      	nop
}
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	20000098 	.word	0x20000098

08009508 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3301      	adds	r3, #1
 8009514:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009516:	2300      	movs	r3, #0
 8009518:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2bff      	cmp	r3, #255	@ 0xff
 8009520:	d126      	bne.n	8009570 <SVCCTL_UserEvtRx+0x68>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	3302      	adds	r3, #2
 8009526:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b29b      	uxth	r3, r3
 800952e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009532:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009536:	d119      	bne.n	800956c <SVCCTL_UserEvtRx+0x64>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009538:	2300      	movs	r3, #0
 800953a:	757b      	strb	r3, [r7, #21]
 800953c:	e00d      	b.n	800955a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800953e:	7d7b      	ldrb	r3, [r7, #21]
 8009540:	4a1b      	ldr	r2, [pc, #108]	@ (80095b0 <SVCCTL_UserEvtRx+0xa8>)
 8009542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
 800954a:	4603      	mov	r3, r0
 800954c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d109      	bne.n	8009568 <SVCCTL_UserEvtRx+0x60>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009554:	7d7b      	ldrb	r3, [r7, #21]
 8009556:	3301      	adds	r3, #1
 8009558:	757b      	strb	r3, [r7, #21]
 800955a:	4b15      	ldr	r3, [pc, #84]	@ (80095b0 <SVCCTL_UserEvtRx+0xa8>)
 800955c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009560:	7d7a      	ldrb	r2, [r7, #21]
 8009562:	429a      	cmp	r2, r3
 8009564:	d3eb      	bcc.n	800953e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009566:	e002      	b.n	800956e <SVCCTL_UserEvtRx+0x66>
              break;
 8009568:	bf00      	nop
          break;
 800956a:	e000      	b.n	800956e <SVCCTL_UserEvtRx+0x66>

        default:
          break;
 800956c:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800956e:	e000      	b.n	8009572 <SVCCTL_UserEvtRx+0x6a>

    default:
      break;
 8009570:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	2b02      	cmp	r3, #2
 8009576:	d00f      	beq.n	8009598 <SVCCTL_UserEvtRx+0x90>
 8009578:	2b02      	cmp	r3, #2
 800957a:	dc10      	bgt.n	800959e <SVCCTL_UserEvtRx+0x96>
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <SVCCTL_UserEvtRx+0x7e>
 8009580:	2b01      	cmp	r3, #1
 8009582:	d006      	beq.n	8009592 <SVCCTL_UserEvtRx+0x8a>
 8009584:	e00b      	b.n	800959e <SVCCTL_UserEvtRx+0x96>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fc92 	bl	800aeb0 <SVCCTL_App_Notification>
 800958c:	4603      	mov	r3, r0
 800958e:	75bb      	strb	r3, [r7, #22]
      break;
 8009590:	e008      	b.n	80095a4 <SVCCTL_UserEvtRx+0x9c>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009592:	2301      	movs	r3, #1
 8009594:	75bb      	strb	r3, [r7, #22]
      break;
 8009596:	e005      	b.n	80095a4 <SVCCTL_UserEvtRx+0x9c>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009598:	2300      	movs	r3, #0
 800959a:	75bb      	strb	r3, [r7, #22]
      break;
 800959c:	e002      	b.n	80095a4 <SVCCTL_UserEvtRx+0x9c>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800959e:	2301      	movs	r3, #1
 80095a0:	75bb      	strb	r3, [r7, #22]
      break;
 80095a2:	bf00      	nop
  }

  return (return_status);
 80095a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000098 	.word	0x20000098

080095b4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80095bc:	f107 030c 	add.w	r3, r7, #12
 80095c0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	212e      	movs	r1, #46	@ 0x2e
 80095cc:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80095d0:	f000 fae4 	bl	8009b9c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	330b      	adds	r3, #11
 80095d8:	78db      	ldrb	r3, [r3, #3]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3720      	adds	r7, #32
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b088      	sub	sp, #32
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80095ea:	f107 030c 	add.w	r3, r7, #12
 80095ee:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	210f      	movs	r1, #15
 80095fa:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80095fe:	f000 facd 	bl	8009b9c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	330b      	adds	r3, #11
 8009606:	78db      	ldrb	r3, [r3, #3]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009618:	f107 030c 	add.w	r3, r7, #12
 800961c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	2110      	movs	r1, #16
 8009624:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8009628:	f000 fab8 	bl	8009b9c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	330b      	adds	r3, #11
 8009630:	78db      	ldrb	r3, [r3, #3]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800963c:	b480      	push	{r7}
 800963e:	b08b      	sub	sp, #44	@ 0x2c
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009658:	2300      	movs	r3, #0
 800965a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009664:	4b4a      	ldr	r3, [pc, #296]	@ (8009790 <SHCI_GetWirelessFwInfo+0x154>)
 8009666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009668:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800966c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009676:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a44      	ldr	r2, [pc, #272]	@ (8009794 <SHCI_GetWirelessFwInfo+0x158>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d10f      	bne.n	80096a8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	617b      	str	r3, [r7, #20]
 80096a6:	e01a      	b.n	80096de <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80096b0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80096b4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	0e1b      	lsrs	r3, r3, #24
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80096e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ea:	0c1b      	lsrs	r3, r3, #16
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80096f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f4:	0a1b      	lsrs	r3, r3, #8
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80096fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fe:	091b      	lsrs	r3, r3, #4
 8009700:	b2db      	uxtb	r3, r3
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	b2da      	uxtb	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970e:	b2db      	uxtb	r3, r3
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	b2da      	uxtb	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	0e1b      	lsrs	r3, r3, #24
 800971e:	b2da      	uxtb	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	0c1b      	lsrs	r3, r3, #16
 8009728:	b2da      	uxtb	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	b2da      	uxtb	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	b2da      	uxtb	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	b2da      	uxtb	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	0e1b      	lsrs	r3, r3, #24
 800974c:	b2da      	uxtb	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	0c1b      	lsrs	r3, r3, #16
 8009756:	b2da      	uxtb	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	0a1b      	lsrs	r3, r3, #8
 8009760:	b2da      	uxtb	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	0e1b      	lsrs	r3, r3, #24
 800976a:	b2da      	uxtb	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	0c1b      	lsrs	r3, r3, #16
 8009774:	b2da      	uxtb	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	b2da      	uxtb	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	372c      	adds	r7, #44	@ 0x2c
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	58004000 	.word	0x58004000
 8009794:	a94656b9 	.word	0xa94656b9

08009798 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	4a08      	ldr	r2, [pc, #32]	@ (80097c8 <hci_init+0x30>)
 80097a8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80097aa:	4a08      	ldr	r2, [pc, #32]	@ (80097cc <hci_init+0x34>)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80097b0:	4806      	ldr	r0, [pc, #24]	@ (80097cc <hci_init+0x34>)
 80097b2:	f000 f975 	bl	8009aa0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 f8d6 	bl	800996c <TlInit>

  return;
 80097c0:	bf00      	nop
}
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	20000384 	.word	0x20000384
 80097cc:	2000035c 	.word	0x2000035c

080097d0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80097d6:	4822      	ldr	r0, [pc, #136]	@ (8009860 <hci_user_evt_proc+0x90>)
 80097d8:	f000 fd2a 	bl	800a230 <LST_is_empty>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d12b      	bne.n	800983a <hci_user_evt_proc+0x6a>
 80097e2:	4b20      	ldr	r3, [pc, #128]	@ (8009864 <hci_user_evt_proc+0x94>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d027      	beq.n	800983a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80097ea:	f107 030c 	add.w	r3, r7, #12
 80097ee:	4619      	mov	r1, r3
 80097f0:	481b      	ldr	r0, [pc, #108]	@ (8009860 <hci_user_evt_proc+0x90>)
 80097f2:	f000 fdac 	bl	800a34e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80097f6:	4b1c      	ldr	r3, [pc, #112]	@ (8009868 <hci_user_evt_proc+0x98>)
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00c      	beq.n	8009818 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009802:	2301      	movs	r3, #1
 8009804:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009806:	4b18      	ldr	r3, [pc, #96]	@ (8009868 <hci_user_evt_proc+0x98>)
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	1d3a      	adds	r2, r7, #4
 800980c:	4610      	mov	r0, r2
 800980e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009810:	793a      	ldrb	r2, [r7, #4]
 8009812:	4b14      	ldr	r3, [pc, #80]	@ (8009864 <hci_user_evt_proc+0x94>)
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	e002      	b.n	800981e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009818:	4b12      	ldr	r3, [pc, #72]	@ (8009864 <hci_user_evt_proc+0x94>)
 800981a:	2201      	movs	r2, #1
 800981c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800981e:	4b11      	ldr	r3, [pc, #68]	@ (8009864 <hci_user_evt_proc+0x94>)
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d004      	beq.n	8009830 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fc05 	bl	800a038 <TL_MM_EvtDone>
 800982e:	e004      	b.n	800983a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4619      	mov	r1, r3
 8009834:	480a      	ldr	r0, [pc, #40]	@ (8009860 <hci_user_evt_proc+0x90>)
 8009836:	f000 fd1d 	bl	800a274 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800983a:	4809      	ldr	r0, [pc, #36]	@ (8009860 <hci_user_evt_proc+0x90>)
 800983c:	f000 fcf8 	bl	800a230 <LST_is_empty>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d107      	bne.n	8009856 <hci_user_evt_proc+0x86>
 8009846:	4b07      	ldr	r3, [pc, #28]	@ (8009864 <hci_user_evt_proc+0x94>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800984e:	4804      	ldr	r0, [pc, #16]	@ (8009860 <hci_user_evt_proc+0x90>)
 8009850:	f001 fd46 	bl	800b2e0 <hci_notify_asynch_evt>
  }


  return;
 8009854:	bf00      	nop
 8009856:	bf00      	nop
}
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	200000d4 	.word	0x200000d4
 8009864:	200000e0 	.word	0x200000e0
 8009868:	2000035c 	.word	0x2000035c

0800986c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009878:	2000      	movs	r0, #0
 800987a:	f000 f8cd 	bl	8009a18 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800987e:	2300      	movs	r3, #0
 8009880:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	885b      	ldrh	r3, [r3, #2]
 8009886:	b21b      	sxth	r3, r3
 8009888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800988c:	b21a      	sxth	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	b21b      	sxth	r3, r3
 8009894:	029b      	lsls	r3, r3, #10
 8009896:	b21b      	sxth	r3, r3
 8009898:	4313      	orrs	r3, r2
 800989a:	b21b      	sxth	r3, r3
 800989c:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	b2d9      	uxtb	r1, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	689a      	ldr	r2, [r3, #8]
 80098a8:	8bbb      	ldrh	r3, [r7, #28]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 f88e 	bl	80099cc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80098b0:	e04e      	b.n	8009950 <hci_send_req+0xe4>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80098b2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80098b6:	f001 fd2a 	bl	800b30e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80098ba:	e043      	b.n	8009944 <hci_send_req+0xd8>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80098bc:	f107 030c 	add.w	r3, r7, #12
 80098c0:	4619      	mov	r1, r3
 80098c2:	4829      	ldr	r0, [pc, #164]	@ (8009968 <hci_send_req+0xfc>)
 80098c4:	f000 fd43 	bl	800a34e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	7a5b      	ldrb	r3, [r3, #9]
 80098cc:	2b0f      	cmp	r3, #15
 80098ce:	d114      	bne.n	80098fa <hci_send_req+0x8e>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	330b      	adds	r3, #11
 80098d4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	885b      	ldrh	r3, [r3, #2]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	8bba      	ldrh	r2, [r7, #28]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d104      	bne.n	80098ec <hci_send_req+0x80>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	7812      	ldrb	r2, [r2, #0]
 80098ea:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	785b      	ldrb	r3, [r3, #1]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d027      	beq.n	8009944 <hci_send_req+0xd8>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80098f4:	2301      	movs	r3, #1
 80098f6:	77fb      	strb	r3, [r7, #31]
 80098f8:	e024      	b.n	8009944 <hci_send_req+0xd8>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	330b      	adds	r3, #11
 80098fe:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009906:	b29b      	uxth	r3, r3
 8009908:	8bba      	ldrh	r2, [r7, #28]
 800990a:	429a      	cmp	r2, r3
 800990c:	d114      	bne.n	8009938 <hci_send_req+0xcc>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	7a9b      	ldrb	r3, [r3, #10]
 8009912:	3b03      	subs	r3, #3
 8009914:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695a      	ldr	r2, [r3, #20]
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	429a      	cmp	r2, r3
 800991e:	bfa8      	it	ge
 8009920:	461a      	movge	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6918      	ldr	r0, [r3, #16]
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	1cd9      	adds	r1, r3, #3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	461a      	mov	r2, r3
 8009934:	f005 fcfb 	bl	800f32e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <hci_send_req+0xd8>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009940:	2301      	movs	r3, #1
 8009942:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009944:	4808      	ldr	r0, [pc, #32]	@ (8009968 <hci_send_req+0xfc>)
 8009946:	f000 fc73 	bl	800a230 <LST_is_empty>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0b5      	beq.n	80098bc <hci_send_req+0x50>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009950:	7ffb      	ldrb	r3, [r7, #31]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0ad      	beq.n	80098b2 <hci_send_req+0x46>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009956:	2001      	movs	r0, #1
 8009958:	f000 f85e 	bl	8009a18 <NotifyCmdStatus>

  return 0;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	2000037c 	.word	0x2000037c

0800996c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009974:	480f      	ldr	r0, [pc, #60]	@ (80099b4 <TlInit+0x48>)
 8009976:	f000 fc4b 	bl	800a210 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800997a:	4a0f      	ldr	r2, [pc, #60]	@ (80099b8 <TlInit+0x4c>)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009980:	480e      	ldr	r0, [pc, #56]	@ (80099bc <TlInit+0x50>)
 8009982:	f000 fc45 	bl	800a210 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009986:	4b0e      	ldr	r3, [pc, #56]	@ (80099c0 <TlInit+0x54>)
 8009988:	2201      	movs	r2, #1
 800998a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800998c:	4b0d      	ldr	r3, [pc, #52]	@ (80099c4 <TlInit+0x58>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00a      	beq.n	80099aa <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009998:	4b0b      	ldr	r3, [pc, #44]	@ (80099c8 <TlInit+0x5c>)
 800999a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800999c:	4b09      	ldr	r3, [pc, #36]	@ (80099c4 <TlInit+0x58>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f107 0208 	add.w	r2, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
  }

  return;
 80099a8:	bf00      	nop
 80099aa:	bf00      	nop
}
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2000037c 	.word	0x2000037c
 80099b8:	200000dc 	.word	0x200000dc
 80099bc:	200000d4 	.word	0x200000d4
 80099c0:	200000e0 	.word	0x200000e0
 80099c4:	2000035c 	.word	0x2000035c
 80099c8:	08009a59 	.word	0x08009a59

080099cc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	603a      	str	r2, [r7, #0]
 80099d6:	80fb      	strh	r3, [r7, #6]
 80099d8:	460b      	mov	r3, r1
 80099da:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80099dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009a10 <SendCmd+0x44>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	88fa      	ldrh	r2, [r7, #6]
 80099e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80099e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009a10 <SendCmd+0x44>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	797a      	ldrb	r2, [r7, #5]
 80099ec:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80099ee:	4b08      	ldr	r3, [pc, #32]	@ (8009a10 <SendCmd+0x44>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	330c      	adds	r3, #12
 80099f4:	797a      	ldrb	r2, [r7, #5]
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f005 fc98 	bl	800f32e <memcpy>

  hciContext.io.Send(0,0);
 80099fe:	4b05      	ldr	r3, [pc, #20]	@ (8009a14 <SendCmd+0x48>)
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	2100      	movs	r1, #0
 8009a04:	2000      	movs	r0, #0
 8009a06:	4798      	blx	r3

  return;
 8009a08:	bf00      	nop
}
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	200000dc 	.word	0x200000dc
 8009a14:	2000035c 	.word	0x2000035c

08009a18 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d108      	bne.n	8009a3a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009a28:	4b0a      	ldr	r3, [pc, #40]	@ (8009a54 <NotifyCmdStatus+0x3c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00d      	beq.n	8009a4c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009a30:	4b08      	ldr	r3, [pc, #32]	@ (8009a54 <NotifyCmdStatus+0x3c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2000      	movs	r0, #0
 8009a36:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009a38:	e008      	b.n	8009a4c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009a3a:	4b06      	ldr	r3, [pc, #24]	@ (8009a54 <NotifyCmdStatus+0x3c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d004      	beq.n	8009a4c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009a42:	4b04      	ldr	r3, [pc, #16]	@ (8009a54 <NotifyCmdStatus+0x3c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2001      	movs	r0, #1
 8009a48:	4798      	blx	r3
  return;
 8009a4a:	bf00      	nop
 8009a4c:	bf00      	nop
}
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20000384 	.word	0x20000384

08009a58 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7a5b      	ldrb	r3, [r3, #9]
 8009a64:	2b0f      	cmp	r3, #15
 8009a66:	d003      	beq.n	8009a70 <TlEvtReceived+0x18>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7a5b      	ldrb	r3, [r3, #9]
 8009a6c:	2b0e      	cmp	r3, #14
 8009a6e:	d107      	bne.n	8009a80 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	4809      	ldr	r0, [pc, #36]	@ (8009a98 <TlEvtReceived+0x40>)
 8009a74:	f000 fc24 	bl	800a2c0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009a78:	2000      	movs	r0, #0
 8009a7a:	f001 fc3d 	bl	800b2f8 <hci_cmd_resp_release>
 8009a7e:	e006      	b.n	8009a8e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	4806      	ldr	r0, [pc, #24]	@ (8009a9c <TlEvtReceived+0x44>)
 8009a84:	f000 fc1c 	bl	800a2c0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009a88:	4804      	ldr	r0, [pc, #16]	@ (8009a9c <TlEvtReceived+0x44>)
 8009a8a:	f001 fc29 	bl	800b2e0 <hci_notify_asynch_evt>
  }

  return;
 8009a8e:	bf00      	nop
}
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	2000037c 	.word	0x2000037c
 8009a9c:	200000d4 	.word	0x200000d4

08009aa0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a05      	ldr	r2, [pc, #20]	@ (8009ac0 <hci_register_io_bus+0x20>)
 8009aac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a04      	ldr	r2, [pc, #16]	@ (8009ac4 <hci_register_io_bus+0x24>)
 8009ab2:	611a      	str	r2, [r3, #16]

  return;
 8009ab4:	bf00      	nop
}
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	08009db1 	.word	0x08009db1
 8009ac4:	08009e19 	.word	0x08009e19

08009ac8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	4a08      	ldr	r2, [pc, #32]	@ (8009af8 <shci_init+0x30>)
 8009ad8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009ada:	4a08      	ldr	r2, [pc, #32]	@ (8009afc <shci_init+0x34>)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009ae0:	4806      	ldr	r0, [pc, #24]	@ (8009afc <shci_init+0x34>)
 8009ae2:	f000 f911 	bl	8009d08 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 f894 	bl	8009c18 <TlInit>

  return;
 8009af0:	bf00      	nop
}
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	200003a8 	.word	0x200003a8
 8009afc:	20000388 	.word	0x20000388

08009b00 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009b06:	4822      	ldr	r0, [pc, #136]	@ (8009b90 <shci_user_evt_proc+0x90>)
 8009b08:	f000 fb92 	bl	800a230 <LST_is_empty>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d12b      	bne.n	8009b6a <shci_user_evt_proc+0x6a>
 8009b12:	4b20      	ldr	r3, [pc, #128]	@ (8009b94 <shci_user_evt_proc+0x94>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d027      	beq.n	8009b6a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009b1a:	f107 030c 	add.w	r3, r7, #12
 8009b1e:	4619      	mov	r1, r3
 8009b20:	481b      	ldr	r0, [pc, #108]	@ (8009b90 <shci_user_evt_proc+0x90>)
 8009b22:	f000 fc14 	bl	800a34e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009b26:	4b1c      	ldr	r3, [pc, #112]	@ (8009b98 <shci_user_evt_proc+0x98>)
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00c      	beq.n	8009b48 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009b32:	2301      	movs	r3, #1
 8009b34:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009b36:	4b18      	ldr	r3, [pc, #96]	@ (8009b98 <shci_user_evt_proc+0x98>)
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	1d3a      	adds	r2, r7, #4
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009b40:	793a      	ldrb	r2, [r7, #4]
 8009b42:	4b14      	ldr	r3, [pc, #80]	@ (8009b94 <shci_user_evt_proc+0x94>)
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	e002      	b.n	8009b4e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009b48:	4b12      	ldr	r3, [pc, #72]	@ (8009b94 <shci_user_evt_proc+0x94>)
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009b4e:	4b11      	ldr	r3, [pc, #68]	@ (8009b94 <shci_user_evt_proc+0x94>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d004      	beq.n	8009b60 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 fa6d 	bl	800a038 <TL_MM_EvtDone>
 8009b5e:	e004      	b.n	8009b6a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4619      	mov	r1, r3
 8009b64:	480a      	ldr	r0, [pc, #40]	@ (8009b90 <shci_user_evt_proc+0x90>)
 8009b66:	f000 fb85 	bl	800a274 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009b6a:	4809      	ldr	r0, [pc, #36]	@ (8009b90 <shci_user_evt_proc+0x90>)
 8009b6c:	f000 fb60 	bl	800a230 <LST_is_empty>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d107      	bne.n	8009b86 <shci_user_evt_proc+0x86>
 8009b76:	4b07      	ldr	r3, [pc, #28]	@ (8009b94 <shci_user_evt_proc+0x94>)
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009b7e:	4804      	ldr	r0, [pc, #16]	@ (8009b90 <shci_user_evt_proc+0x90>)
 8009b80:	f7f7 fac3 	bl	800110a <shci_notify_asynch_evt>
  }


  return;
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
}
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	200000e4 	.word	0x200000e4
 8009b94:	200000f4 	.word	0x200000f4
 8009b98:	20000388 	.word	0x20000388

08009b9c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60ba      	str	r2, [r7, #8]
 8009ba4:	607b      	str	r3, [r7, #4]
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	81fb      	strh	r3, [r7, #14]
 8009baa:	460b      	mov	r3, r1
 8009bac:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009bae:	2000      	movs	r0, #0
 8009bb0:	f000 f864 	bl	8009c7c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009bb4:	4b16      	ldr	r3, [pc, #88]	@ (8009c10 <shci_send+0x74>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	89fa      	ldrh	r2, [r7, #14]
 8009bba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009bbe:	4b14      	ldr	r3, [pc, #80]	@ (8009c10 <shci_send+0x74>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	7b7a      	ldrb	r2, [r7, #13]
 8009bc4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009bc6:	4b12      	ldr	r3, [pc, #72]	@ (8009c10 <shci_send+0x74>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	330c      	adds	r3, #12
 8009bcc:	7b7a      	ldrb	r2, [r7, #13]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f005 fbac 	bl	800f32e <memcpy>

  shciContext.io.Send(0,0);
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c14 <shci_send+0x78>)
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	2100      	movs	r1, #0
 8009bdc:	2000      	movs	r0, #0
 8009bde:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009be0:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8009be4:	f7f7 faa9 	bl	800113a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f103 0008 	add.w	r0, r3, #8
 8009bee:	4b08      	ldr	r3, [pc, #32]	@ (8009c10 <shci_send+0x74>)
 8009bf0:	6819      	ldr	r1, [r3, #0]
 8009bf2:	4b07      	ldr	r3, [pc, #28]	@ (8009c10 <shci_send+0x74>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	789b      	ldrb	r3, [r3, #2]
 8009bf8:	3303      	adds	r3, #3
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f005 fb97 	bl	800f32e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009c00:	2001      	movs	r0, #1
 8009c02:	f000 f83b 	bl	8009c7c <Cmd_SetStatus>

  return;
 8009c06:	bf00      	nop
}
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	200000f0 	.word	0x200000f0
 8009c14:	20000388 	.word	0x20000388

08009c18 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009c20:	4a10      	ldr	r2, [pc, #64]	@ (8009c64 <TlInit+0x4c>)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009c26:	4810      	ldr	r0, [pc, #64]	@ (8009c68 <TlInit+0x50>)
 8009c28:	f000 faf2 	bl	800a210 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	f000 f825 	bl	8009c7c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009c32:	4b0e      	ldr	r3, [pc, #56]	@ (8009c6c <TlInit+0x54>)
 8009c34:	2201      	movs	r2, #1
 8009c36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009c38:	4b0d      	ldr	r3, [pc, #52]	@ (8009c70 <TlInit+0x58>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00c      	beq.n	8009c5a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009c44:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <TlInit+0x5c>)
 8009c46:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009c48:	4b0b      	ldr	r3, [pc, #44]	@ (8009c78 <TlInit+0x60>)
 8009c4a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009c4c:	4b08      	ldr	r3, [pc, #32]	@ (8009c70 <TlInit+0x58>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f107 020c 	add.w	r2, r7, #12
 8009c54:	4610      	mov	r0, r2
 8009c56:	4798      	blx	r3
  }

  return;
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
}
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	200000f0 	.word	0x200000f0
 8009c68:	200000e4 	.word	0x200000e4
 8009c6c:	200000f4 	.word	0x200000f4
 8009c70:	20000388 	.word	0x20000388
 8009c74:	08009ccd 	.word	0x08009ccd
 8009c78:	08009ce5 	.word	0x08009ce5

08009c7c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10b      	bne.n	8009ca4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009cc4 <Cmd_SetStatus+0x48>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d003      	beq.n	8009c9c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009c94:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <Cmd_SetStatus+0x48>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2000      	movs	r0, #0
 8009c9a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc8 <Cmd_SetStatus+0x4c>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009ca2:	e00b      	b.n	8009cbc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009ca4:	4b08      	ldr	r3, [pc, #32]	@ (8009cc8 <Cmd_SetStatus+0x4c>)
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009caa:	4b06      	ldr	r3, [pc, #24]	@ (8009cc4 <Cmd_SetStatus+0x48>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d004      	beq.n	8009cbc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009cb2:	4b04      	ldr	r3, [pc, #16]	@ (8009cc4 <Cmd_SetStatus+0x48>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2001      	movs	r0, #1
 8009cb8:	4798      	blx	r3
  return;
 8009cba:	bf00      	nop
 8009cbc:	bf00      	nop
}
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	200003a8 	.word	0x200003a8
 8009cc8:	200000ec 	.word	0x200000ec

08009ccc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	f7f7 fa25 	bl	8001124 <shci_cmd_resp_release>

  return;
 8009cda:	bf00      	nop
}
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	4805      	ldr	r0, [pc, #20]	@ (8009d04 <TlUserEvtReceived+0x20>)
 8009cf0:	f000 fae6 	bl	800a2c0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009cf4:	4803      	ldr	r0, [pc, #12]	@ (8009d04 <TlUserEvtReceived+0x20>)
 8009cf6:	f7f7 fa08 	bl	800110a <shci_notify_asynch_evt>

  return;
 8009cfa:	bf00      	nop
}
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	200000e4 	.word	0x200000e4

08009d08 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a05      	ldr	r2, [pc, #20]	@ (8009d28 <shci_register_io_bus+0x20>)
 8009d14:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a04      	ldr	r2, [pc, #16]	@ (8009d2c <shci_register_io_bus+0x24>)
 8009d1a:	611a      	str	r2, [r3, #16]

  return;
 8009d1c:	bf00      	nop
}
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	08009ec5 	.word	0x08009ec5
 8009d2c:	08009f19 	.word	0x08009f19

08009d30 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009d34:	f004 fcf2 	bl	800e71c <HW_IPCC_Enable>

  return;
 8009d38:	bf00      	nop
}
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <TL_Init>:


void TL_Init( void )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009d40:	4b10      	ldr	r3, [pc, #64]	@ (8009d84 <TL_Init+0x48>)
 8009d42:	4a11      	ldr	r2, [pc, #68]	@ (8009d88 <TL_Init+0x4c>)
 8009d44:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009d46:	4b0f      	ldr	r3, [pc, #60]	@ (8009d84 <TL_Init+0x48>)
 8009d48:	4a10      	ldr	r2, [pc, #64]	@ (8009d8c <TL_Init+0x50>)
 8009d4a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d84 <TL_Init+0x48>)
 8009d4e:	4a10      	ldr	r2, [pc, #64]	@ (8009d90 <TL_Init+0x54>)
 8009d50:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009d52:	4b0c      	ldr	r3, [pc, #48]	@ (8009d84 <TL_Init+0x48>)
 8009d54:	4a0f      	ldr	r2, [pc, #60]	@ (8009d94 <TL_Init+0x58>)
 8009d56:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009d58:	4b0a      	ldr	r3, [pc, #40]	@ (8009d84 <TL_Init+0x48>)
 8009d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8009d98 <TL_Init+0x5c>)
 8009d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009d5e:	4b09      	ldr	r3, [pc, #36]	@ (8009d84 <TL_Init+0x48>)
 8009d60:	4a0e      	ldr	r2, [pc, #56]	@ (8009d9c <TL_Init+0x60>)
 8009d62:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009d64:	4b07      	ldr	r3, [pc, #28]	@ (8009d84 <TL_Init+0x48>)
 8009d66:	4a0e      	ldr	r2, [pc, #56]	@ (8009da0 <TL_Init+0x64>)
 8009d68:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009d6a:	4b06      	ldr	r3, [pc, #24]	@ (8009d84 <TL_Init+0x48>)
 8009d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8009da4 <TL_Init+0x68>)
 8009d6e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009d70:	4b04      	ldr	r3, [pc, #16]	@ (8009d84 <TL_Init+0x48>)
 8009d72:	4a0d      	ldr	r2, [pc, #52]	@ (8009da8 <TL_Init+0x6c>)
 8009d74:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009d76:	4b03      	ldr	r3, [pc, #12]	@ (8009d84 <TL_Init+0x48>)
 8009d78:	4a0c      	ldr	r2, [pc, #48]	@ (8009dac <TL_Init+0x70>)
 8009d7a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009d7c:	f004 fce2 	bl	800e744 <HW_IPCC_Init>

  return;
 8009d80:	bf00      	nop
}
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20030000 	.word	0x20030000
 8009d88:	20030028 	.word	0x20030028
 8009d8c:	20030048 	.word	0x20030048
 8009d90:	20030058 	.word	0x20030058
 8009d94:	20030068 	.word	0x20030068
 8009d98:	20030070 	.word	0x20030070
 8009d9c:	20030078 	.word	0x20030078
 8009da0:	20030080 	.word	0x20030080
 8009da4:	2003009c 	.word	0x2003009c
 8009da8:	200300a0 	.word	0x200300a0
 8009dac:	200300ac 	.word	0x200300ac

08009db0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009dbc:	4811      	ldr	r0, [pc, #68]	@ (8009e04 <TL_BLE_Init+0x54>)
 8009dbe:	f000 fa27 	bl	800a210 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009dc2:	4b11      	ldr	r3, [pc, #68]	@ (8009e08 <TL_BLE_Init+0x58>)
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68da      	ldr	r2, [r3, #12]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4a0c      	ldr	r2, [pc, #48]	@ (8009e0c <TL_BLE_Init+0x5c>)
 8009ddc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	4a08      	ldr	r2, [pc, #32]	@ (8009e04 <TL_BLE_Init+0x54>)
 8009de2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009de4:	f004 fcc4 	bl	800e770 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a08      	ldr	r2, [pc, #32]	@ (8009e10 <TL_BLE_Init+0x60>)
 8009dee:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	4a07      	ldr	r2, [pc, #28]	@ (8009e14 <TL_BLE_Init+0x64>)
 8009df6:	6013      	str	r3, [r2, #0]

  return 0;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	200300c8 	.word	0x200300c8
 8009e08:	20030000 	.word	0x20030000
 8009e0c:	20030a58 	.word	0x20030a58
 8009e10:	200003b4 	.word	0x200003b4
 8009e14:	200003b8 	.word	0x200003b8

08009e18 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009e24:	4b09      	ldr	r3, [pc, #36]	@ (8009e4c <TL_BLE_SendCmd+0x34>)
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009e2e:	4b07      	ldr	r3, [pc, #28]	@ (8009e4c <TL_BLE_SendCmd+0x34>)
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4619      	mov	r1, r3
 8009e36:	2001      	movs	r0, #1
 8009e38:	f000 f96c 	bl	800a114 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009e3c:	f004 fca2 	bl	800e784 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20030000 	.word	0x20030000

08009e50 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009e56:	e01c      	b.n	8009e92 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009e58:	1d3b      	adds	r3, r7, #4
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4812      	ldr	r0, [pc, #72]	@ (8009ea8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009e5e:	f000 fa76 	bl	800a34e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	7a5b      	ldrb	r3, [r3, #9]
 8009e66:	2b0f      	cmp	r3, #15
 8009e68:	d003      	beq.n	8009e72 <HW_IPCC_BLE_RxEvtNot+0x22>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	7a5b      	ldrb	r3, [r3, #9]
 8009e6e:	2b0e      	cmp	r3, #14
 8009e70:	d105      	bne.n	8009e7e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4619      	mov	r1, r3
 8009e76:	2002      	movs	r0, #2
 8009e78:	f000 f94c 	bl	800a114 <OutputDbgTrace>
 8009e7c:	e004      	b.n	8009e88 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4619      	mov	r1, r3
 8009e82:	2003      	movs	r0, #3
 8009e84:	f000 f946 	bl	800a114 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009e88:	4b08      	ldr	r3, [pc, #32]	@ (8009eac <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	4610      	mov	r0, r2
 8009e90:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009e92:	4805      	ldr	r0, [pc, #20]	@ (8009ea8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009e94:	f000 f9cc 	bl	800a230 <LST_is_empty>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0dc      	beq.n	8009e58 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009e9e:	bf00      	nop
}
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	200300c8 	.word	0x200300c8
 8009eac:	200003b4 	.word	0x200003b4

08009eb0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009eb4:	4b02      	ldr	r3, [pc, #8]	@ (8009ec0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4798      	blx	r3

  return;
 8009eba:	bf00      	nop
}
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	200003b8 	.word	0x200003b8

08009ec4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009ed0:	480d      	ldr	r0, [pc, #52]	@ (8009f08 <TL_SYS_Init+0x44>)
 8009ed2:	f000 f99d 	bl	800a210 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8009f0c <TL_SYS_Init+0x48>)
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	689a      	ldr	r2, [r3, #8]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	4a08      	ldr	r2, [pc, #32]	@ (8009f08 <TL_SYS_Init+0x44>)
 8009ee8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009eea:	f004 fc6d 	bl	800e7c8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a07      	ldr	r2, [pc, #28]	@ (8009f10 <TL_SYS_Init+0x4c>)
 8009ef4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	4a06      	ldr	r2, [pc, #24]	@ (8009f14 <TL_SYS_Init+0x50>)
 8009efc:	6013      	str	r3, [r2, #0]

  return 0;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	200300d0 	.word	0x200300d0
 8009f0c:	20030000 	.word	0x20030000
 8009f10:	200003bc 	.word	0x200003bc
 8009f14:	200003c0 	.word	0x200003c0

08009f18 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009f24:	4b09      	ldr	r3, [pc, #36]	@ (8009f4c <TL_SYS_SendCmd+0x34>)
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2210      	movs	r2, #16
 8009f2c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009f2e:	4b07      	ldr	r3, [pc, #28]	@ (8009f4c <TL_SYS_SendCmd+0x34>)
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4619      	mov	r1, r3
 8009f36:	2004      	movs	r0, #4
 8009f38:	f000 f8ec 	bl	800a114 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009f3c:	f004 fc4e 	bl	800e7dc <HW_IPCC_SYS_SendCmd>

  return 0;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20030000 	.word	0x20030000

08009f50 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009f54:	4b07      	ldr	r3, [pc, #28]	@ (8009f74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	2005      	movs	r0, #5
 8009f5e:	f000 f8d9 	bl	800a114 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009f62:	4b05      	ldr	r3, [pc, #20]	@ (8009f78 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a03      	ldr	r2, [pc, #12]	@ (8009f74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009f68:	68d2      	ldr	r2, [r2, #12]
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3

  return;
 8009f70:	bf00      	nop
}
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20030000 	.word	0x20030000
 8009f78:	200003bc 	.word	0x200003bc

08009f7c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009f82:	e00e      	b.n	8009fa2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009f84:	1d3b      	adds	r3, r7, #4
 8009f86:	4619      	mov	r1, r3
 8009f88:	480b      	ldr	r0, [pc, #44]	@ (8009fb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009f8a:	f000 f9e0 	bl	800a34e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4619      	mov	r1, r3
 8009f92:	2006      	movs	r0, #6
 8009f94:	f000 f8be 	bl	800a114 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009f98:	4b08      	ldr	r3, [pc, #32]	@ (8009fbc <HW_IPCC_SYS_EvtNot+0x40>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009fa2:	4805      	ldr	r0, [pc, #20]	@ (8009fb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009fa4:	f000 f944 	bl	800a230 <LST_is_empty>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d0ea      	beq.n	8009f84 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009fae:	bf00      	nop
}
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	200300d0 	.word	0x200300d0
 8009fbc:	200003c0 	.word	0x200003c0

08009fc0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009fc8:	4817      	ldr	r0, [pc, #92]	@ (800a028 <TL_MM_Init+0x68>)
 8009fca:	f000 f921 	bl	800a210 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009fce:	4817      	ldr	r0, [pc, #92]	@ (800a02c <TL_MM_Init+0x6c>)
 8009fd0:	f000 f91e 	bl	800a210 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009fd4:	4b16      	ldr	r3, [pc, #88]	@ (800a030 <TL_MM_Init+0x70>)
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	4a16      	ldr	r2, [pc, #88]	@ (800a034 <TL_MM_Init+0x74>)
 8009fda:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009fdc:	4b15      	ldr	r3, [pc, #84]	@ (800a034 <TL_MM_Init+0x74>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	6892      	ldr	r2, [r2, #8]
 8009fe4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009fe6:	4b13      	ldr	r3, [pc, #76]	@ (800a034 <TL_MM_Init+0x74>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	68d2      	ldr	r2, [r2, #12]
 8009fee:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009ff0:	4b10      	ldr	r3, [pc, #64]	@ (800a034 <TL_MM_Init+0x74>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a0c      	ldr	r2, [pc, #48]	@ (800a028 <TL_MM_Init+0x68>)
 8009ff6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009ff8:	4b0e      	ldr	r3, [pc, #56]	@ (800a034 <TL_MM_Init+0x74>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	6812      	ldr	r2, [r2, #0]
 800a000:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a002:	4b0c      	ldr	r3, [pc, #48]	@ (800a034 <TL_MM_Init+0x74>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	6852      	ldr	r2, [r2, #4]
 800a00a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a00c:	4b09      	ldr	r3, [pc, #36]	@ (800a034 <TL_MM_Init+0x74>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	6912      	ldr	r2, [r2, #16]
 800a014:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a016:	4b07      	ldr	r3, [pc, #28]	@ (800a034 <TL_MM_Init+0x74>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6952      	ldr	r2, [r2, #20]
 800a01e:	619a      	str	r2, [r3, #24]

  return;
 800a020:	bf00      	nop
}
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	200300b8 	.word	0x200300b8
 800a02c:	200003ac 	.word	0x200003ac
 800a030:	20030000 	.word	0x20030000
 800a034:	200003c4 	.word	0x200003c4

0800a038 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	4807      	ldr	r0, [pc, #28]	@ (800a060 <TL_MM_EvtDone+0x28>)
 800a044:	f000 f93c 	bl	800a2c0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	2000      	movs	r0, #0
 800a04c:	f000 f862 	bl	800a114 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a050:	4804      	ldr	r0, [pc, #16]	@ (800a064 <TL_MM_EvtDone+0x2c>)
 800a052:	f004 fbe9 	bl	800e828 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a056:	bf00      	nop
}
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200003ac 	.word	0x200003ac
 800a064:	0800a069 	.word	0x0800a069

0800a068 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a06e:	e00c      	b.n	800a08a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a070:	1d3b      	adds	r3, r7, #4
 800a072:	4619      	mov	r1, r3
 800a074:	480a      	ldr	r0, [pc, #40]	@ (800a0a0 <SendFreeBuf+0x38>)
 800a076:	f000 f96a 	bl	800a34e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a07a:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a4 <SendFreeBuf+0x3c>)
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	4611      	mov	r1, r2
 800a084:	4618      	mov	r0, r3
 800a086:	f000 f91b 	bl	800a2c0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a08a:	4805      	ldr	r0, [pc, #20]	@ (800a0a0 <SendFreeBuf+0x38>)
 800a08c:	f000 f8d0 	bl	800a230 <LST_is_empty>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0ec      	beq.n	800a070 <SendFreeBuf+0x8>
  }

  return;
 800a096:	bf00      	nop
}
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	200003ac 	.word	0x200003ac
 800a0a4:	20030000 	.word	0x20030000

0800a0a8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a0ac:	4805      	ldr	r0, [pc, #20]	@ (800a0c4 <TL_TRACES_Init+0x1c>)
 800a0ae:	f000 f8af 	bl	800a210 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a0b2:	4b05      	ldr	r3, [pc, #20]	@ (800a0c8 <TL_TRACES_Init+0x20>)
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	4a03      	ldr	r2, [pc, #12]	@ (800a0c4 <TL_TRACES_Init+0x1c>)
 800a0b8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a0ba:	f004 fbeb 	bl	800e894 <HW_IPCC_TRACES_Init>

  return;
 800a0be:	bf00      	nop
}
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	200300c0 	.word	0x200300c0
 800a0c8:	20030000 	.word	0x20030000

0800a0cc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a0d2:	e008      	b.n	800a0e6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a0d4:	1d3b      	adds	r3, r7, #4
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4808      	ldr	r0, [pc, #32]	@ (800a0fc <HW_IPCC_TRACES_EvtNot+0x30>)
 800a0da:	f000 f938 	bl	800a34e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 f80d 	bl	800a100 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a0e6:	4805      	ldr	r0, [pc, #20]	@ (800a0fc <HW_IPCC_TRACES_EvtNot+0x30>)
 800a0e8:	f000 f8a2 	bl	800a230 <LST_is_empty>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d0f0      	beq.n	800a0d4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a0f2:	bf00      	nop
}
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	200300c0 	.word	0x200300c0

0800a100 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	2b06      	cmp	r3, #6
 800a124:	d845      	bhi.n	800a1b2 <OutputDbgTrace+0x9e>
 800a126:	a201      	add	r2, pc, #4	@ (adr r2, 800a12c <OutputDbgTrace+0x18>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a149 	.word	0x0800a149
 800a130:	0800a16d 	.word	0x0800a16d
 800a134:	0800a173 	.word	0x0800a173
 800a138:	0800a187 	.word	0x0800a187
 800a13c:	0800a193 	.word	0x0800a193
 800a140:	0800a199 	.word	0x0800a199
 800a144:	0800a1a7 	.word	0x0800a1a7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	7a5b      	ldrb	r3, [r3, #9]
 800a150:	2bff      	cmp	r3, #255	@ 0xff
 800a152:	d005      	beq.n	800a160 <OutputDbgTrace+0x4c>
 800a154:	2bff      	cmp	r3, #255	@ 0xff
 800a156:	dc05      	bgt.n	800a164 <OutputDbgTrace+0x50>
 800a158:	2b0e      	cmp	r3, #14
 800a15a:	d005      	beq.n	800a168 <OutputDbgTrace+0x54>
 800a15c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a15e:	e001      	b.n	800a164 <OutputDbgTrace+0x50>
          break;
 800a160:	bf00      	nop
 800a162:	e027      	b.n	800a1b4 <OutputDbgTrace+0xa0>
          break;
 800a164:	bf00      	nop
 800a166:	e025      	b.n	800a1b4 <OutputDbgTrace+0xa0>
          break;
 800a168:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a16a:	e023      	b.n	800a1b4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a170:	e020      	b.n	800a1b4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	7a5b      	ldrb	r3, [r3, #9]
 800a17a:	2b0e      	cmp	r3, #14
 800a17c:	d001      	beq.n	800a182 <OutputDbgTrace+0x6e>
 800a17e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a180:	e000      	b.n	800a184 <OutputDbgTrace+0x70>
          break;
 800a182:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a184:	e016      	b.n	800a1b4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	7a5b      	ldrb	r3, [r3, #9]
 800a18e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a190:	e010      	b.n	800a1b4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a196:	e00d      	b.n	800a1b4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	7a5b      	ldrb	r3, [r3, #9]
 800a1a0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a1a2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a1a4:	e006      	b.n	800a1b4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	7a5b      	ldrb	r3, [r3, #9]
 800a1ae:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a1b0:	e000      	b.n	800a1b4 <OutputDbgTrace+0xa0>

    default:
      break;
 800a1b2:	bf00      	nop
  }

  return;
 800a1b4:	bf00      	nop
}
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a208 <OTP_Read+0x48>)
 800a1cc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a1ce:	e002      	b.n	800a1d6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3b08      	subs	r3, #8
 800a1d4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3307      	adds	r3, #7
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	79fa      	ldrb	r2, [r7, #7]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d003      	beq.n	800a1ea <OTP_Read+0x2a>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4a09      	ldr	r2, [pc, #36]	@ (800a20c <OTP_Read+0x4c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d1f2      	bne.n	800a1d0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3307      	adds	r3, #7
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	79fa      	ldrb	r2, [r7, #7]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d001      	beq.n	800a1fa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	1fff73f8 	.word	0x1fff73f8
 800a20c:	1fff7000 	.word	0x1fff7000

0800a210 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	605a      	str	r2, [r3, #4]
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a238:	f3ef 8310 	mrs	r3, PRIMASK
 800a23c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a23e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a242:	b672      	cpsid	i
}
 800a244:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d102      	bne.n	800a256 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a250:	2301      	movs	r3, #1
 800a252:	75fb      	strb	r3, [r7, #23]
 800a254:	e001      	b.n	800a25a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a256:	2300      	movs	r3, #0
 800a258:	75fb      	strb	r3, [r7, #23]
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	f383 8810 	msr	PRIMASK, r3
}
 800a264:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a266:	7dfb      	ldrb	r3, [r7, #23]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	371c      	adds	r7, #28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a27e:	f3ef 8310 	mrs	r3, PRIMASK
 800a282:	60fb      	str	r3, [r7, #12]
  return(result);
 800a284:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a288:	b672      	cpsid	i
}
 800a28a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	605a      	str	r2, [r3, #4]
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f383 8810 	msr	PRIMASK, r3
}
 800a2b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2b4:	bf00      	nop
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2d4:	b672      	cpsid	i
}
 800a2d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f383 8810 	msr	PRIMASK, r3
}
 800a2fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a300:	bf00      	nop
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a314:	f3ef 8310 	mrs	r3, PRIMASK
 800a318:	60fb      	str	r3, [r7, #12]
  return(result);
 800a31a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a31c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a31e:	b672      	cpsid	i
}
 800a320:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	6812      	ldr	r2, [r2, #0]
 800a32a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	6852      	ldr	r2, [r2, #4]
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f383 8810 	msr	PRIMASK, r3
}
 800a340:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a342:	bf00      	nop
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b086      	sub	sp, #24
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a358:	f3ef 8310 	mrs	r3, PRIMASK
 800a35c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a35e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a362:	b672      	cpsid	i
}
 800a364:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff ffca 	bl	800a30c <LST_remove_node>
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f383 8810 	msr	PRIMASK, r3
}
 800a382:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a384:	bf00      	nop
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <Sensor_Init>:
uint8_t dataArrayForBluetooth[240]={0};
uint32_t dataArrayCounter=0;
int64_t stepCounterTare=0; // has to be so big to be able to store the result of a subtraction of two uint32_t variables

void Sensor_Init()
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
	// SDO has to be pulled to GND to enable default DEVICE_ADDRESS
	// the following steps are described in the datasheet
	printf("BMI323_eigen.c sensor init\r\n");
 800a390:	480e      	ldr	r0, [pc, #56]	@ (800a3cc <Sensor_Init+0x40>)
 800a392:	f004 fe71 	bl	800f078 <puts>

	First_Read_Sensor_Id();
 800a396:	f000 f81d 	bl	800a3d4 <First_Read_Sensor_Id>

	Check_Error_Reg();
 800a39a:	f000 fb17 	bl	800a9cc <Check_Error_Reg>
	Check_Status_Reg();
 800a39e:	f000 fcb1 	bl	800ad04 <Check_Status_Reg>

	Enable_Feature_Engine(); // has to be done before acc and gyr init
 800a3a2:	f000 fbef 	bl	800ab84 <Enable_Feature_Engine>

	Configure_Fifo(); // FIFO has to be activated before accelerometer is activated or before low power mode is turned on
 800a3a6:	f000 fae3 	bl	800a970 <Configure_Fifo>
	Configure_Interrupt_Fifo_Watermark();
 800a3aa:	f000 fa45 	bl	800a838 <Configure_Interrupt_Fifo_Watermark>
	Configure_Accelerometer(dataRate50, lowPower);
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	f000 f841 	bl	800a438 <Configure_Accelerometer>

	Enable_Step_Counter();
 800a3b6:	f000 fb6d 	bl	800aa94 <Enable_Step_Counter>

//	Configure_Gyroscope(dataRate100, highPerformance);

	Check_Error_Reg();
 800a3ba:	f000 fb07 	bl	800a9cc <Check_Error_Reg>
	Check_Status_Reg();
 800a3be:	f000 fca1 	bl	800ad04 <Check_Status_Reg>

	sensorIsInitialised=1;
 800a3c2:	4b03      	ldr	r3, [pc, #12]	@ (800a3d0 <Sensor_Init+0x44>)
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	701a      	strb	r2, [r3, #0]
}
 800a3c8:	bf00      	nop
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	08010cec 	.word	0x08010cec
 800a3d0:	200003c8 	.word	0x200003c8

0800a3d4 <First_Read_Sensor_Id>:

void First_Read_Sensor_Id()
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af04      	add	r7, sp, #16
	uint8_t receivedData[4]={0};
 800a3da:	2300      	movs	r3, #0
 800a3dc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret=0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	71fb      	strb	r3, [r7, #7]
	// the ID has to be read to "activate" the sensor the first time after power up

	printf("BMI323_eigen.c reading chip id\r\n");
 800a3e2:	4811      	ldr	r0, [pc, #68]	@ (800a428 <First_Read_Sensor_Id+0x54>)
 800a3e4:	f004 fe48 	bl	800f078 <puts>
	ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, CHIP_ID_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800a3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ec:	9302      	str	r3, [sp, #8]
 800a3ee:	2304      	movs	r3, #4
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	463b      	mov	r3, r7
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	21d0      	movs	r1, #208	@ 0xd0
 800a3fc:	480b      	ldr	r0, [pc, #44]	@ (800a42c <First_Read_Sensor_Id+0x58>)
 800a3fe:	f7fa ffe5 	bl	80053cc <HAL_I2C_Mem_Read>
 800a402:	4603      	mov	r3, r0
 800a404:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK)
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <First_Read_Sensor_Id+0x40>
	{

		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a40c:	4808      	ldr	r0, [pc, #32]	@ (800a430 <First_Read_Sensor_Id+0x5c>)
 800a40e:	f004 fe33 	bl	800f078 <puts>
	} else
	{
		printf("BMI323_eigen.c chip id is: %u\r\n", receivedData[2]); // nur das LSB enthält die Addresse, oberes Byte ist reserved
	}
}
 800a412:	e004      	b.n	800a41e <First_Read_Sensor_Id+0x4a>
		printf("BMI323_eigen.c chip id is: %u\r\n", receivedData[2]); // nur das LSB enthält die Addresse, oberes Byte ist reserved
 800a414:	78bb      	ldrb	r3, [r7, #2]
 800a416:	4619      	mov	r1, r3
 800a418:	4806      	ldr	r0, [pc, #24]	@ (800a434 <First_Read_Sensor_Id+0x60>)
 800a41a:	f004 fdc5 	bl	800efa8 <iprintf>
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	08010d08 	.word	0x08010d08
 800a42c:	20000278 	.word	0x20000278
 800a430:	08010d28 	.word	0x08010d28
 800a434:	08010d54 	.word	0x08010d54

0800a438 <Configure_Accelerometer>:

void Configure_Accelerometer(uint8_t dataRate, uint8_t powerMode)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af04      	add	r7, sp, #16
 800a43e:	4603      	mov	r3, r0
 800a440:	460a      	mov	r2, r1
 800a442:	71fb      	strb	r3, [r7, #7]
 800a444:	4613      	mov	r3, r2
 800a446:	71bb      	strb	r3, [r7, #6]
	// sets the accelerometer parameters
	HAL_StatusTypeDef ret=0;
 800a448:	2300      	movs	r3, #0
 800a44a:	73fb      	strb	r3, [r7, #15]
	uint8_t transmitData[2]={0};
 800a44c:	2300      	movs	r3, #0
 800a44e:	81bb      	strh	r3, [r7, #12]

	// configure dataRate
	switch(dataRate)
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	2b03      	cmp	r3, #3
 800a454:	d822      	bhi.n	800a49c <Configure_Accelerometer+0x64>
 800a456:	a201      	add	r2, pc, #4	@ (adr r2, 800a45c <Configure_Accelerometer+0x24>)
 800a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45c:	0800a46d 	.word	0x0800a46d
 800a460:	0800a479 	.word	0x0800a479
 800a464:	0800a485 	.word	0x0800a485
 800a468:	0800a491 	.word	0x0800a491
	{
		case dataRate25:
			transmitData[0] |= 0b0110;
 800a46c:	7b3b      	ldrb	r3, [r7, #12]
 800a46e:	f043 0306 	orr.w	r3, r3, #6
 800a472:	b2db      	uxtb	r3, r3
 800a474:	733b      	strb	r3, [r7, #12]
		break;
 800a476:	e011      	b.n	800a49c <Configure_Accelerometer+0x64>

		case dataRate50:
			transmitData[0] |= 0b0111;
 800a478:	7b3b      	ldrb	r3, [r7, #12]
 800a47a:	f043 0307 	orr.w	r3, r3, #7
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	733b      	strb	r3, [r7, #12]
		break;
 800a482:	e00b      	b.n	800a49c <Configure_Accelerometer+0x64>

		case dataRate100:
			transmitData[0] |= 0b1000;
 800a484:	7b3b      	ldrb	r3, [r7, #12]
 800a486:	f043 0308 	orr.w	r3, r3, #8
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	733b      	strb	r3, [r7, #12]

		break;
 800a48e:	e005      	b.n	800a49c <Configure_Accelerometer+0x64>

		case dataRate200:
			transmitData[0] |= 0b1001;
 800a490:	7b3b      	ldrb	r3, [r7, #12]
 800a492:	f043 0309 	orr.w	r3, r3, #9
 800a496:	b2db      	uxtb	r3, r3
 800a498:	733b      	strb	r3, [r7, #12]
		break;
 800a49a:	bf00      	nop
	}

	// configure scale of the accelerometer
	transmitData[0] |= (0b011 << 4); // 16 g range
 800a49c:	7b3b      	ldrb	r3, [r7, #12]
 800a49e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	733b      	strb	r3, [r7, #12]

	// configure power mode
	switch(powerMode)
 800a4a6:	79bb      	ldrb	r3, [r7, #6]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <Configure_Accelerometer+0x7a>
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d006      	beq.n	800a4be <Configure_Accelerometer+0x86>
 800a4b0:	e00a      	b.n	800a4c8 <Configure_Accelerometer+0x90>
	{
		case lowPower:
			transmitData[1] |= (0b011 <<4);
 800a4b2:	7b7b      	ldrb	r3, [r7, #13]
 800a4b4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	737b      	strb	r3, [r7, #13]
		break;
 800a4bc:	e004      	b.n	800a4c8 <Configure_Accelerometer+0x90>

		case highPerformance:
			transmitData[1] |= (0b111 <<4);
 800a4be:	7b7b      	ldrb	r3, [r7, #13]
 800a4c0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	737b      	strb	r3, [r7, #13]
	}

	// write data to the accelerometer register
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, ACC_CONFIG_REG, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800a4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4cc:	9302      	str	r3, [sp, #8]
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	f107 030c 	add.w	r3, r7, #12
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	2301      	movs	r3, #1
 800a4da:	2220      	movs	r2, #32
 800a4dc:	21d0      	movs	r1, #208	@ 0xd0
 800a4de:	4809      	ldr	r0, [pc, #36]	@ (800a504 <Configure_Accelerometer+0xcc>)
 800a4e0:	f7fa fe60 	bl	80051a4 <HAL_I2C_Mem_Write>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <Configure_Accelerometer+0xbe>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a4ee:	4806      	ldr	r0, [pc, #24]	@ (800a508 <Configure_Accelerometer+0xd0>)
 800a4f0:	f004 fdc2 	bl	800f078 <puts>
	} else
	{
		printf("BMI323_eigen.c writing data to accelerometer configuration\r\n");
	}
}
 800a4f4:	e002      	b.n	800a4fc <Configure_Accelerometer+0xc4>
		printf("BMI323_eigen.c writing data to accelerometer configuration\r\n");
 800a4f6:	4805      	ldr	r0, [pc, #20]	@ (800a50c <Configure_Accelerometer+0xd4>)
 800a4f8:	f004 fdbe 	bl	800f078 <puts>
}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20000278 	.word	0x20000278
 800a508:	08010d28 	.word	0x08010d28
 800a50c:	08010d74 	.word	0x08010d74

0800a510 <Read_Sensor_Data>:


}

void Read_Sensor_Data()
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	@ 0x28
 800a514:	af04      	add	r7, sp, #16
	uint8_t receivedData[10]={0};
 800a516:	463b      	mov	r3, r7
 800a518:	2200      	movs	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	605a      	str	r2, [r3, #4]
 800a51e:	811a      	strh	r2, [r3, #8]
	HAL_StatusTypeDef ret=0;
 800a520:	2300      	movs	r3, #0
 800a522:	74fb      	strb	r3, [r7, #19]
	int16_t accelerationValueX=0;
 800a524:	2300      	movs	r3, #0
 800a526:	823b      	strh	r3, [r7, #16]
	int16_t accelerationValueY=0;
 800a528:	2300      	movs	r3, #0
 800a52a:	81fb      	strh	r3, [r7, #14]
	int16_t accelerationValueZ=0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	81bb      	strh	r3, [r7, #12]
	uint16_t fifoFillLevel = 0;
 800a530:	2300      	movs	r3, #0
 800a532:	82fb      	strh	r3, [r7, #22]
	uint16_t loopCounter = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	82bb      	strh	r3, [r7, #20]
	uint16_t sensorTime = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	817b      	strh	r3, [r7, #10]

	// the FIFO fill level should be the value specified for the water level interrupt during initialization of the sensor
	// however, if there is a delay between the last measurement value and the execution of this function, there MIGHT be
	// a different number stored in the FIFO
	// just to be sure, the exact fill level of the FIFO is read and subsequently this number of data packets is read
	ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, SENSOR_FIFO_FILL_LEVEL_READ, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800a53c:	f04f 33ff 	mov.w	r3, #4294967295
 800a540:	9302      	str	r3, [sp, #8]
 800a542:	2304      	movs	r3, #4
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	463b      	mov	r3, r7
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	2301      	movs	r3, #1
 800a54c:	2215      	movs	r2, #21
 800a54e:	21d0      	movs	r1, #208	@ 0xd0
 800a550:	4852      	ldr	r0, [pc, #328]	@ (800a69c <Read_Sensor_Data+0x18c>)
 800a552:	f7fa ff3b 	bl	80053cc <HAL_I2C_Mem_Read>
 800a556:	4603      	mov	r3, r0
 800a558:	74fb      	strb	r3, [r7, #19]
	if(ret != HAL_OK)
 800a55a:	7cfb      	ldrb	r3, [r7, #19]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <Read_Sensor_Data+0x58>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a560:	484f      	ldr	r0, [pc, #316]	@ (800a6a0 <Read_Sensor_Data+0x190>)
 800a562:	f004 fd89 	bl	800f078 <puts>
 800a566:	e008      	b.n	800a57a <Read_Sensor_Data+0x6a>
	} else
	{
		fifoFillLevel = (receivedData[3] << 8) | receivedData[2];	// reads the current fill level (amount of data words) in the FIFO
 800a568:	78fb      	ldrb	r3, [r7, #3]
 800a56a:	b21b      	sxth	r3, r3
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	b21a      	sxth	r2, r3
 800a570:	78bb      	ldrb	r3, [r7, #2]
 800a572:	b21b      	sxth	r3, r3
 800a574:	4313      	orrs	r3, r2
 800a576:	b21b      	sxth	r3, r3
 800a578:	82fb      	strh	r3, [r7, #22]
//		printf("BMI323_eigen.c FIFO fill level is: %u\r\n", fifoFillLevel);
	}
	loopCounter = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	82bb      	strh	r3, [r7, #20]
//	printf("BMI323_eigen.c loop will go till: %u\r\n", fifoFillLevel/4);
	while(loopCounter < fifoFillLevel/4) // during each read, 4 words are read
 800a57e:	e05d      	b.n	800a63c <Read_Sensor_Data+0x12c>
	{
		ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, SENSOR_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, receivedData, 10, HAL_MAX_DELAY);
 800a580:	f04f 33ff 	mov.w	r3, #4294967295
 800a584:	9302      	str	r3, [sp, #8]
 800a586:	230a      	movs	r3, #10
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	463b      	mov	r3, r7
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	2301      	movs	r3, #1
 800a590:	2216      	movs	r2, #22
 800a592:	21d0      	movs	r1, #208	@ 0xd0
 800a594:	4841      	ldr	r0, [pc, #260]	@ (800a69c <Read_Sensor_Data+0x18c>)
 800a596:	f7fa ff19 	bl	80053cc <HAL_I2C_Mem_Read>
 800a59a:	4603      	mov	r3, r0
 800a59c:	74fb      	strb	r3, [r7, #19]
		if(ret != HAL_OK)
 800a59e:	7cfb      	ldrb	r3, [r7, #19]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d003      	beq.n	800a5ac <Read_Sensor_Data+0x9c>
		{
			printf("BMI323_eigen.c error in communication I2C\r\n");
 800a5a4:	483e      	ldr	r0, [pc, #248]	@ (800a6a0 <Read_Sensor_Data+0x190>)
 800a5a6:	f004 fd67 	bl	800f078 <puts>
 800a5aa:	e044      	b.n	800a636 <Read_Sensor_Data+0x126>
		} else
		{
			sensorTime = (receivedData[8] << 8) | receivedData[9]; // I do not know why sensorTime is max 255, it should be a 16 bit word acc. to datasheet
 800a5ac:	7a3b      	ldrb	r3, [r7, #8]
 800a5ae:	b21b      	sxth	r3, r3
 800a5b0:	021b      	lsls	r3, r3, #8
 800a5b2:	b21a      	sxth	r2, r3
 800a5b4:	7a7b      	ldrb	r3, [r7, #9]
 800a5b6:	b21b      	sxth	r3, r3
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	b21b      	sxth	r3, r3
 800a5bc:	817b      	strh	r3, [r7, #10]

			accelerationValueZ = (receivedData[7] << 8) | receivedData[6];
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	b21b      	sxth	r3, r3
 800a5c2:	021b      	lsls	r3, r3, #8
 800a5c4:	b21a      	sxth	r2, r3
 800a5c6:	79bb      	ldrb	r3, [r7, #6]
 800a5c8:	b21b      	sxth	r3, r3
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	81bb      	strh	r3, [r7, #12]
			accelerationValueZ = accelerationValueZ/2; // actually /2,05 acc. to data sheet but dividing by two is faster
 800a5ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a5d2:	0fda      	lsrs	r2, r3, #31
 800a5d4:	4413      	add	r3, r2
 800a5d6:	105b      	asrs	r3, r3, #1
 800a5d8:	81bb      	strh	r3, [r7, #12]

			accelerationValueY = (receivedData[5] << 8) | receivedData[4];
 800a5da:	797b      	ldrb	r3, [r7, #5]
 800a5dc:	b21b      	sxth	r3, r3
 800a5de:	021b      	lsls	r3, r3, #8
 800a5e0:	b21a      	sxth	r2, r3
 800a5e2:	793b      	ldrb	r3, [r7, #4]
 800a5e4:	b21b      	sxth	r3, r3
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	81fb      	strh	r3, [r7, #14]
			accelerationValueY = accelerationValueY/2;
 800a5ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a5ee:	0fda      	lsrs	r2, r3, #31
 800a5f0:	4413      	add	r3, r2
 800a5f2:	105b      	asrs	r3, r3, #1
 800a5f4:	81fb      	strh	r3, [r7, #14]

			accelerationValueX = (receivedData[3] << 8) | receivedData[2];
 800a5f6:	78fb      	ldrb	r3, [r7, #3]
 800a5f8:	b21b      	sxth	r3, r3
 800a5fa:	021b      	lsls	r3, r3, #8
 800a5fc:	b21a      	sxth	r2, r3
 800a5fe:	78bb      	ldrb	r3, [r7, #2]
 800a600:	b21b      	sxth	r3, r3
 800a602:	4313      	orrs	r3, r2
 800a604:	823b      	strh	r3, [r7, #16]
			accelerationValueX = accelerationValueX/2;
 800a606:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a60a:	0fda      	lsrs	r2, r3, #31
 800a60c:	4413      	add	r3, r2
 800a60e:	105b      	asrs	r3, r3, #1
 800a610:	823b      	strh	r3, [r7, #16]
//			printf("BMI323_eigen.c loop: %u, time: %u, accX: %d, accY: %d, accZ: %d\r\n", loopCounter, sensorTime, accelerationValueX, accelerationValueY, accelerationValueZ);

			Determine_Activities(accelerationValueX, accelerationValueY, accelerationValueZ);
 800a612:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a616:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800a61a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a61e:	4618      	mov	r0, r3
 800a620:	f001 fe6e 	bl	800c300 <Determine_Activities>

			//Methode für eigene Characteristic
			Determine_RawData(accelerationValueX, accelerationValueY, accelerationValueZ);
 800a624:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a628:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800a62c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a630:	4618      	mov	r0, r3
 800a632:	f001 fe2b 	bl	800c28c <Determine_RawData>
		}
		loopCounter++;
 800a636:	8abb      	ldrh	r3, [r7, #20]
 800a638:	3301      	adds	r3, #1
 800a63a:	82bb      	strh	r3, [r7, #20]
	while(loopCounter < fifoFillLevel/4) // during each read, 4 words are read
 800a63c:	8afb      	ldrh	r3, [r7, #22]
 800a63e:	089b      	lsrs	r3, r3, #2
 800a640:	b29b      	uxth	r3, r3
 800a642:	8aba      	ldrh	r2, [r7, #20]
 800a644:	429a      	cmp	r2, r3
 800a646:	d39b      	bcc.n	800a580 <Read_Sensor_Data+0x70>
	}
	
	ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, SENSOR_FIFO_FILL_LEVEL_READ, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
 800a64c:	9302      	str	r3, [sp, #8]
 800a64e:	2304      	movs	r3, #4
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	463b      	mov	r3, r7
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	2301      	movs	r3, #1
 800a658:	2215      	movs	r2, #21
 800a65a:	21d0      	movs	r1, #208	@ 0xd0
 800a65c:	480f      	ldr	r0, [pc, #60]	@ (800a69c <Read_Sensor_Data+0x18c>)
 800a65e:	f7fa feb5 	bl	80053cc <HAL_I2C_Mem_Read>
 800a662:	4603      	mov	r3, r0
 800a664:	74fb      	strb	r3, [r7, #19]
	if(ret != HAL_OK)
 800a666:	7cfb      	ldrb	r3, [r7, #19]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <Read_Sensor_Data+0x164>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a66c:	480c      	ldr	r0, [pc, #48]	@ (800a6a0 <Read_Sensor_Data+0x190>)
 800a66e:	f004 fd03 	bl	800f078 <puts>
 800a672:	e008      	b.n	800a686 <Read_Sensor_Data+0x176>
	} else
	{
		fifoFillLevel = (receivedData[3] << 8) | receivedData[2];	// two 8 bit to 16 bit
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	b21b      	sxth	r3, r3
 800a678:	021b      	lsls	r3, r3, #8
 800a67a:	b21a      	sxth	r2, r3
 800a67c:	78bb      	ldrb	r3, [r7, #2]
 800a67e:	b21b      	sxth	r3, r3
 800a680:	4313      	orrs	r3, r2
 800a682:	b21b      	sxth	r3, r3
 800a684:	82fb      	strh	r3, [r7, #22]
//		printf("BMI323_eigen.c FIFO fill level is: %u (should now be 0)\r\n", fifoFillLevel);
		// if the execution of this loop takes too long, additional data values will be added to the FIFO
		// this will result in the FIFO fill level after the loop not being equal to 0
	}
	printf("BMI323_eigen.c processed data from FIFO, step counter: %lu\r\n", Read_Step_Counter());
 800a686:	f000 f80f 	bl	800a6a8 <Read_Step_Counter>
 800a68a:	4603      	mov	r3, r0
 800a68c:	4619      	mov	r1, r3
 800a68e:	4805      	ldr	r0, [pc, #20]	@ (800a6a4 <Read_Sensor_Data+0x194>)
 800a690:	f004 fc8a 	bl	800efa8 <iprintf>
//	printf("BMI323_eigen.c end read sensor data\r\n");
}
 800a694:	bf00      	nop
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000278 	.word	0x20000278
 800a6a0:	08010d28 	.word	0x08010d28
 800a6a4:	08010de8 	.word	0x08010de8

0800a6a8 <Read_Step_Counter>:

uint32_t Read_Step_Counter(void)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b088      	sub	sp, #32
 800a6ac:	af04      	add	r7, sp, #16
//	printf("Read_Step_Counter\r\n");
	// this function reads and returns the current step counter value
	uint8_t receivedData[4]={0};
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	603b      	str	r3, [r7, #0]
	uint16_t stepCounterValueLow=0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	81fb      	strh	r3, [r7, #14]
	uint16_t stepCounterValueHigh=0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	80fb      	strh	r3, [r7, #6]
	uint32_t stepCounterValue=0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60bb      	str	r3, [r7, #8]
	HAL_StatusTypeDef ret=0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_2_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800a6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c6:	9302      	str	r3, [sp, #8]
 800a6c8:	2304      	movs	r3, #4
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	463b      	mov	r3, r7
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	2212      	movs	r2, #18
 800a6d4:	21d0      	movs	r1, #208	@ 0xd0
 800a6d6:	4822      	ldr	r0, [pc, #136]	@ (800a760 <Read_Step_Counter+0xb8>)
 800a6d8:	f7fa fe78 	bl	80053cc <HAL_I2C_Mem_Read>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	717b      	strb	r3, [r7, #5]
	if(ret != HAL_OK)
 800a6e0:	797b      	ldrb	r3, [r7, #5]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <Read_Step_Counter+0x46>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a6e6:	481f      	ldr	r0, [pc, #124]	@ (800a764 <Read_Step_Counter+0xbc>)
 800a6e8:	f004 fcc6 	bl	800f078 <puts>
 800a6ec:	e008      	b.n	800a700 <Read_Step_Counter+0x58>
	} else
	{
		stepCounterValueLow = (receivedData[3] << 8) | receivedData[2];	// contains the lower 16 bit of step counter
 800a6ee:	78fb      	ldrb	r3, [r7, #3]
 800a6f0:	b21b      	sxth	r3, r3
 800a6f2:	021b      	lsls	r3, r3, #8
 800a6f4:	b21a      	sxth	r2, r3
 800a6f6:	78bb      	ldrb	r3, [r7, #2]
 800a6f8:	b21b      	sxth	r3, r3
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	b21b      	sxth	r3, r3
 800a6fe:	81fb      	strh	r3, [r7, #14]
//		printf("BMI323_eigen.c lower step counter value is: %u\r\n", stepCounterValueLow);
	}
	ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_3_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800a700:	f04f 33ff 	mov.w	r3, #4294967295
 800a704:	9302      	str	r3, [sp, #8]
 800a706:	2304      	movs	r3, #4
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	463b      	mov	r3, r7
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	2301      	movs	r3, #1
 800a710:	2213      	movs	r2, #19
 800a712:	21d0      	movs	r1, #208	@ 0xd0
 800a714:	4812      	ldr	r0, [pc, #72]	@ (800a760 <Read_Step_Counter+0xb8>)
 800a716:	f7fa fe59 	bl	80053cc <HAL_I2C_Mem_Read>
 800a71a:	4603      	mov	r3, r0
 800a71c:	717b      	strb	r3, [r7, #5]
	if(ret != HAL_OK)
 800a71e:	797b      	ldrb	r3, [r7, #5]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <Read_Step_Counter+0x84>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a724:	480f      	ldr	r0, [pc, #60]	@ (800a764 <Read_Step_Counter+0xbc>)
 800a726:	f004 fca7 	bl	800f078 <puts>
 800a72a:	e00d      	b.n	800a748 <Read_Step_Counter+0xa0>
	} else
	{
		stepCounterValueHigh = (receivedData[3] << 8) | receivedData[2];	// contains the higher 16 bit of step counter
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	b21b      	sxth	r3, r3
 800a730:	021b      	lsls	r3, r3, #8
 800a732:	b21a      	sxth	r2, r3
 800a734:	78bb      	ldrb	r3, [r7, #2]
 800a736:	b21b      	sxth	r3, r3
 800a738:	4313      	orrs	r3, r2
 800a73a:	b21b      	sxth	r3, r3
 800a73c:	80fb      	strh	r3, [r7, #6]
//		printf("BMI323_eigen.c higher step counter value is: %u\r\n", stepCounterValueHigh);
		stepCounterValue = (stepCounterValueHigh << 16) | stepCounterValueLow;
 800a73e:	88fb      	ldrh	r3, [r7, #6]
 800a740:	041a      	lsls	r2, r3, #16
 800a742:	89fb      	ldrh	r3, [r7, #14]
 800a744:	4313      	orrs	r3, r2
 800a746:	60bb      	str	r3, [r7, #8]
//		printf("BMI323_eigen.c final step counter value is: %lu\r\n", stepCounterValue);
	}
	stepCounterValue = stepCounterValue - stepCounterTare;
 800a748:	4b07      	ldr	r3, [pc, #28]	@ (800a768 <Read_Step_Counter+0xc0>)
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	1a9b      	subs	r3, r3, r2
 800a752:	60bb      	str	r3, [r7, #8]
		stepCounterValue = stepCounterValue + 2^32; // step counter is always a positive value
													// if the step counter reg overflows, it starts at zero again
													// so if the result of the subtraction is negative, you can be sure that there was an overflow
													// and 2^32 has to be added to the result
	}
	return stepCounterValue;
 800a754:	68bb      	ldr	r3, [r7, #8]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20000278 	.word	0x20000278
 800a764:	08010d28 	.word	0x08010d28
 800a768:	200003d0 	.word	0x200003d0

0800a76c <Clear_Step_Counter_Reg>:

void Clear_Step_Counter_Reg()
{
 800a76c:	b5b0      	push	{r4, r5, r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af04      	add	r7, sp, #16
	printf("BMI323_eigen.c clear step counter reg\r\n");
 800a772:	482d      	ldr	r0, [pc, #180]	@ (800a828 <Clear_Step_Counter_Reg+0xbc>)
 800a774:	f004 fc80 	bl	800f078 <puts>

	// this function sets a tare variable that will be added to the step counter in order to make the result 0

	uint8_t receivedData[4]={0};
 800a778:	2300      	movs	r3, #0
 800a77a:	603b      	str	r3, [r7, #0]
	uint16_t stepCounterValueLow=0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	81fb      	strh	r3, [r7, #14]
	uint16_t stepCounterValueHigh=0;
 800a780:	2300      	movs	r3, #0
 800a782:	80fb      	strh	r3, [r7, #6]
	uint32_t stepCounterValue=0;
 800a784:	2300      	movs	r3, #0
 800a786:	60bb      	str	r3, [r7, #8]
	HAL_StatusTypeDef ret=0;
 800a788:	2300      	movs	r3, #0
 800a78a:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_2_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800a78c:	f04f 33ff 	mov.w	r3, #4294967295
 800a790:	9302      	str	r3, [sp, #8]
 800a792:	2304      	movs	r3, #4
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	463b      	mov	r3, r7
 800a798:	9300      	str	r3, [sp, #0]
 800a79a:	2301      	movs	r3, #1
 800a79c:	2212      	movs	r2, #18
 800a79e:	21d0      	movs	r1, #208	@ 0xd0
 800a7a0:	4822      	ldr	r0, [pc, #136]	@ (800a82c <Clear_Step_Counter_Reg+0xc0>)
 800a7a2:	f7fa fe13 	bl	80053cc <HAL_I2C_Mem_Read>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	717b      	strb	r3, [r7, #5]
	if(ret != HAL_OK)
 800a7aa:	797b      	ldrb	r3, [r7, #5]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <Clear_Step_Counter_Reg+0x4c>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a7b0:	481f      	ldr	r0, [pc, #124]	@ (800a830 <Clear_Step_Counter_Reg+0xc4>)
 800a7b2:	f004 fc61 	bl	800f078 <puts>
 800a7b6:	e008      	b.n	800a7ca <Clear_Step_Counter_Reg+0x5e>
	} else
	{
		stepCounterValueLow = (receivedData[3] << 8) | receivedData[2];	// contains the lower 16 bit of step counter
 800a7b8:	78fb      	ldrb	r3, [r7, #3]
 800a7ba:	b21b      	sxth	r3, r3
 800a7bc:	021b      	lsls	r3, r3, #8
 800a7be:	b21a      	sxth	r2, r3
 800a7c0:	78bb      	ldrb	r3, [r7, #2]
 800a7c2:	b21b      	sxth	r3, r3
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	b21b      	sxth	r3, r3
 800a7c8:	81fb      	strh	r3, [r7, #14]
//		printf("BMI323_eigen.c lower step counter value is: %u\r\n", stepCounterValueLow);
	}
	ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_3_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800a7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ce:	9302      	str	r3, [sp, #8]
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	463b      	mov	r3, r7
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	2301      	movs	r3, #1
 800a7da:	2213      	movs	r2, #19
 800a7dc:	21d0      	movs	r1, #208	@ 0xd0
 800a7de:	4813      	ldr	r0, [pc, #76]	@ (800a82c <Clear_Step_Counter_Reg+0xc0>)
 800a7e0:	f7fa fdf4 	bl	80053cc <HAL_I2C_Mem_Read>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	717b      	strb	r3, [r7, #5]
	if(ret != HAL_OK)
 800a7e8:	797b      	ldrb	r3, [r7, #5]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <Clear_Step_Counter_Reg+0x8a>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a7ee:	4810      	ldr	r0, [pc, #64]	@ (800a830 <Clear_Step_Counter_Reg+0xc4>)
 800a7f0:	f004 fc42 	bl	800f078 <puts>
 800a7f4:	e00d      	b.n	800a812 <Clear_Step_Counter_Reg+0xa6>
	} else
	{
		stepCounterValueHigh = (receivedData[3] << 8) | receivedData[2];	// contains the higher 16 bit of step counter
 800a7f6:	78fb      	ldrb	r3, [r7, #3]
 800a7f8:	b21b      	sxth	r3, r3
 800a7fa:	021b      	lsls	r3, r3, #8
 800a7fc:	b21a      	sxth	r2, r3
 800a7fe:	78bb      	ldrb	r3, [r7, #2]
 800a800:	b21b      	sxth	r3, r3
 800a802:	4313      	orrs	r3, r2
 800a804:	b21b      	sxth	r3, r3
 800a806:	80fb      	strh	r3, [r7, #6]
//		printf("BMI323_eigen.c higher step counter value is: %u\r\n", stepCounterValueHigh);
		stepCounterValue = (stepCounterValueHigh << 16) | stepCounterValueLow;
 800a808:	88fb      	ldrh	r3, [r7, #6]
 800a80a:	041a      	lsls	r2, r3, #16
 800a80c:	89fb      	ldrh	r3, [r7, #14]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60bb      	str	r3, [r7, #8]
//		printf("BMI323_eigen.c final step counter value is: %lu\r\n", stepCounterValue);
	}

	stepCounterTare = stepCounterValue; // sets a tare value, so the step counter can be set to 0 without changing the register of the sensor
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2200      	movs	r2, #0
 800a816:	461c      	mov	r4, r3
 800a818:	4615      	mov	r5, r2
 800a81a:	4b06      	ldr	r3, [pc, #24]	@ (800a834 <Clear_Step_Counter_Reg+0xc8>)
 800a81c:	e9c3 4500 	strd	r4, r5, [r3]
//	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, FEATURE_DATA_TX, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
//	if(ret != HAL_OK)
//	{
//		printf("BMI323_eigen.c error in communication I2C\r\n");
//	}
}
 800a820:	bf00      	nop
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bdb0      	pop	{r4, r5, r7, pc}
 800a828:	08010e28 	.word	0x08010e28
 800a82c:	20000278 	.word	0x20000278
 800a830:	08010d28 	.word	0x08010d28
 800a834:	200003d0 	.word	0x200003d0

0800a838 <Configure_Interrupt_Fifo_Watermark>:

void Configure_Interrupt_Fifo_Watermark()
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret=0;
 800a83e:	2300      	movs	r3, #0
 800a840:	71fb      	strb	r3, [r7, #7]
	uint8_t transmitData[2]={};
 800a842:	2300      	movs	r3, #0
 800a844:	803b      	strh	r3, [r7, #0]
	//enable interrupt on pin INT2
	printf("BMI323_eigen.c Configure_Interrupt_Fifo_Watermark\r\n");
 800a846:	4842      	ldr	r0, [pc, #264]	@ (800a950 <Configure_Interrupt_Fifo_Watermark+0x118>)
 800a848:	f004 fc16 	bl	800f078 <puts>

	// FIFO hast a size of 2048 Bytes, that is 1024 2-Byte-Words
	uint16_t newFifoWatermarkLevel = 900; // number of words for the FIFO water mark
 800a84c:	f44f 7361 	mov.w	r3, #900	@ 0x384
 800a850:	80bb      	strh	r3, [r7, #4]
	transmitData[0]= newFifoWatermarkLevel & 0b11111111; // set FIFO watermark level. Interrupt will be generated if FIFO is filled with more words than specified here
 800a852:	88bb      	ldrh	r3, [r7, #4]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	703b      	strb	r3, [r7, #0]
	transmitData[1]= newFifoWatermarkLevel >> 8;
 800a858:	88bb      	ldrh	r3, [r7, #4]
 800a85a:	0a1b      	lsrs	r3, r3, #8
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, SENSOR_FIFO_WATERMARK_SET, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800a862:	f04f 33ff 	mov.w	r3, #4294967295
 800a866:	9302      	str	r3, [sp, #8]
 800a868:	2302      	movs	r3, #2
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	463b      	mov	r3, r7
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	2301      	movs	r3, #1
 800a872:	2235      	movs	r2, #53	@ 0x35
 800a874:	21d0      	movs	r1, #208	@ 0xd0
 800a876:	4837      	ldr	r0, [pc, #220]	@ (800a954 <Configure_Interrupt_Fifo_Watermark+0x11c>)
 800a878:	f7fa fc94 	bl	80051a4 <HAL_I2C_Mem_Write>
 800a87c:	4603      	mov	r3, r0
 800a87e:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK)
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <Configure_Interrupt_Fifo_Watermark+0x56>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a886:	4834      	ldr	r0, [pc, #208]	@ (800a958 <Configure_Interrupt_Fifo_Watermark+0x120>)
 800a888:	f004 fbf6 	bl	800f078 <puts>
 800a88c:	e002      	b.n	800a894 <Configure_Interrupt_Fifo_Watermark+0x5c>
	} else
	{
		printf("BMI323_eigen.c configuring FIFO watermark level\r\n");
 800a88e:	4833      	ldr	r0, [pc, #204]	@ (800a95c <Configure_Interrupt_Fifo_Watermark+0x124>)
 800a890:	f004 fbf2 	bl	800f078 <puts>
	}

	transmitData[0]=0b00000000;
 800a894:	2300      	movs	r3, #0
 800a896:	703b      	strb	r3, [r7, #0]
	transmitData[1]=0b00100000; // map FIFO watermark interrupt to INT2 (pin)
 800a898:	2320      	movs	r3, #32
 800a89a:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, INT_MAP2_REG, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800a89c:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a0:	9302      	str	r3, [sp, #8]
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	223b      	movs	r2, #59	@ 0x3b
 800a8ae:	21d0      	movs	r1, #208	@ 0xd0
 800a8b0:	4828      	ldr	r0, [pc, #160]	@ (800a954 <Configure_Interrupt_Fifo_Watermark+0x11c>)
 800a8b2:	f7fa fc77 	bl	80051a4 <HAL_I2C_Mem_Write>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK)
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d003      	beq.n	800a8c8 <Configure_Interrupt_Fifo_Watermark+0x90>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a8c0:	4825      	ldr	r0, [pc, #148]	@ (800a958 <Configure_Interrupt_Fifo_Watermark+0x120>)
 800a8c2:	f004 fbd9 	bl	800f078 <puts>
 800a8c6:	e002      	b.n	800a8ce <Configure_Interrupt_Fifo_Watermark+0x96>
	} else
	{
		printf("BMI323_eigen.c connecting watermark interrupt to INT2\r\n");
 800a8c8:	4825      	ldr	r0, [pc, #148]	@ (800a960 <Configure_Interrupt_Fifo_Watermark+0x128>)
 800a8ca:	f004 fbd5 	bl	800f078 <puts>
	}

	// for debugging purposes, step detector is routed to pin of INT1
	transmitData[0]=0b00000000;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	703b      	strb	r3, [r7, #0]
	transmitData[1]=0b00000001; // step detector interrupt mapped to INT1 (pin)
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, INT_MAP1_REG, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800a8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8da:	9302      	str	r3, [sp, #8]
 800a8dc:	2302      	movs	r3, #2
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	463b      	mov	r3, r7
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	223a      	movs	r2, #58	@ 0x3a
 800a8e8:	21d0      	movs	r1, #208	@ 0xd0
 800a8ea:	481a      	ldr	r0, [pc, #104]	@ (800a954 <Configure_Interrupt_Fifo_Watermark+0x11c>)
 800a8ec:	f7fa fc5a 	bl	80051a4 <HAL_I2C_Mem_Write>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK)
 800a8f4:	79fb      	ldrb	r3, [r7, #7]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d003      	beq.n	800a902 <Configure_Interrupt_Fifo_Watermark+0xca>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a8fa:	4817      	ldr	r0, [pc, #92]	@ (800a958 <Configure_Interrupt_Fifo_Watermark+0x120>)
 800a8fc:	f004 fbbc 	bl	800f078 <puts>
 800a900:	e002      	b.n	800a908 <Configure_Interrupt_Fifo_Watermark+0xd0>
	} else
	{
		printf("BMI323_eigen.c writing data to INT1\r\n");
 800a902:	4818      	ldr	r0, [pc, #96]	@ (800a964 <Configure_Interrupt_Fifo_Watermark+0x12c>)
 800a904:	f004 fbb8 	bl	800f078 <puts>
	}


	printf("BMI323_eigen.c enabling INT2 output\r\n");
 800a908:	4817      	ldr	r0, [pc, #92]	@ (800a968 <Configure_Interrupt_Fifo_Watermark+0x130>)
 800a90a:	f004 fbb5 	bl	800f078 <puts>

	transmitData[0]=0b00000100; // INT1 is enabled for debugging. Without enabling: 0b00000000
 800a90e:	2304      	movs	r3, #4
 800a910:	703b      	strb	r3, [r7, #0]
	transmitData[1]=0b00000100; // INT2 enable, push-pull, active low
 800a912:	2304      	movs	r3, #4
 800a914:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, IO_INT_CTRL_REG, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800a916:	f04f 33ff 	mov.w	r3, #4294967295
 800a91a:	9302      	str	r3, [sp, #8]
 800a91c:	2302      	movs	r3, #2
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	463b      	mov	r3, r7
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	2301      	movs	r3, #1
 800a926:	2238      	movs	r2, #56	@ 0x38
 800a928:	21d0      	movs	r1, #208	@ 0xd0
 800a92a:	480a      	ldr	r0, [pc, #40]	@ (800a954 <Configure_Interrupt_Fifo_Watermark+0x11c>)
 800a92c:	f7fa fc3a 	bl	80051a4 <HAL_I2C_Mem_Write>
 800a930:	4603      	mov	r3, r0
 800a932:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK)
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <Configure_Interrupt_Fifo_Watermark+0x10a>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a93a:	4807      	ldr	r0, [pc, #28]	@ (800a958 <Configure_Interrupt_Fifo_Watermark+0x120>)
 800a93c:	f004 fb9c 	bl	800f078 <puts>
	} else
	{
		printf("BMI323_eigen.c enable INT2\r\n");
	}
}
 800a940:	e002      	b.n	800a948 <Configure_Interrupt_Fifo_Watermark+0x110>
		printf("BMI323_eigen.c enable INT2\r\n");
 800a942:	480a      	ldr	r0, [pc, #40]	@ (800a96c <Configure_Interrupt_Fifo_Watermark+0x134>)
 800a944:	f004 fb98 	bl	800f078 <puts>
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	08010e50 	.word	0x08010e50
 800a954:	20000278 	.word	0x20000278
 800a958:	08010d28 	.word	0x08010d28
 800a95c:	08010e84 	.word	0x08010e84
 800a960:	08010eb8 	.word	0x08010eb8
 800a964:	08010ef0 	.word	0x08010ef0
 800a968:	08010f18 	.word	0x08010f18
 800a96c:	08010f40 	.word	0x08010f40

0800a970 <Configure_Fifo>:

void Configure_Fifo()
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret=0;
 800a976:	2300      	movs	r3, #0
 800a978:	71fb      	strb	r3, [r7, #7]
	uint8_t transmitData[2]={};
 800a97a:	2300      	movs	r3, #0
 800a97c:	80bb      	strh	r3, [r7, #4]

	transmitData[0]=0b00000001; // stop writing to FIFO when full
 800a97e:	2301      	movs	r3, #1
 800a980:	713b      	strb	r3, [r7, #4]
	transmitData[1]=0b00000011; // store accelerometer and sensor time
 800a982:	2303      	movs	r3, #3
 800a984:	717b      	strb	r3, [r7, #5]
	// to save FIFO space (and improve current consumption) sensor time does not need to be stored in FIFO
	// but will be used for now for error checking and debugging purposes (to see if data gets lost)
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, SENSOR_FIFO_CONF, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800a986:	f04f 33ff 	mov.w	r3, #4294967295
 800a98a:	9302      	str	r3, [sp, #8]
 800a98c:	2302      	movs	r3, #2
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	1d3b      	adds	r3, r7, #4
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	2301      	movs	r3, #1
 800a996:	2236      	movs	r2, #54	@ 0x36
 800a998:	21d0      	movs	r1, #208	@ 0xd0
 800a99a:	4809      	ldr	r0, [pc, #36]	@ (800a9c0 <Configure_Fifo+0x50>)
 800a99c:	f7fa fc02 	bl	80051a4 <HAL_I2C_Mem_Write>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK)
 800a9a4:	79fb      	ldrb	r3, [r7, #7]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <Configure_Fifo+0x42>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800a9aa:	4806      	ldr	r0, [pc, #24]	@ (800a9c4 <Configure_Fifo+0x54>)
 800a9ac:	f004 fb64 	bl	800f078 <puts>
	} else
	{
		printf("BMI323_eigen.c configuring FIFO\r\n");
	}
}
 800a9b0:	e002      	b.n	800a9b8 <Configure_Fifo+0x48>
		printf("BMI323_eigen.c configuring FIFO\r\n");
 800a9b2:	4805      	ldr	r0, [pc, #20]	@ (800a9c8 <Configure_Fifo+0x58>)
 800a9b4:	f004 fb60 	bl	800f078 <puts>
}
 800a9b8:	bf00      	nop
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	20000278 	.word	0x20000278
 800a9c4:	08010d28 	.word	0x08010d28
 800a9c8:	08010f5c 	.word	0x08010f5c

0800a9cc <Check_Error_Reg>:

void Check_Error_Reg()
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af04      	add	r7, sp, #16
	// checking the error reg (for debugging purposes)
	uint8_t receivedData[4]={0};
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret=0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	71fb      	strb	r3, [r7, #7]
	printf("BMI323_eigen.c reading error reg id\r\n");
 800a9da:	4825      	ldr	r0, [pc, #148]	@ (800aa70 <Check_Error_Reg+0xa4>)
 800a9dc:	f004 fb4c 	bl	800f078 <puts>
		ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, ERR_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800a9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e4:	9302      	str	r3, [sp, #8]
 800a9e6:	2304      	movs	r3, #4
 800a9e8:	9301      	str	r3, [sp, #4]
 800a9ea:	463b      	mov	r3, r7
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	21d0      	movs	r1, #208	@ 0xd0
 800a9f4:	481f      	ldr	r0, [pc, #124]	@ (800aa74 <Check_Error_Reg+0xa8>)
 800a9f6:	f7fa fce9 	bl	80053cc <HAL_I2C_Mem_Read>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	71fb      	strb	r3, [r7, #7]
		if(ret != HAL_OK)
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d003      	beq.n	800aa0c <Check_Error_Reg+0x40>
		{
			printf("BMI323_eigen.c error in communication I2C\r\n");
 800aa04:	481c      	ldr	r0, [pc, #112]	@ (800aa78 <Check_Error_Reg+0xac>)
 800aa06:	f004 fb37 	bl	800f078 <puts>
			{
				printf("### BMI323_eigen.c unsupported gyroscope configuration\r\n");
			}
			printf("BMI323_eigen.c data received: %u\r\n", receivedData[2]); // nur das untere Byte enthält relevante Informationen für I2C
		}
}
 800aa0a:	e02c      	b.n	800aa66 <Check_Error_Reg+0x9a>
			if((receivedData[2] & 0b00000001) != 0)
 800aa0c:	78bb      	ldrb	r3, [r7, #2]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <Check_Error_Reg+0x50>
				printf("### BMI323_eigen.c fatal sensor error\r\n");
 800aa16:	4819      	ldr	r0, [pc, #100]	@ (800aa7c <Check_Error_Reg+0xb0>)
 800aa18:	f004 fb2e 	bl	800f078 <puts>
			if((receivedData[2] & 0b00000100) != 0)
 800aa1c:	78bb      	ldrb	r3, [r7, #2]
 800aa1e:	f003 0304 	and.w	r3, r3, #4
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d002      	beq.n	800aa2c <Check_Error_Reg+0x60>
				printf("### BMI323_eigen.c overload of feature engine detected\r\n");
 800aa26:	4816      	ldr	r0, [pc, #88]	@ (800aa80 <Check_Error_Reg+0xb4>)
 800aa28:	f004 fb26 	bl	800f078 <puts>
			if((receivedData[2] & 0b00010000) != 0)
 800aa2c:	78bb      	ldrb	r3, [r7, #2]
 800aa2e:	f003 0310 	and.w	r3, r3, #16
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d002      	beq.n	800aa3c <Check_Error_Reg+0x70>
				printf("### BMI323_eigen.c watchdog of feature engine triggered\r\n");
 800aa36:	4813      	ldr	r0, [pc, #76]	@ (800aa84 <Check_Error_Reg+0xb8>)
 800aa38:	f004 fb1e 	bl	800f078 <puts>
			if((receivedData[2] & 0b00100000) != 0)
 800aa3c:	78bb      	ldrb	r3, [r7, #2]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <Check_Error_Reg+0x80>
				printf("### BMI323_eigen.c unsupported accelerometer configuration\r\n");
 800aa46:	4810      	ldr	r0, [pc, #64]	@ (800aa88 <Check_Error_Reg+0xbc>)
 800aa48:	f004 fb16 	bl	800f078 <puts>
			if((receivedData[2] & 0b01000000) != 0)
 800aa4c:	78bb      	ldrb	r3, [r7, #2]
 800aa4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d002      	beq.n	800aa5c <Check_Error_Reg+0x90>
				printf("### BMI323_eigen.c unsupported gyroscope configuration\r\n");
 800aa56:	480d      	ldr	r0, [pc, #52]	@ (800aa8c <Check_Error_Reg+0xc0>)
 800aa58:	f004 fb0e 	bl	800f078 <puts>
			printf("BMI323_eigen.c data received: %u\r\n", receivedData[2]); // nur das untere Byte enthält relevante Informationen für I2C
 800aa5c:	78bb      	ldrb	r3, [r7, #2]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	480b      	ldr	r0, [pc, #44]	@ (800aa90 <Check_Error_Reg+0xc4>)
 800aa62:	f004 faa1 	bl	800efa8 <iprintf>
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	08010f80 	.word	0x08010f80
 800aa74:	20000278 	.word	0x20000278
 800aa78:	08010d28 	.word	0x08010d28
 800aa7c:	08010fa8 	.word	0x08010fa8
 800aa80:	08010fd0 	.word	0x08010fd0
 800aa84:	08011008 	.word	0x08011008
 800aa88:	08011044 	.word	0x08011044
 800aa8c:	08011080 	.word	0x08011080
 800aa90:	080110b8 	.word	0x080110b8

0800aa94 <Enable_Step_Counter>:

void Enable_Step_Counter()
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af04      	add	r7, sp, #16
	// this function enables the step counter
	uint8_t receivedData[4]={0};
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60bb      	str	r3, [r7, #8]
	HAL_StatusTypeDef ret=0;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]
	uint8_t transmitData[2]={};
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	80bb      	strh	r3, [r7, #4]

	printf("BMI323_eigen.c Enable_Step_Counter\r\n");
 800aaa6:	4831      	ldr	r0, [pc, #196]	@ (800ab6c <Enable_Step_Counter+0xd8>)
 800aaa8:	f004 fae6 	bl	800f078 <puts>
	// step detector: generates an interrupt on INT pin each time a step is detected
	// step counter: counts the steps in the step counter register
	// no step counter interrupt is needed

	// activate step counter
	transmitData[0]=0b00000000; // step counter activated
 800aaac:	2300      	movs	r3, #0
 800aaae:	713b      	strb	r3, [r7, #4]
	transmitData[1]=0b00000011; // for debugging, also step detector is activated, 0b00000010 for only step counter
 800aab0:	2303      	movs	r3, #3
 800aab2:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_0_REG, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800aab4:	f04f 33ff 	mov.w	r3, #4294967295
 800aab8:	9302      	str	r3, [sp, #8]
 800aaba:	2302      	movs	r3, #2
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	1d3b      	adds	r3, r7, #4
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	2301      	movs	r3, #1
 800aac4:	2210      	movs	r2, #16
 800aac6:	21d0      	movs	r1, #208	@ 0xd0
 800aac8:	4829      	ldr	r0, [pc, #164]	@ (800ab70 <Enable_Step_Counter+0xdc>)
 800aaca:	f7fa fb6b 	bl	80051a4 <HAL_I2C_Mem_Write>
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <Enable_Step_Counter+0x4c>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800aad8:	4826      	ldr	r0, [pc, #152]	@ (800ab74 <Enable_Step_Counter+0xe0>)
 800aada:	f004 facd 	bl	800f078 <puts>
 800aade:	e002      	b.n	800aae6 <Enable_Step_Counter+0x52>
	} else
	{
		printf("BMI323_eigen.c writing new data to FEATURE_IO_0\r\n");
 800aae0:	4825      	ldr	r0, [pc, #148]	@ (800ab78 <Enable_Step_Counter+0xe4>)
 800aae2:	f004 fac9 	bl	800f078 <puts>
	}

	// writing a 1 to feature io status reg sends the changes to the feature engine
	transmitData[0]=0b00000001;
 800aae6:	2301      	movs	r3, #1
 800aae8:	713b      	strb	r3, [r7, #4]
	transmitData[1]=0b00000000;
 800aaea:	2300      	movs	r3, #0
 800aaec:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_STATUS_REG, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800aaee:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf2:	9302      	str	r3, [sp, #8]
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	1d3b      	adds	r3, r7, #4
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	2301      	movs	r3, #1
 800aafe:	2214      	movs	r2, #20
 800ab00:	21d0      	movs	r1, #208	@ 0xd0
 800ab02:	481b      	ldr	r0, [pc, #108]	@ (800ab70 <Enable_Step_Counter+0xdc>)
 800ab04:	f7fa fb4e 	bl	80051a4 <HAL_I2C_Mem_Write>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d003      	beq.n	800ab1a <Enable_Step_Counter+0x86>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800ab12:	4818      	ldr	r0, [pc, #96]	@ (800ab74 <Enable_Step_Counter+0xe0>)
 800ab14:	f004 fab0 	bl	800f078 <puts>
 800ab18:	e002      	b.n	800ab20 <Enable_Step_Counter+0x8c>
	} else
	{
		printf("BMI323_eigen.c saving changes to FEATURE_IO_0\r\n");
 800ab1a:	4818      	ldr	r0, [pc, #96]	@ (800ab7c <Enable_Step_Counter+0xe8>)
 800ab1c:	f004 faac 	bl	800f078 <puts>
	}


	// check if everything has been written correctly
	ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_0_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800ab20:	f04f 33ff 	mov.w	r3, #4294967295
 800ab24:	9302      	str	r3, [sp, #8]
 800ab26:	2304      	movs	r3, #4
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	f107 0308 	add.w	r3, r7, #8
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	2301      	movs	r3, #1
 800ab32:	2210      	movs	r2, #16
 800ab34:	21d0      	movs	r1, #208	@ 0xd0
 800ab36:	480e      	ldr	r0, [pc, #56]	@ (800ab70 <Enable_Step_Counter+0xdc>)
 800ab38:	f7fa fc48 	bl	80053cc <HAL_I2C_Mem_Read>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <Enable_Step_Counter+0xba>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800ab46:	480b      	ldr	r0, [pc, #44]	@ (800ab74 <Enable_Step_Counter+0xe0>)
 800ab48:	f004 fa96 	bl	800f078 <puts>
 800ab4c:	e006      	b.n	800ab5c <Enable_Step_Counter+0xc8>
	} else
	{
		printf("BMI323_eigen.c FEATURE_IO_0 data received: %u, %u\r\n", receivedData[2],receivedData[3]);
 800ab4e:	7abb      	ldrb	r3, [r7, #10]
 800ab50:	4619      	mov	r1, r3
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	461a      	mov	r2, r3
 800ab56:	480a      	ldr	r0, [pc, #40]	@ (800ab80 <Enable_Step_Counter+0xec>)
 800ab58:	f004 fa26 	bl	800efa8 <iprintf>
	}

	Check_Error_Reg(); // optional, to check for errors
 800ab5c:	f7ff ff36 	bl	800a9cc <Check_Error_Reg>
	Check_Status_Reg(); // optional, to check for errors
 800ab60:	f000 f8d0 	bl	800ad04 <Check_Status_Reg>
}
 800ab64:	bf00      	nop
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	080110dc 	.word	0x080110dc
 800ab70:	20000278 	.word	0x20000278
 800ab74:	08010d28 	.word	0x08010d28
 800ab78:	08011100 	.word	0x08011100
 800ab7c:	08011134 	.word	0x08011134
 800ab80:	08011164 	.word	0x08011164

0800ab84 <Enable_Feature_Engine>:

void Enable_Feature_Engine()
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b088      	sub	sp, #32
 800ab88:	af04      	add	r7, sp, #16
	// this function has to be called before any acc or gyr is initialized
	// it enables the feature engine that is required for the step counter and things like motion detection
	printf("BMI323_eigen.c enabling the feature engine\r\n");
 800ab8a:	4853      	ldr	r0, [pc, #332]	@ (800acd8 <Enable_Feature_Engine+0x154>)
 800ab8c:	f004 fa74 	bl	800f078 <puts>

	uint8_t receivedData[4]={0};
 800ab90:	2300      	movs	r3, #0
 800ab92:	60bb      	str	r3, [r7, #8]
	HAL_StatusTypeDef ret=0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73bb      	strb	r3, [r7, #14]
	uint8_t transmitData[2]={};
 800ab98:	2300      	movs	r3, #0
 800ab9a:	80bb      	strh	r3, [r7, #4]

	// to enable the feature engine, 0x012C has to be written to FEATURE_IO_2_REG before acc and gyr are initialized
	transmitData[0]=0x2C;
 800ab9c:	232c      	movs	r3, #44	@ 0x2c
 800ab9e:	713b      	strb	r3, [r7, #4]
	transmitData[1]=0x01;
 800aba0:	2301      	movs	r3, #1
 800aba2:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_2_REG, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800aba4:	f04f 33ff 	mov.w	r3, #4294967295
 800aba8:	9302      	str	r3, [sp, #8]
 800abaa:	2302      	movs	r3, #2
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	1d3b      	adds	r3, r7, #4
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	2301      	movs	r3, #1
 800abb4:	2212      	movs	r2, #18
 800abb6:	21d0      	movs	r1, #208	@ 0xd0
 800abb8:	4848      	ldr	r0, [pc, #288]	@ (800acdc <Enable_Feature_Engine+0x158>)
 800abba:	f7fa faf3 	bl	80051a4 <HAL_I2C_Mem_Write>
 800abbe:	4603      	mov	r3, r0
 800abc0:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK)
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d003      	beq.n	800abd0 <Enable_Feature_Engine+0x4c>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800abc8:	4845      	ldr	r0, [pc, #276]	@ (800ace0 <Enable_Feature_Engine+0x15c>)
 800abca:	f004 fa55 	bl	800f078 <puts>
 800abce:	e002      	b.n	800abd6 <Enable_Feature_Engine+0x52>
	} else
	{
		printf("BMI323_eigen.c writing data to FEATURE_IO_2\r\n");
 800abd0:	4844      	ldr	r0, [pc, #272]	@ (800ace4 <Enable_Feature_Engine+0x160>)
 800abd2:	f004 fa51 	bl	800f078 <puts>
	}

	// if the following read operation returns a 1, the feature engine has been written to successfully
	ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_STATUS_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800abd6:	f04f 33ff 	mov.w	r3, #4294967295
 800abda:	9302      	str	r3, [sp, #8]
 800abdc:	2304      	movs	r3, #4
 800abde:	9301      	str	r3, [sp, #4]
 800abe0:	f107 0308 	add.w	r3, r7, #8
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	2301      	movs	r3, #1
 800abe8:	2214      	movs	r2, #20
 800abea:	21d0      	movs	r1, #208	@ 0xd0
 800abec:	483b      	ldr	r0, [pc, #236]	@ (800acdc <Enable_Feature_Engine+0x158>)
 800abee:	f7fa fbed 	bl	80053cc <HAL_I2C_Mem_Read>
 800abf2:	4603      	mov	r3, r0
 800abf4:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK)
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <Enable_Feature_Engine+0x80>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800abfc:	4838      	ldr	r0, [pc, #224]	@ (800ace0 <Enable_Feature_Engine+0x15c>)
 800abfe:	f004 fa3b 	bl	800f078 <puts>
 800ac02:	e00f      	b.n	800ac24 <Enable_Feature_Engine+0xa0>
	} else
	{
		printf("BMI323_eigen.c FEATURE_IO_2 data received: %u, %u\r\n", receivedData[2],receivedData[3]);
 800ac04:	7abb      	ldrb	r3, [r7, #10]
 800ac06:	4619      	mov	r1, r3
 800ac08:	7afb      	ldrb	r3, [r7, #11]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	4836      	ldr	r0, [pc, #216]	@ (800ace8 <Enable_Feature_Engine+0x164>)
 800ac0e:	f004 f9cb 	bl	800efa8 <iprintf>
		if(receivedData[3] == 0 && receivedData[2]==1)
 800ac12:	7afb      	ldrb	r3, [r7, #11]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d105      	bne.n	800ac24 <Enable_Feature_Engine+0xa0>
 800ac18:	7abb      	ldrb	r3, [r7, #10]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d102      	bne.n	800ac24 <Enable_Feature_Engine+0xa0>
		{
			printf("BMI323_eigen.c feature engine ok\r\n");
 800ac1e:	4833      	ldr	r0, [pc, #204]	@ (800acec <Enable_Feature_Engine+0x168>)
 800ac20:	f004 fa2a 	bl	800f078 <puts>
		}
	}

	// now the feature control engine has to be set to 1
	transmitData[0]=1;
 800ac24:	2301      	movs	r3, #1
 800ac26:	713b      	strb	r3, [r7, #4]
	transmitData[1]=0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDRESS, FEATURE_CTRL_REG, I2C_MEMADD_SIZE_8BIT, transmitData, 2, HAL_MAX_DELAY);
 800ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac30:	9302      	str	r3, [sp, #8]
 800ac32:	2302      	movs	r3, #2
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	1d3b      	adds	r3, r7, #4
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	2240      	movs	r2, #64	@ 0x40
 800ac3e:	21d0      	movs	r1, #208	@ 0xd0
 800ac40:	4826      	ldr	r0, [pc, #152]	@ (800acdc <Enable_Feature_Engine+0x158>)
 800ac42:	f7fa faaf 	bl	80051a4 <HAL_I2C_Mem_Write>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73bb      	strb	r3, [r7, #14]
	if(ret != HAL_OK)
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <Enable_Feature_Engine+0xd4>
	{
		printf("BMI323_eigen.c error in communication I2C\r\n");
 800ac50:	4823      	ldr	r0, [pc, #140]	@ (800ace0 <Enable_Feature_Engine+0x15c>)
 800ac52:	f004 fa11 	bl	800f078 <puts>
 800ac56:	e002      	b.n	800ac5e <Enable_Feature_Engine+0xda>
	} else
	{
		printf("BMI323_eigen.c writing data to feature ctrl reg\r\n");
 800ac58:	4825      	ldr	r0, [pc, #148]	@ (800acf0 <Enable_Feature_Engine+0x16c>)
 800ac5a:	f004 fa0d 	bl	800f078 <puts>
	}

	uint8_t exitCondition=0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1); // if the blue light is continuously turned on after the device started up, there is an error
 800ac62:	2201      	movs	r2, #1
 800ac64:	2102      	movs	r1, #2
 800ac66:	4823      	ldr	r0, [pc, #140]	@ (800acf4 <Enable_Feature_Engine+0x170>)
 800ac68:	f7fa f99e 	bl	8004fa8 <HAL_GPIO_WritePin>

	// according to datasheet, this register has to be read until it returns the value 1
	printf("BMI323_eigen.c polling feature io reg until it returns 1\r\n");
 800ac6c:	4822      	ldr	r0, [pc, #136]	@ (800acf8 <Enable_Feature_Engine+0x174>)
 800ac6e:	f004 fa03 	bl	800f078 <puts>
	while(exitCondition==0)
 800ac72:	e025      	b.n	800acc0 <Enable_Feature_Engine+0x13c>
	{
		ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, FEATURE_IO_1_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295
 800ac78:	9302      	str	r3, [sp, #8]
 800ac7a:	2304      	movs	r3, #4
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	f107 0308 	add.w	r3, r7, #8
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	2301      	movs	r3, #1
 800ac86:	2211      	movs	r2, #17
 800ac88:	21d0      	movs	r1, #208	@ 0xd0
 800ac8a:	4814      	ldr	r0, [pc, #80]	@ (800acdc <Enable_Feature_Engine+0x158>)
 800ac8c:	f7fa fb9e 	bl	80053cc <HAL_I2C_Mem_Read>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73bb      	strb	r3, [r7, #14]
		if(ret != HAL_OK)
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <Enable_Feature_Engine+0x11e>
		{
			printf("BMI323_eigen.c error in communication I2C\r\n");
 800ac9a:	4811      	ldr	r0, [pc, #68]	@ (800ace0 <Enable_Feature_Engine+0x15c>)
 800ac9c:	f004 f9ec 	bl	800f078 <puts>
 800aca0:	e00e      	b.n	800acc0 <Enable_Feature_Engine+0x13c>
		} else
		{
			printf("BMI323_eigen.c FEATURE_IO_1 data received: %u, %u\r\n", receivedData[2],receivedData[3]);
 800aca2:	7abb      	ldrb	r3, [r7, #10]
 800aca4:	4619      	mov	r1, r3
 800aca6:	7afb      	ldrb	r3, [r7, #11]
 800aca8:	461a      	mov	r2, r3
 800acaa:	4814      	ldr	r0, [pc, #80]	@ (800acfc <Enable_Feature_Engine+0x178>)
 800acac:	f004 f97c 	bl	800efa8 <iprintf>
			if(receivedData[2] == 1)
 800acb0:	7abb      	ldrb	r3, [r7, #10]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d104      	bne.n	800acc0 <Enable_Feature_Engine+0x13c>
			{
				printf("BMI323_eigen.c feature engine started\r\n");
 800acb6:	4812      	ldr	r0, [pc, #72]	@ (800ad00 <Enable_Feature_Engine+0x17c>)
 800acb8:	f004 f9de 	bl	800f078 <puts>
				exitCondition=1;
 800acbc:	2301      	movs	r3, #1
 800acbe:	73fb      	strb	r3, [r7, #15]
	while(exitCondition==0)
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d0d6      	beq.n	800ac74 <Enable_Feature_Engine+0xf0>
			}
		}
	}
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800acc6:	2200      	movs	r2, #0
 800acc8:	2102      	movs	r1, #2
 800acca:	480a      	ldr	r0, [pc, #40]	@ (800acf4 <Enable_Feature_Engine+0x170>)
 800accc:	f7fa f96c 	bl	8004fa8 <HAL_GPIO_WritePin>


}
 800acd0:	bf00      	nop
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	08011198 	.word	0x08011198
 800acdc:	20000278 	.word	0x20000278
 800ace0:	08010d28 	.word	0x08010d28
 800ace4:	080111c4 	.word	0x080111c4
 800ace8:	080111f4 	.word	0x080111f4
 800acec:	08011228 	.word	0x08011228
 800acf0:	0801124c 	.word	0x0801124c
 800acf4:	48000c00 	.word	0x48000c00
 800acf8:	08011280 	.word	0x08011280
 800acfc:	080112bc 	.word	0x080112bc
 800ad00:	080112f0 	.word	0x080112f0

0800ad04 <Check_Status_Reg>:

void Check_Status_Reg()
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af04      	add	r7, sp, #16
	// checking the status reg (for debugging purposes)
	uint8_t receivedData[4]={0};
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret=0;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	71fb      	strb	r3, [r7, #7]
	printf("BMI323_eigen.c reading status reg\r\n");
 800ad12:	4820      	ldr	r0, [pc, #128]	@ (800ad94 <Check_Status_Reg+0x90>)
 800ad14:	f004 f9b0 	bl	800f078 <puts>
		ret = HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, receivedData, 4, HAL_MAX_DELAY);
 800ad18:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1c:	9302      	str	r3, [sp, #8]
 800ad1e:	2304      	movs	r3, #4
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	463b      	mov	r3, r7
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	2301      	movs	r3, #1
 800ad28:	2202      	movs	r2, #2
 800ad2a:	21d0      	movs	r1, #208	@ 0xd0
 800ad2c:	481a      	ldr	r0, [pc, #104]	@ (800ad98 <Check_Status_Reg+0x94>)
 800ad2e:	f7fa fb4d 	bl	80053cc <HAL_I2C_Mem_Read>
 800ad32:	4603      	mov	r3, r0
 800ad34:	71fb      	strb	r3, [r7, #7]
		if(ret != HAL_OK)
 800ad36:	79fb      	ldrb	r3, [r7, #7]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d003      	beq.n	800ad44 <Check_Status_Reg+0x40>
		{
			printf("BMI323_eigen.c error in communication I2C\r\n");
 800ad3c:	4817      	ldr	r0, [pc, #92]	@ (800ad9c <Check_Status_Reg+0x98>)
 800ad3e:	f004 f99b 	bl	800f078 <puts>
				printf("BMI323_eigen.c data ready for accelerometer\r\n");
			}

			printf("BMI323_eigen.c data received: %u\r\n", receivedData[2]); // nur das untere Byte enthält relevante Informationen für I2C
		}
}
 800ad42:	e023      	b.n	800ad8c <Check_Status_Reg+0x88>
			if((receivedData[2] & 0b00000001) != 0)
 800ad44:	78bb      	ldrb	r3, [r7, #2]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <Check_Status_Reg+0x50>
				printf("BMI323_eigen.c power on reset detected\r\n");
 800ad4e:	4814      	ldr	r0, [pc, #80]	@ (800ada0 <Check_Status_Reg+0x9c>)
 800ad50:	f004 f992 	bl	800f078 <puts>
			if((receivedData[2] & 0b00100000) != 0)
 800ad54:	78bb      	ldrb	r3, [r7, #2]
 800ad56:	f003 0320 	and.w	r3, r3, #32
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <Check_Status_Reg+0x60>
				printf("BMI323_eigen.c data ready for temperature\r\n");
 800ad5e:	4811      	ldr	r0, [pc, #68]	@ (800ada4 <Check_Status_Reg+0xa0>)
 800ad60:	f004 f98a 	bl	800f078 <puts>
			if((receivedData[2] & 0b01000000) != 0)
 800ad64:	78bb      	ldrb	r3, [r7, #2]
 800ad66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <Check_Status_Reg+0x70>
				printf("BMI323_eigen.c data ready for gyroscope\r\n");
 800ad6e:	480e      	ldr	r0, [pc, #56]	@ (800ada8 <Check_Status_Reg+0xa4>)
 800ad70:	f004 f982 	bl	800f078 <puts>
			if((receivedData[2] & 0b10000000) != 0)
 800ad74:	78bb      	ldrb	r3, [r7, #2]
 800ad76:	b25b      	sxtb	r3, r3
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	da02      	bge.n	800ad82 <Check_Status_Reg+0x7e>
				printf("BMI323_eigen.c data ready for accelerometer\r\n");
 800ad7c:	480b      	ldr	r0, [pc, #44]	@ (800adac <Check_Status_Reg+0xa8>)
 800ad7e:	f004 f97b 	bl	800f078 <puts>
			printf("BMI323_eigen.c data received: %u\r\n", receivedData[2]); // nur das untere Byte enthält relevante Informationen für I2C
 800ad82:	78bb      	ldrb	r3, [r7, #2]
 800ad84:	4619      	mov	r1, r3
 800ad86:	480a      	ldr	r0, [pc, #40]	@ (800adb0 <Check_Status_Reg+0xac>)
 800ad88:	f004 f90e 	bl	800efa8 <iprintf>
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	08011318 	.word	0x08011318
 800ad98:	20000278 	.word	0x20000278
 800ad9c:	08010d28 	.word	0x08010d28
 800ada0:	0801133c 	.word	0x0801133c
 800ada4:	08011364 	.word	0x08011364
 800ada8:	08011390 	.word	0x08011390
 800adac:	080113bc 	.word	0x080113bc
 800adb0:	080110b8 	.word	0x080110b8

0800adb4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800adb4:	b480      	push	{r7}
 800adb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800adb8:	4b03      	ldr	r3, [pc, #12]	@ (800adc8 <LL_FLASH_GetUDN+0x14>)
 800adba:	681b      	ldr	r3, [r3, #0]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	1fff7580 	.word	0x1fff7580

0800adcc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800add0:	4b03      	ldr	r3, [pc, #12]	@ (800ade0 <LL_FLASH_GetDeviceID+0x14>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	b2db      	uxtb	r3, r3
}
 800add6:	4618      	mov	r0, r3
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	1fff7584 	.word	0x1fff7584

0800ade4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800ade4:	b480      	push	{r7}
 800ade6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800ade8:	4b03      	ldr	r3, [pc, #12]	@ (800adf8 <LL_FLASH_GetSTCompanyID+0x14>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	0a1b      	lsrs	r3, r3, #8
}
 800adee:	4618      	mov	r0, r3
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	1fff7584 	.word	0x1fff7584

0800adfc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800adfc:	b5b0      	push	{r4, r5, r7, lr}
 800adfe:	b090      	sub	sp, #64	@ 0x40
 800ae00:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ae02:	2392      	movs	r3, #146	@ 0x92
 800ae04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ae08:	4b25      	ldr	r3, [pc, #148]	@ (800aea0 <APP_BLE_Init+0xa4>)
 800ae0a:	1d3c      	adds	r4, r7, #4
 800ae0c:	461d      	mov	r5, r3
 800ae0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ae1e:	c403      	stmia	r4!, {r0, r1}
 800ae20:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ae22:	f000 f905 	bl	800b030 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ae26:	2101      	movs	r1, #1
 800ae28:	2002      	movs	r0, #2
 800ae2a:	f003 fd5b 	bl	800e8e4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ae2e:	4a1d      	ldr	r2, [pc, #116]	@ (800aea4 <APP_BLE_Init+0xa8>)
 800ae30:	2100      	movs	r1, #0
 800ae32:	2002      	movs	r0, #2
 800ae34:	f003 feb8 	bl	800eba8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ae38:	1d3b      	adds	r3, r7, #4
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe fbba 	bl	80095b4 <SHCI_C2_BLE_Init>
 800ae40:	4603      	mov	r3, r0
 800ae42:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800ae46:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ae4e:	f7f7 fb5d 	bl	800250c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ae52:	f000 f903 	bl	800b05c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ae56:	f7fe fb01 	bl	800945c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ae5a:	4b13      	ldr	r3, [pc, #76]	@ (800aea8 <APP_BLE_Init+0xac>)
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ae62:	4b11      	ldr	r3, [pc, #68]	@ (800aea8 <APP_BLE_Init+0xac>)
 800ae64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae68:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ae6a:	4a10      	ldr	r2, [pc, #64]	@ (800aeac <APP_BLE_Init+0xb0>)
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	2001      	movs	r0, #1
 800ae70:	f003 fe9a 	bl	800eba8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ae74:	2006      	movs	r0, #6
 800ae76:	f7fe f964 	bl	8009142 <aci_hal_set_radio_activity_mask>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800ae80:	f000 fcd6 	bl	800b830 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800ae84:	4b08      	ldr	r3, [pc, #32]	@ (800aea8 <APP_BLE_Init+0xac>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800ae8a:	4b07      	ldr	r3, [pc, #28]	@ (800aea8 <APP_BLE_Init+0xac>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800ae90:	2001      	movs	r0, #1
 800ae92:	f000 f997 	bl	800b1c4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800ae96:	bf00      	nop
}
 800ae98:	3740      	adds	r7, #64	@ 0x40
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	080113ec 	.word	0x080113ec
 800aea4:	080097d1 	.word	0x080097d1
 800aea8:	200003e0 	.word	0x200003e0
 800aeac:	0800b2ad 	.word	0x0800b2ad

0800aeb0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08a      	sub	sp, #40	@ 0x28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800aeb8:	2392      	movs	r3, #146	@ 0x92
 800aeba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3301      	adds	r3, #1
 800aec2:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	2bff      	cmp	r3, #255	@ 0xff
 800aeca:	d053      	beq.n	800af74 <SVCCTL_App_Notification+0xc4>
 800aecc:	2bff      	cmp	r3, #255	@ 0xff
 800aece:	f300 80a1 	bgt.w	800b014 <SVCCTL_App_Notification+0x164>
 800aed2:	2b05      	cmp	r3, #5
 800aed4:	d002      	beq.n	800aedc <SVCCTL_App_Notification+0x2c>
 800aed6:	2b3e      	cmp	r3, #62	@ 0x3e
 800aed8:	d020      	beq.n	800af1c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800aeda:	e09b      	b.n	800b014 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	3302      	adds	r3, #2
 800aee0:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	4b4e      	ldr	r3, [pc, #312]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800aeec:	8adb      	ldrh	r3, [r3, #22]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d106      	bne.n	800af00 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800aef2:	4b4c      	ldr	r3, [pc, #304]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800aef8:	4b4a      	ldr	r3, [pc, #296]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800af00:	2001      	movs	r0, #1
 800af02:	f000 f95f 	bl	800b1c4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800af06:	4b48      	ldr	r3, [pc, #288]	@ (800b028 <SVCCTL_App_Notification+0x178>)
 800af08:	2201      	movs	r2, #1
 800af0a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800af0c:	4b45      	ldr	r3, [pc, #276]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800af0e:	8ada      	ldrh	r2, [r3, #22]
 800af10:	4b45      	ldr	r3, [pc, #276]	@ (800b028 <SVCCTL_App_Notification+0x178>)
 800af12:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800af14:	4844      	ldr	r0, [pc, #272]	@ (800b028 <SVCCTL_App_Notification+0x178>)
 800af16:	f000 fc33 	bl	800b780 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800af1a:	e07e      	b.n	800b01a <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	3302      	adds	r3, #2
 800af20:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d001      	beq.n	800af2e <SVCCTL_App_Notification+0x7e>
 800af2a:	2b03      	cmp	r3, #3
          break;
 800af2c:	e021      	b.n	800af72 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	3301      	adds	r3, #1
 800af32:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800af34:	4b3b      	ldr	r3, [pc, #236]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800af36:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d104      	bne.n	800af48 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800af3e:	4b39      	ldr	r3, [pc, #228]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800af40:	2206      	movs	r2, #6
 800af42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800af46:	e003      	b.n	800af50 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800af48:	4b36      	ldr	r3, [pc, #216]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800af4a:	2205      	movs	r2, #5
 800af4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af56:	b29a      	uxth	r2, r3
 800af58:	4b32      	ldr	r3, [pc, #200]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800af5a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800af5c:	4b32      	ldr	r3, [pc, #200]	@ (800b028 <SVCCTL_App_Notification+0x178>)
 800af5e:	2200      	movs	r2, #0
 800af60:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800af62:	4b30      	ldr	r3, [pc, #192]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800af64:	8ada      	ldrh	r2, [r3, #22]
 800af66:	4b30      	ldr	r3, [pc, #192]	@ (800b028 <SVCCTL_App_Notification+0x178>)
 800af68:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800af6a:	482f      	ldr	r0, [pc, #188]	@ (800b028 <SVCCTL_App_Notification+0x178>)
 800af6c:	f000 fc08 	bl	800b780 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800af70:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800af72:	e052      	b.n	800b01a <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	3302      	adds	r3, #2
 800af78:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	b29b      	uxth	r3, r3
 800af80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af84:	d040      	beq.n	800b008 <SVCCTL_App_Notification+0x158>
 800af86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af8a:	dc45      	bgt.n	800b018 <SVCCTL_App_Notification+0x168>
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d03d      	beq.n	800b00c <SVCCTL_App_Notification+0x15c>
 800af90:	2b04      	cmp	r3, #4
 800af92:	db41      	blt.n	800b018 <SVCCTL_App_Notification+0x168>
 800af94:	f240 420a 	movw	r2, #1034	@ 0x40a
 800af98:	4293      	cmp	r3, r2
 800af9a:	dc3d      	bgt.n	800b018 <SVCCTL_App_Notification+0x168>
 800af9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afa0:	dd3a      	ble.n	800b018 <SVCCTL_App_Notification+0x168>
 800afa2:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800afa6:	2b09      	cmp	r3, #9
 800afa8:	d836      	bhi.n	800b018 <SVCCTL_App_Notification+0x168>
 800afaa:	a201      	add	r2, pc, #4	@ (adr r2, 800afb0 <SVCCTL_App_Notification+0x100>)
 800afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb0:	0800b001 	.word	0x0800b001
 800afb4:	0800afd9 	.word	0x0800afd9
 800afb8:	0800b019 	.word	0x0800b019
 800afbc:	0800b019 	.word	0x0800b019
 800afc0:	0800b019 	.word	0x0800b019
 800afc4:	0800b019 	.word	0x0800b019
 800afc8:	0800b011 	.word	0x0800b011
 800afcc:	0800b019 	.word	0x0800b019
 800afd0:	0800afed 	.word	0x0800afed
 800afd4:	0800b011 	.word	0x0800b011
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800afd8:	4b12      	ldr	r3, [pc, #72]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800afda:	8adb      	ldrh	r3, [r3, #22]
 800afdc:	4913      	ldr	r1, [pc, #76]	@ (800b02c <SVCCTL_App_Notification+0x17c>)
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fd fa59 	bl	8008496 <aci_gap_pass_key_resp>
 800afe4:	4603      	mov	r3, r0
 800afe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800afea:	e012      	b.n	800b012 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800afec:	4b0d      	ldr	r3, [pc, #52]	@ (800b024 <SVCCTL_App_Notification+0x174>)
 800afee:	8adb      	ldrh	r3, [r3, #22]
 800aff0:	2101      	movs	r1, #1
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fd fbf9 	bl	80087ea <aci_gap_numeric_comparison_value_confirm_yesno>
 800aff8:	4603      	mov	r3, r0
 800affa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800affe:	e008      	b.n	800b012 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	3302      	adds	r3, #2
 800b004:	61bb      	str	r3, [r7, #24]
          break;
 800b006:	e004      	b.n	800b012 <SVCCTL_App_Notification+0x162>
          break;
 800b008:	bf00      	nop
 800b00a:	e005      	b.n	800b018 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b00c:	bf00      	nop
 800b00e:	e003      	b.n	800b018 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b010:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b012:	e001      	b.n	800b018 <SVCCTL_App_Notification+0x168>
      break;
 800b014:	bf00      	nop
 800b016:	e000      	b.n	800b01a <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b018:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b01a:	2301      	movs	r3, #1
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3728      	adds	r7, #40	@ 0x28
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	200003e0 	.word	0x200003e0
 800b028:	20000464 	.word	0x20000464
 800b02c:	0001b207 	.word	0x0001b207

0800b030 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b036:	4b06      	ldr	r3, [pc, #24]	@ (800b050 <Ble_Tl_Init+0x20>)
 800b038:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b03a:	4b06      	ldr	r3, [pc, #24]	@ (800b054 <Ble_Tl_Init+0x24>)
 800b03c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b03e:	463b      	mov	r3, r7
 800b040:	4619      	mov	r1, r3
 800b042:	4805      	ldr	r0, [pc, #20]	@ (800b058 <Ble_Tl_Init+0x28>)
 800b044:	f7fe fba8 	bl	8009798 <hci_init>

  return;
 800b048:	bf00      	nop
}
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	200300d8 	.word	0x200300d8
 800b054:	0800b35d 	.word	0x0800b35d
 800b058:	0800b325 	.word	0x0800b325

0800b05c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05e:	b08d      	sub	sp, #52	@ 0x34
 800b060:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b062:	2300      	movs	r3, #0
 800b064:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b066:	2392      	movs	r3, #146	@ 0x92
 800b068:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b06a:	f7fe f8be 	bl	80091ea <hci_reset>
 800b06e:	4603      	mov	r3, r0
 800b070:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b072:	f000 f8d7 	bl	800b224 <BleGetBdAddress>
 800b076:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	2106      	movs	r1, #6
 800b07c:	2000      	movs	r0, #0
 800b07e:	f7fd ff74 	bl	8008f6a <aci_hal_write_config_data>
 800b082:	4603      	mov	r3, r0
 800b084:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b086:	4a4a      	ldr	r2, [pc, #296]	@ (800b1b0 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800b088:	2110      	movs	r1, #16
 800b08a:	2018      	movs	r0, #24
 800b08c:	f7fd ff6d 	bl	8008f6a <aci_hal_write_config_data>
 800b090:	4603      	mov	r3, r0
 800b092:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b094:	4a47      	ldr	r2, [pc, #284]	@ (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800b096:	2110      	movs	r1, #16
 800b098:	2008      	movs	r0, #8
 800b09a:	f7fd ff66 	bl	8008f6a <aci_hal_write_config_data>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b0a2:	211f      	movs	r1, #31
 800b0a4:	2001      	movs	r0, #1
 800b0a6:	f7fd ffe5 	bl	8009074 <aci_hal_set_tx_power_level>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b0ae:	f7fd fc03 	bl	80088b8 <aci_gatt_init>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	f043 0301 	orr.w	r3, r3, #1
 800b0c0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d01f      	beq.n	800b108 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b0c8:	4b3b      	ldr	r3, [pc, #236]	@ (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800b0ca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b0cc:	1dba      	adds	r2, r7, #6
 800b0ce:	7bf8      	ldrb	r0, [r7, #15]
 800b0d0:	1cbb      	adds	r3, r7, #2
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	1d3b      	adds	r3, r7, #4
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	220c      	movs	r2, #12
 800b0dc:	2100      	movs	r1, #0
 800b0de:	f7fd fa41 	bl	8008564 <aci_gap_init>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b0e6:	88fc      	ldrh	r4, [r7, #6]
 800b0e8:	88bd      	ldrh	r5, [r7, #4]
 800b0ea:	68b8      	ldr	r0, [r7, #8]
 800b0ec:	f7f5 f848 	bl	8000180 <strlen>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7fd fddd 	bl	8008cbe <aci_gatt_update_char_value>
 800b104:	4603      	mov	r3, r0
 800b106:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b108:	88f8      	ldrh	r0, [r7, #6]
 800b10a:	8879      	ldrh	r1, [r7, #2]
 800b10c:	463b      	mov	r3, r7
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	2302      	movs	r3, #2
 800b112:	2200      	movs	r2, #0
 800b114:	f7fd fdd3 	bl	8008cbe <aci_gatt_update_char_value>
 800b118:	4603      	mov	r3, r0
 800b11a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b11c:	2202      	movs	r2, #2
 800b11e:	2102      	movs	r1, #2
 800b120:	2000      	movs	r0, #0
 800b122:	f7fe f886 	bl	8009232 <hci_le_set_default_phy>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b12a:	4b24      	ldr	r3, [pc, #144]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b12c:	2201      	movs	r2, #1
 800b12e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b130:	4b22      	ldr	r3, [pc, #136]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f7fd f896 	bl	8008266 <aci_gap_set_io_capability>
 800b13a:	4603      	mov	r3, r0
 800b13c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b13e:	4b1f      	ldr	r3, [pc, #124]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b140:	2201      	movs	r2, #1
 800b142:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b144:	4b1d      	ldr	r3, [pc, #116]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b146:	2208      	movs	r2, #8
 800b148:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b14a:	4b1c      	ldr	r3, [pc, #112]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b14c:	2210      	movs	r2, #16
 800b14e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b150:	4b1a      	ldr	r3, [pc, #104]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b152:	2200      	movs	r2, #0
 800b154:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b156:	4b19      	ldr	r3, [pc, #100]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b158:	4a19      	ldr	r2, [pc, #100]	@ (800b1c0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800b15a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b15c:	4b17      	ldr	r3, [pc, #92]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b15e:	2200      	movs	r2, #0
 800b160:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b162:	4b16      	ldr	r3, [pc, #88]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b164:	789c      	ldrb	r4, [r3, #2]
 800b166:	4b15      	ldr	r3, [pc, #84]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b168:	785d      	ldrb	r5, [r3, #1]
 800b16a:	4b14      	ldr	r3, [pc, #80]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b16c:	791b      	ldrb	r3, [r3, #4]
 800b16e:	4a13      	ldr	r2, [pc, #76]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b170:	7952      	ldrb	r2, [r2, #5]
 800b172:	4912      	ldr	r1, [pc, #72]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b174:	78c9      	ldrb	r1, [r1, #3]
 800b176:	4811      	ldr	r0, [pc, #68]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b178:	6880      	ldr	r0, [r0, #8]
 800b17a:	2600      	movs	r6, #0
 800b17c:	9604      	str	r6, [sp, #16]
 800b17e:	9003      	str	r0, [sp, #12]
 800b180:	9102      	str	r1, [sp, #8]
 800b182:	9201      	str	r2, [sp, #4]
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	2300      	movs	r3, #0
 800b188:	2201      	movs	r2, #1
 800b18a:	4629      	mov	r1, r5
 800b18c:	4620      	mov	r0, r4
 800b18e:	f7fd f8be 	bl	800830e <aci_gap_set_authentication_requirement>
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b196:	4b09      	ldr	r3, [pc, #36]	@ (800b1bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b198:	789b      	ldrb	r3, [r3, #2]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800b19e:	f7fd fb00 	bl	80087a2 <aci_gap_configure_whitelist>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800b1a6:	bf00      	nop
 800b1a8:	371c      	adds	r7, #28
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	080123a4 	.word	0x080123a4
 800b1b4:	080123b4 	.word	0x080123b4
 800b1b8:	08011428 	.word	0x08011428
 800b1bc:	200003e0 	.word	0x200003e0
 800b1c0:	0001b207 	.word	0x0001b207

0800b1c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08c      	sub	sp, #48	@ 0x30
 800b1c8:	af08      	add	r7, sp, #32
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b1ce:	2392      	movs	r3, #146	@ 0x92
 800b1d0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b1d2:	4a12      	ldr	r2, [pc, #72]	@ (800b21c <Adv_Request+0x58>)
 800b1d4:	79fb      	ldrb	r3, [r7, #7]
 800b1d6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b1da:	2300      	movs	r3, #0
 800b1dc:	9306      	str	r3, [sp, #24]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9305      	str	r3, [sp, #20]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9303      	str	r3, [sp, #12]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	9302      	str	r3, [sp, #8]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	22a0      	movs	r2, #160	@ 0xa0
 800b1fa:	2180      	movs	r1, #128	@ 0x80
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	f7fc ff38 	bl	8008072 <aci_gap_set_discoverable>
 800b202:	4603      	mov	r3, r0
 800b204:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b206:	4906      	ldr	r1, [pc, #24]	@ (800b220 <Adv_Request+0x5c>)
 800b208:	2018      	movs	r0, #24
 800b20a:	f7fd fa58 	bl	80086be <aci_gap_update_adv_data>
 800b20e:	4603      	mov	r3, r0
 800b210:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b212:	bf00      	nop
}
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	200003e0 	.word	0x200003e0
 800b220:	20000010 	.word	0x20000010

0800b224 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b22a:	f7ff fdc3 	bl	800adb4 <LL_FLASH_GetUDN>
 800b22e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b236:	d023      	beq.n	800b280 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b238:	f7ff fdd4 	bl	800ade4 <LL_FLASH_GetSTCompanyID>
 800b23c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b23e:	f7ff fdc5 	bl	800adcc <LL_FLASH_GetDeviceID>
 800b242:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	b2da      	uxtb	r2, r3
 800b248:	4b16      	ldr	r3, [pc, #88]	@ (800b2a4 <BleGetBdAddress+0x80>)
 800b24a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	0a1b      	lsrs	r3, r3, #8
 800b250:	b2da      	uxtb	r2, r3
 800b252:	4b14      	ldr	r3, [pc, #80]	@ (800b2a4 <BleGetBdAddress+0x80>)
 800b254:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	b2da      	uxtb	r2, r3
 800b25a:	4b12      	ldr	r3, [pc, #72]	@ (800b2a4 <BleGetBdAddress+0x80>)
 800b25c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	b2da      	uxtb	r2, r3
 800b262:	4b10      	ldr	r3, [pc, #64]	@ (800b2a4 <BleGetBdAddress+0x80>)
 800b264:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	0a1b      	lsrs	r3, r3, #8
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a4 <BleGetBdAddress+0x80>)
 800b26e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	0c1b      	lsrs	r3, r3, #16
 800b274:	b2da      	uxtb	r2, r3
 800b276:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a4 <BleGetBdAddress+0x80>)
 800b278:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b27a:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a4 <BleGetBdAddress+0x80>)
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	e00b      	b.n	800b298 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b280:	2000      	movs	r0, #0
 800b282:	f7fe ff9d 	bl	800a1c0 <OTP_Read>
 800b286:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	617b      	str	r3, [r7, #20]
 800b292:	e001      	b.n	800b298 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b294:	4b04      	ldr	r3, [pc, #16]	@ (800b2a8 <BleGetBdAddress+0x84>)
 800b296:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b298:	697b      	ldr	r3, [r7, #20]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	200003d8 	.word	0x200003d8
 800b2a8:	0801239c 	.word	0x0801239c

0800b2ac <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b2dc <Adv_Cancel+0x30>)
 800b2b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b2b8:	2b05      	cmp	r3, #5
 800b2ba:	d00a      	beq.n	800b2d2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b2bc:	2392      	movs	r3, #146	@ 0x92
 800b2be:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b2c0:	f7fc feb3 	bl	800802a <aci_gap_set_non_discoverable>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b2c8:	4b04      	ldr	r3, [pc, #16]	@ (800b2dc <Adv_Cancel+0x30>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b2d0:	bf00      	nop
 800b2d2:	bf00      	nop
}
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	200003e0 	.word	0x200003e0

0800b2e0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	2002      	movs	r0, #2
 800b2ec:	f003 fc7e 	bl	800ebec <UTIL_SEQ_SetTask>

  return;
 800b2f0:	bf00      	nop
}
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b300:	2001      	movs	r0, #1
 800b302:	f003 fcdf 	bl	800ecc4 <UTIL_SEQ_SetEvt>

  return;
 800b306:	bf00      	nop
}
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b082      	sub	sp, #8
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b316:	2001      	movs	r0, #1
 800b318:	f003 fcf4 	bl	800ed04 <UTIL_SEQ_WaitEvt>

  return;
 800b31c:	bf00      	nop
}
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	3308      	adds	r3, #8
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe f8e6 	bl	8009508 <SVCCTL_UserEvtRx>
 800b33c:	4603      	mov	r3, r0
 800b33e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b340:	7afb      	ldrb	r3, [r7, #11]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2201      	movs	r2, #1
 800b34a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b34c:	e003      	b.n	800b356 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	701a      	strb	r2, [r3, #0]
  return;
 800b354:	bf00      	nop
}
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <BLE_StatusNot+0x16>
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d007      	beq.n	800b380 <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b370:	e00d      	b.n	800b38e <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b372:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800b376:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f003 fc63 	bl	800ec44 <UTIL_SEQ_PauseTask>
      break;
 800b37e:	e006      	b.n	800b38e <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b380:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800b384:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f003 fc7c 	bl	800ec84 <UTIL_SEQ_ResumeTask>
      break;
 800b38c:	bf00      	nop
  }

  return;
 800b38e:	bf00      	nop
}
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
	...

0800b398 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800b398:	b5b0      	push	{r4, r5, r7, lr}
 800b39a:	b098      	sub	sp, #96	@ 0x60
 800b39c:	af04      	add	r7, sp, #16
 800b39e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	  printf("custom_app.c app_notification\r\n");
 800b3a0:	48b7      	ldr	r0, [pc, #732]	@ (800b680 <Custom_STM_App_Notification+0x2e8>)
 800b3a2:	f003 fe69 	bl	800f078 <puts>

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	2b0a      	cmp	r3, #10
 800b3ac:	f200 81d0 	bhi.w	800b750 <Custom_STM_App_Notification+0x3b8>
 800b3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b8 <Custom_STM_App_Notification+0x20>)
 800b3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b6:	bf00      	nop
 800b3b8:	0800b3f1 	.word	0x0800b3f1
 800b3bc:	0800b3fd 	.word	0x0800b3fd
 800b3c0:	0800b405 	.word	0x0800b405
 800b3c4:	0800b40d 	.word	0x0800b40d
 800b3c8:	0800b415 	.word	0x0800b415
 800b3cc:	0800b4bd 	.word	0x0800b4bd
 800b3d0:	0800b6d5 	.word	0x0800b6d5
 800b3d4:	0800b72d 	.word	0x0800b72d
 800b3d8:	0800b749 	.word	0x0800b749
 800b3dc:	0800b751 	.word	0x0800b751
 800b3e0:	0800b3e5 	.word	0x0800b3e5
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

	 /* eigene Characteristic */
	 case CUSTOM_STM_NEW_CHAR_READ_EVT:
	 /* USER CODE BEGIN CUSTOM_STM_SACTDAT_READ_EVT */
	   printf("custom_app.c s new char read event\r\n");
 800b3e4:	48a7      	ldr	r0, [pc, #668]	@ (800b684 <Custom_STM_App_Notification+0x2ec>)
 800b3e6:	f003 fe47 	bl	800f078 <puts>
	   Process_Read_Request_For_Data_v2();
 800b3ea:	f000 fab5 	bl	800b958 <Process_Read_Request_For_Data_v2>
	 /* USER CODE END CUSTOM_STM_SACTDAT_READ_EVT */
	 break;
 800b3ee:	e1b6      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>

    /* activityData */
    case CUSTOM_STM_SACTDAT_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SACTDAT_READ_EVT */
    	printf("custom_app.c s activity data read event\r\n");
 800b3f0:	48a5      	ldr	r0, [pc, #660]	@ (800b688 <Custom_STM_App_Notification+0x2f0>)
 800b3f2:	f003 fe41 	bl	800f078 <puts>
		Process_Read_Request_For_Data();
 800b3f6:	f000 fad9 	bl	800b9ac <Process_Read_Request_For_Data>
      /* USER CODE END CUSTOM_STM_SACTDAT_READ_EVT */
      break;
 800b3fa:	e1b0      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>

    case CUSTOM_STM_SACTDAT_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SACTDAT_NOTIFY_ENABLED_EVT */
    	printf("custom_app.c s activity data notify enabled event\r\n");
 800b3fc:	48a3      	ldr	r0, [pc, #652]	@ (800b68c <Custom_STM_App_Notification+0x2f4>)
 800b3fe:	f003 fe3b 	bl	800f078 <puts>
      /* USER CODE END CUSTOM_STM_SACTDAT_NOTIFY_ENABLED_EVT */
      break;
 800b402:	e1ac      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>

    case CUSTOM_STM_SACTDAT_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SACTDAT_NOTIFY_DISABLED_EVT */
    	printf("custom_app.c s activity data notify disabled event\r\n");
 800b404:	48a2      	ldr	r0, [pc, #648]	@ (800b690 <Custom_STM_App_Notification+0x2f8>)
 800b406:	f003 fe37 	bl	800f078 <puts>
      /* USER CODE END CUSTOM_STM_SACTDAT_NOTIFY_DISABLED_EVT */
      break;
 800b40a:	e1a8      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>

    case CUSTOM_STM_NUMACTDAT_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_NUMACTDAT_READ_EVT */
    	printf("custom_app.c num activity data read event\r\n");
 800b40c:	48a1      	ldr	r0, [pc, #644]	@ (800b694 <Custom_STM_App_Notification+0x2fc>)
 800b40e:	f003 fe33 	bl	800f078 <puts>
      /* USER CODE END CUSTOM_STM_NUMACTDAT_READ_EVT */
      break;
 800b412:	e1a4      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>

    case CUSTOM_STM_RTC_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_RTC_READ_EVT */
    	printf("custom_app.c rtc read event\r\n");
 800b414:	48a0      	ldr	r0, [pc, #640]	@ (800b698 <Custom_STM_App_Notification+0x300>)
 800b416:	f003 fe2f 	bl	800f078 <puts>
    	RTC_TimeTypeDef rtcTime;
    	RTC_DateTypeDef rtcDate;
    	uint8_t transmitData[6] =  {0};
 800b41a:	f107 0320 	add.w	r3, r7, #32
 800b41e:	2200      	movs	r2, #0
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	809a      	strh	r2, [r3, #4]
    	uint8_t returnValue = 0;
 800b424:	2300      	movs	r3, #0
 800b426:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800b42a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b42e:	2200      	movs	r2, #0
 800b430:	4619      	mov	r1, r3
 800b432:	489a      	ldr	r0, [pc, #616]	@ (800b69c <Custom_STM_App_Notification+0x304>)
 800b434:	f7fc fc16 	bl	8007c64 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800b438:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b43c:	2200      	movs	r2, #0
 800b43e:	4619      	mov	r1, r3
 800b440:	4896      	ldr	r0, [pc, #600]	@ (800b69c <Custom_STM_App_Notification+0x304>)
 800b442:	f7fc fd19 	bl	8007e78 <HAL_RTC_GetDate>

		transmitData[0] = rtcDate.Date;
 800b446:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b44a:	f887 3020 	strb.w	r3, [r7, #32]
		transmitData[1] = rtcDate.Month;
 800b44e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b452:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		transmitData[2] = rtcDate.Year;
 800b456:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b45a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		transmitData[3] = rtcTime.Hours;
 800b45e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		transmitData[4] = rtcTime.Minutes;
 800b466:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b46a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		transmitData[5] = rtcTime.Seconds;
 800b46e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b472:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		printf("custom_app.c accel updating date: %u.%u.%u %u:%u:%u\r\n",
				transmitData[0], transmitData[1], transmitData[2], transmitData[3], transmitData[4], transmitData[5]);
 800b476:	f897 3020 	ldrb.w	r3, [r7, #32]
		printf("custom_app.c accel updating date: %u.%u.%u %u:%u:%u\r\n",
 800b47a:	4618      	mov	r0, r3
				transmitData[0], transmitData[1], transmitData[2], transmitData[3], transmitData[4], transmitData[5]);
 800b47c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
		printf("custom_app.c accel updating date: %u.%u.%u %u:%u:%u\r\n",
 800b480:	461c      	mov	r4, r3
				transmitData[0], transmitData[1], transmitData[2], transmitData[3], transmitData[4], transmitData[5]);
 800b482:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
		printf("custom_app.c accel updating date: %u.%u.%u %u:%u:%u\r\n",
 800b486:	461d      	mov	r5, r3
				transmitData[0], transmitData[1], transmitData[2], transmitData[3], transmitData[4], transmitData[5]);
 800b488:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b48c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b490:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
		printf("custom_app.c accel updating date: %u.%u.%u %u:%u:%u\r\n",
 800b494:	9102      	str	r1, [sp, #8]
 800b496:	9201      	str	r2, [sp, #4]
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	462b      	mov	r3, r5
 800b49c:	4622      	mov	r2, r4
 800b49e:	4601      	mov	r1, r0
 800b4a0:	487f      	ldr	r0, [pc, #508]	@ (800b6a0 <Custom_STM_App_Notification+0x308>)
 800b4a2:	f003 fd81 	bl	800efa8 <iprintf>

    	returnValue = Ble_Update_Characteristic(CUSTOM_STM_RTC, transmitData, sizeof(transmitData));
 800b4a6:	f107 0320 	add.w	r3, r7, #32
 800b4aa:	2206      	movs	r2, #6
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	2002      	movs	r0, #2
 800b4b0:	f002 ff94 	bl	800e3dc <Ble_Update_Characteristic>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
      /* USER CODE END CUSTOM_STM_RTC_READ_EVT */
      break;
 800b4ba:	e150      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>

    case CUSTOM_STM_RTC_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_RTC_WRITE_EVT */
    	printf("custom_app.c rtc write event\r\n");
 800b4bc:	4879      	ldr	r0, [pc, #484]	@ (800b6a4 <Custom_STM_App_Notification+0x30c>)
 800b4be:	f003 fddb 	bl	800f078 <puts>

    	// a new date-time has to be provided in the format of an 8 bit array:
    	// [day], [month], [year], [hour], [minute], [second]
    	// year is a value between 0 and 99

		RTC_TimeTypeDef sTime = {0};
 800b4c2:	f107 030c 	add.w	r3, r7, #12
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
 800b4ca:	605a      	str	r2, [r3, #4]
 800b4cc:	609a      	str	r2, [r3, #8]
 800b4ce:	60da      	str	r2, [r3, #12]
 800b4d0:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60bb      	str	r3, [r7, #8]

		uint8_t newDay = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		uint8_t newMonth = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		uint8_t newYear = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
		uint8_t newHour = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
		uint8_t newMinute = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
		uint8_t newSecond = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		printf("raw data: ");
 800b4fa:	486b      	ldr	r0, [pc, #428]	@ (800b6a8 <Custom_STM_App_Notification+0x310>)
 800b4fc:	f003 fd54 	bl	800efa8 <iprintf>
		for(uint8_t i=0; i< 6; i++)
 800b500:	2300      	movs	r3, #0
 800b502:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800b506:	e00e      	b.n	800b526 <Custom_STM_App_Notification+0x18e>
		{
			printf("%u - ", pNotification->DataTransfered.pPayload[i]);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b510:	4413      	add	r3, r2
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	4619      	mov	r1, r3
 800b516:	4865      	ldr	r0, [pc, #404]	@ (800b6ac <Custom_STM_App_Notification+0x314>)
 800b518:	f003 fd46 	bl	800efa8 <iprintf>
		for(uint8_t i=0; i< 6; i++)
 800b51c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b520:	3301      	adds	r3, #1
 800b522:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800b526:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	d9ec      	bls.n	800b508 <Custom_STM_App_Notification+0x170>
		}
		printf("\r\n");
 800b52e:	4860      	ldr	r0, [pc, #384]	@ (800b6b0 <Custom_STM_App_Notification+0x318>)
 800b530:	f003 fda2 	bl	800f078 <puts>
		newDay = pNotification->DataTransfered.pPayload[0];
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		newMonth = pNotification->DataTransfered.pPayload[1];
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	785b      	ldrb	r3, [r3, #1]
 800b544:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		newYear = pNotification->DataTransfered.pPayload[2];
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	789b      	ldrb	r3, [r3, #2]
 800b54e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
		newHour = pNotification->DataTransfered.pPayload[3];
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	78db      	ldrb	r3, [r3, #3]
 800b558:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
		newMinute = pNotification->DataTransfered.pPayload[4];
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	791b      	ldrb	r3, [r3, #4]
 800b562:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
		newSecond = pNotification->DataTransfered.pPayload[5];
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	795b      	ldrb	r3, [r3, #5]
 800b56c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		printf("new date set: %u.%u.%u %u:%u:%u\r\n", newDay, newMonth, newYear, newHour, newMinute, newSecond);
 800b570:	f897 004c 	ldrb.w	r0, [r7, #76]	@ 0x4c
 800b574:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800b578:	f897 504a 	ldrb.w	r5, [r7, #74]	@ 0x4a
 800b57c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b580:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800b584:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800b588:	9102      	str	r1, [sp, #8]
 800b58a:	9201      	str	r2, [sp, #4]
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	462b      	mov	r3, r5
 800b590:	4622      	mov	r2, r4
 800b592:	4601      	mov	r1, r0
 800b594:	4847      	ldr	r0, [pc, #284]	@ (800b6b4 <Custom_STM_App_Notification+0x31c>)
 800b596:	f003 fd07 	bl	800efa8 <iprintf>

		if(newDay < 32 && newMonth < 13 && newYear < 100 && newHour < 25 && newMinute < 61 && newSecond < 61)
 800b59a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b59e:	2b1f      	cmp	r3, #31
 800b5a0:	d848      	bhi.n	800b634 <Custom_STM_App_Notification+0x29c>
 800b5a2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800b5a6:	2b0c      	cmp	r3, #12
 800b5a8:	d844      	bhi.n	800b634 <Custom_STM_App_Notification+0x29c>
 800b5aa:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b5ae:	2b63      	cmp	r3, #99	@ 0x63
 800b5b0:	d840      	bhi.n	800b634 <Custom_STM_App_Notification+0x29c>
 800b5b2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b5b6:	2b18      	cmp	r3, #24
 800b5b8:	d83c      	bhi.n	800b634 <Custom_STM_App_Notification+0x29c>
 800b5ba:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800b5be:	2b3c      	cmp	r3, #60	@ 0x3c
 800b5c0:	d838      	bhi.n	800b634 <Custom_STM_App_Notification+0x29c>
 800b5c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b5c6:	2b3c      	cmp	r3, #60	@ 0x3c
 800b5c8:	d834      	bhi.n	800b634 <Custom_STM_App_Notification+0x29c>
		{
			  sTime.Hours = newHour;
 800b5ca:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b5ce:	733b      	strb	r3, [r7, #12]
			  sTime.Minutes = newMinute;
 800b5d0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800b5d4:	737b      	strb	r3, [r7, #13]
			  sTime.Seconds = newSecond;
 800b5d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b5da:	73bb      	strb	r3, [r7, #14]
			  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800b5dc:	f107 030c 	add.w	r3, r7, #12
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	482d      	ldr	r0, [pc, #180]	@ (800b69c <Custom_STM_App_Notification+0x304>)
 800b5e6:	f7fc fa79 	bl	8007adc <HAL_RTC_SetTime>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d003      	beq.n	800b5f8 <Custom_STM_App_Notification+0x260>
			  {
			    printf("updating time NOT successful\r\n");
 800b5f0:	4831      	ldr	r0, [pc, #196]	@ (800b6b8 <Custom_STM_App_Notification+0x320>)
 800b5f2:	f003 fd41 	bl	800f078 <puts>
 800b5f6:	e002      	b.n	800b5fe <Custom_STM_App_Notification+0x266>
			  } else
			  {
				  printf("updated time successfully\r\n");
 800b5f8:	4830      	ldr	r0, [pc, #192]	@ (800b6bc <Custom_STM_App_Notification+0x324>)
 800b5fa:	f003 fd3d 	bl	800f078 <puts>
			  }

			  sDate.Month = newMonth;
 800b5fe:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800b602:	727b      	strb	r3, [r7, #9]
			  sDate.Date = newDay;
 800b604:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b608:	72bb      	strb	r3, [r7, #10]
			  sDate.Year = newYear;
 800b60a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b60e:	72fb      	strb	r3, [r7, #11]

			  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800b610:	f107 0308 	add.w	r3, r7, #8
 800b614:	2200      	movs	r2, #0
 800b616:	4619      	mov	r1, r3
 800b618:	4820      	ldr	r0, [pc, #128]	@ (800b69c <Custom_STM_App_Notification+0x304>)
 800b61a:	f7fc fb7f 	bl	8007d1c <HAL_RTC_SetDate>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d003      	beq.n	800b62c <Custom_STM_App_Notification+0x294>
			  {
				    printf("updating date NOT successful\r\n");
 800b624:	4826      	ldr	r0, [pc, #152]	@ (800b6c0 <Custom_STM_App_Notification+0x328>)
 800b626:	f003 fd27 	bl	800f078 <puts>
			  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800b62a:	e006      	b.n	800b63a <Custom_STM_App_Notification+0x2a2>
			  } else
			  {
				  printf("updated date successfully\r\n");
 800b62c:	4825      	ldr	r0, [pc, #148]	@ (800b6c4 <Custom_STM_App_Notification+0x32c>)
 800b62e:	f003 fd23 	bl	800f078 <puts>
			  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800b632:	e002      	b.n	800b63a <Custom_STM_App_Notification+0x2a2>
			  }
		} else
		{
			printf("incorrect time format\r\n");
 800b634:	4824      	ldr	r0, [pc, #144]	@ (800b6c8 <Custom_STM_App_Notification+0x330>)
 800b636:	f003 fd1f 	bl	800f078 <puts>
		}

		// just for debugging:
		printf("checking new date: ");
 800b63a:	4824      	ldr	r0, [pc, #144]	@ (800b6cc <Custom_STM_App_Notification+0x334>)
 800b63c:	f003 fcb4 	bl	800efa8 <iprintf>
		uint8_t* dateTimePointer = Get_Date_Time();
 800b640:	f000 fa34 	bl	800baac <Get_Date_Time>
 800b644:	6438      	str	r0, [r7, #64]	@ 0x40
		for(uint8_t i=0; i<6; i++)
 800b646:	2300      	movs	r3, #0
 800b648:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800b64c:	e00d      	b.n	800b66a <Custom_STM_App_Notification+0x2d2>
		{
			printf("%u ", dateTimePointer[i]);
 800b64e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b654:	4413      	add	r3, r2
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	4619      	mov	r1, r3
 800b65a:	481d      	ldr	r0, [pc, #116]	@ (800b6d0 <Custom_STM_App_Notification+0x338>)
 800b65c:	f003 fca4 	bl	800efa8 <iprintf>
		for(uint8_t i=0; i<6; i++)
 800b660:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b664:	3301      	adds	r3, #1
 800b666:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800b66a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800b66e:	2b05      	cmp	r3, #5
 800b670:	d9ed      	bls.n	800b64e <Custom_STM_App_Notification+0x2b6>
		}
		printf("\r\n");
 800b672:	480f      	ldr	r0, [pc, #60]	@ (800b6b0 <Custom_STM_App_Notification+0x318>)
 800b674:	f003 fd00 	bl	800f078 <puts>


		printf("\r\n");
 800b678:	480d      	ldr	r0, [pc, #52]	@ (800b6b0 <Custom_STM_App_Notification+0x318>)
 800b67a:	f003 fcfd 	bl	800f078 <puts>
      /* USER CODE END CUSTOM_STM_RTC_WRITE_EVT */
      break;
 800b67e:	e06e      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>
 800b680:	08011438 	.word	0x08011438
 800b684:	08011458 	.word	0x08011458
 800b688:	0801147c 	.word	0x0801147c
 800b68c:	080114a8 	.word	0x080114a8
 800b690:	080114dc 	.word	0x080114dc
 800b694:	08011510 	.word	0x08011510
 800b698:	0801153c 	.word	0x0801153c
 800b69c:	20000318 	.word	0x20000318
 800b6a0:	0801155c 	.word	0x0801155c
 800b6a4:	08011594 	.word	0x08011594
 800b6a8:	080115b4 	.word	0x080115b4
 800b6ac:	080115c0 	.word	0x080115c0
 800b6b0:	080115c8 	.word	0x080115c8
 800b6b4:	080115cc 	.word	0x080115cc
 800b6b8:	080115f0 	.word	0x080115f0
 800b6bc:	08011610 	.word	0x08011610
 800b6c0:	0801162c 	.word	0x0801162c
 800b6c4:	0801164c 	.word	0x0801164c
 800b6c8:	08011668 	.word	0x08011668
 800b6cc:	08011680 	.word	0x08011680
 800b6d0:	08011694 	.word	0x08011694

    case CUSTOM_STM_STEPCOUNTERINT_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STEPCOUNTERINT_READ_EVT */
    	printf("custom_app.c step counter read event\r\n");
 800b6d4:	4824      	ldr	r0, [pc, #144]	@ (800b768 <Custom_STM_App_Notification+0x3d0>)
 800b6d6:	f003 fccf 	bl	800f078 <puts>
    	// this code is executed when the step counter characteristic is read via BLE
    	// updates the step counter characteristic with the current 32 bit value of the global variable

    	transmitData[0] = stepCounterInt >> 24;
 800b6da:	4b24      	ldr	r3, [pc, #144]	@ (800b76c <Custom_STM_App_Notification+0x3d4>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	0e1b      	lsrs	r3, r3, #24
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	f887 3020 	strb.w	r3, [r7, #32]
    	transmitData[1] = stepCounterInt >> 16;
 800b6e6:	4b21      	ldr	r3, [pc, #132]	@ (800b76c <Custom_STM_App_Notification+0x3d4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	0c1b      	lsrs	r3, r3, #16
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    	transmitData[2] = stepCounterInt >> 8;
 800b6f2:	4b1e      	ldr	r3, [pc, #120]	@ (800b76c <Custom_STM_App_Notification+0x3d4>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	0a1b      	lsrs	r3, r3, #8
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    	transmitData[3] = stepCounterInt; // maybe change upper and lower byte, depending on host
 800b6fe:	4b1b      	ldr	r3, [pc, #108]	@ (800b76c <Custom_STM_App_Notification+0x3d4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	b2db      	uxtb	r3, r3
 800b704:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    	returnValue = Ble_Update_Characteristic(CUSTOM_STM_STEPCOUNTERINT, transmitData, sizeof(transmitData)); // updates the value of the characteristic to be read
 800b708:	f107 0320 	add.w	r3, r7, #32
 800b70c:	2206      	movs	r2, #6
 800b70e:	4619      	mov	r1, r3
 800b710:	2003      	movs	r0, #3
 800b712:	f002 fe63 	bl	800e3dc <Ble_Update_Characteristic>
 800b716:	4603      	mov	r3, r0
 800b718:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    	if(returnValue != BLE_STATUS_SUCCESS)
 800b71c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800b720:	2b00      	cmp	r3, #0
 800b722:	d019      	beq.n	800b758 <Custom_STM_App_Notification+0x3c0>
    	{
    		printf("custom_app.c updating data char NOT successful\r\n");
 800b724:	4812      	ldr	r0, [pc, #72]	@ (800b770 <Custom_STM_App_Notification+0x3d8>)
 800b726:	f003 fca7 	bl	800f078 <puts>
    	}
      /* USER CODE END CUSTOM_STM_STEPCOUNTERINT_READ_EVT */
      break;
 800b72a:	e015      	b.n	800b758 <Custom_STM_App_Notification+0x3c0>

    case CUSTOM_STM_STEPCOUNTERINT_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STEPCOUNTERINT_WRITE_EVT */
    	printf("custom_app.c step counter write event\r\n");
 800b72c:	4811      	ldr	r0, [pc, #68]	@ (800b774 <Custom_STM_App_Notification+0x3dc>)
 800b72e:	f003 fca3 	bl	800f078 <puts>
    	if(pNotification->DataTransfered.pPayload[0] == 0)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10f      	bne.n	800b75c <Custom_STM_App_Notification+0x3c4>
    	{
    		stepCounterInt = 0; // sets step counter (global variable) to 0
 800b73c:	4b0b      	ldr	r3, [pc, #44]	@ (800b76c <Custom_STM_App_Notification+0x3d4>)
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
    		Clear_Step_Counter_Reg();
 800b742:	f7ff f813 	bl	800a76c <Clear_Step_Counter_Reg>
    	}
    	// BLE update char is not necessary because the uC updates the char value to the latest written value automatically
      /* USER CODE END CUSTOM_STM_STEPCOUNTERINT_WRITE_EVT */
      break;
 800b746:	e009      	b.n	800b75c <Custom_STM_App_Notification+0x3c4>

    /* deviceData */
    case CUSTOM_STM_BATLVL_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BATLVL_READ_EVT */
    	printf("custom_app.c batLvl read event\r\n");
 800b748:	480b      	ldr	r0, [pc, #44]	@ (800b778 <Custom_STM_App_Notification+0x3e0>)
 800b74a:	f003 fc95 	bl	800f078 <puts>
      /* USER CODE END CUSTOM_STM_BATLVL_READ_EVT */
      break;
 800b74e:	e006      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */
    	printf("custom_app.c notification default event\r\n");
 800b750:	480a      	ldr	r0, [pc, #40]	@ (800b77c <Custom_STM_App_Notification+0x3e4>)
 800b752:	f003 fc91 	bl	800f078 <puts>
      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800b756:	e002      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>
      break;
 800b758:	bf00      	nop
 800b75a:	e000      	b.n	800b75e <Custom_STM_App_Notification+0x3c6>
      break;
 800b75c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800b75e:	bf00      	nop
}
 800b760:	3750      	adds	r7, #80	@ 0x50
 800b762:	46bd      	mov	sp, r7
 800b764:	bdb0      	pop	{r4, r5, r7, pc}
 800b766:	bf00      	nop
 800b768:	08011698 	.word	0x08011698
 800b76c:	20000484 	.word	0x20000484
 800b770:	080116c0 	.word	0x080116c0
 800b774:	080116f0 	.word	0x080116f0
 800b778:	08011718 	.word	0x08011718
 800b77c:	08011738 	.word	0x08011738

0800b780 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <Custom_APP_Notification+0x16>
 800b790:	2b01      	cmp	r3, #1
 800b792:	d024      	beq.n	800b7de <Custom_APP_Notification+0x5e>
 800b794:	e02f      	b.n	800b7f6 <Custom_APP_Notification+0x76>
    /* USER CODE BEGIN CUSTOM_APP_Notification_Custom_Evt_Opcode */

    /* USER CODE END P2PS_CUSTOM_Notification_Custom_Evt_Opcode */
    case CUSTOM_CONN_HANDLE_EVT :
      /* USER CODE BEGIN CUSTOM_CONN_HANDLE_EVT */
    	printf("connected\r\n");
 800b796:	481c      	ldr	r0, [pc, #112]	@ (800b808 <Custom_APP_Notification+0x88>)
 800b798:	f003 fc6e 	bl	800f078 <puts>
    	Ble_Connected_To_Client();
 800b79c:	f002 fcf0 	bl	800e180 <Ble_Connected_To_Client>
    	connectionHandle = pNotification->ConnectionHandle;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	885a      	ldrh	r2, [r3, #2]
 800b7a4:	4b19      	ldr	r3, [pc, #100]	@ (800b80c <Custom_APP_Notification+0x8c>)
 800b7a6:	801a      	strh	r2, [r3, #0]
//    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
    	ret = aci_gatt_exchange_config(connectionHandle);
 800b7a8:	4b18      	ldr	r3, [pc, #96]	@ (800b80c <Custom_APP_Notification+0x8c>)
 800b7aa:	881b      	ldrh	r3, [r3, #0]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fd fb2f 	bl	8008e10 <aci_gatt_exchange_config>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4b16      	ldr	r3, [pc, #88]	@ (800b810 <Custom_APP_Notification+0x90>)
 800b7b8:	701a      	strb	r2, [r3, #0]
    	if (ret != BLE_STATUS_SUCCESS)
 800b7ba:	4b15      	ldr	r3, [pc, #84]	@ (800b810 <Custom_APP_Notification+0x90>)
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d009      	beq.n	800b7d6 <Custom_APP_Notification+0x56>
    	{
//    		HAL_GPIO_WritePin(TESTPIN2_GPIO_Port, TESTPIN2_Pin, 1);
    		printf("custom_app.c error gatt exchange config\r\n");
 800b7c2:	4814      	ldr	r0, [pc, #80]	@ (800b814 <Custom_APP_Notification+0x94>)
 800b7c4:	f003 fc58 	bl	800f078 <puts>
    		printf("return value is %i\r\n", ret);
 800b7c8:	4b11      	ldr	r3, [pc, #68]	@ (800b810 <Custom_APP_Notification+0x90>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4812      	ldr	r0, [pc, #72]	@ (800b818 <Custom_APP_Notification+0x98>)
 800b7d0:	f003 fbea 	bl	800efa8 <iprintf>
    		printf("success gatt exchange\r\n");
    	}

//    	UTIL_SEQ_SetTask(1<<CFG_TASK_STAY_AWAKE_ID, 1);
      /* USER CODE END CUSTOM_CONN_HANDLE_EVT */
      break;
 800b7d4:	e013      	b.n	800b7fe <Custom_APP_Notification+0x7e>
    		printf("success gatt exchange\r\n");
 800b7d6:	4811      	ldr	r0, [pc, #68]	@ (800b81c <Custom_APP_Notification+0x9c>)
 800b7d8:	f003 fc4e 	bl	800f078 <puts>
      break;
 800b7dc:	e00f      	b.n	800b7fe <Custom_APP_Notification+0x7e>

    case CUSTOM_DISCON_HANDLE_EVT :
      /* USER CODE BEGIN CUSTOM_DISCON_HANDLE_EVT */
    	printf("DISCON_HANDLE\r\n");
 800b7de:	4810      	ldr	r0, [pc, #64]	@ (800b820 <Custom_APP_Notification+0xa0>)
 800b7e0:	f003 fc4a 	bl	800f078 <puts>
//    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
    	enableDataStreamOverBle = 0;
 800b7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b824 <Custom_APP_Notification+0xa4>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	701a      	strb	r2, [r3, #0]
    	notifyOrIndicate=notInitialized;
 800b7ea:	4b0f      	ldr	r3, [pc, #60]	@ (800b828 <Custom_APP_Notification+0xa8>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	701a      	strb	r2, [r3, #0]
    	Ble_Disconnected_From_Client();
 800b7f0:	f002 fcd4 	bl	800e19c <Ble_Disconnected_From_Client>

      /* USER CODE END CUSTOM_DISCON_HANDLE_EVT */
      break;
 800b7f4:	e003      	b.n	800b7fe <Custom_APP_Notification+0x7e>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */
    	printf("custom_app.c Default app notificationr\n");
 800b7f6:	480d      	ldr	r0, [pc, #52]	@ (800b82c <Custom_APP_Notification+0xac>)
 800b7f8:	f003 fc3e 	bl	800f078 <puts>
      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b7fc:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b7fe:	bf00      	nop
}
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	08011764 	.word	0x08011764
 800b80c:	20000470 	.word	0x20000470
 800b810:	2000046e 	.word	0x2000046e
 800b814:	08011770 	.word	0x08011770
 800b818:	0801179c 	.word	0x0801179c
 800b81c:	080117b4 	.word	0x080117b4
 800b820:	080117cc 	.word	0x080117cc
 800b824:	20000474 	.word	0x20000474
 800b828:	20000473 	.word	0x20000473
 800b82c:	080117dc 	.word	0x080117dc

0800b830 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

	UTIL_SEQ_RegTask(1<<CFG_TASK_ADC_CONTROL_ID, UTIL_SEQ_RFU, Measure_Battery_Timer_Callback);
 800b834:	4a36      	ldr	r2, [pc, #216]	@ (800b910 <Custom_APP_Init+0xe0>)
 800b836:	2100      	movs	r1, #0
 800b838:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b83c:	f003 f9b4 	bl	800eba8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_SETUP_ID, UTIL_SEQ_RFU, Setup);
 800b840:	4a34      	ldr	r2, [pc, #208]	@ (800b914 <Custom_APP_Init+0xe4>)
 800b842:	2100      	movs	r1, #0
 800b844:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b848:	f003 f9ae 	bl	800eba8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_UPDATE_ADVERTISING_DATA_ID, UTIL_SEQ_RFU, Update_Advertising_Data);
 800b84c:	4a32      	ldr	r2, [pc, #200]	@ (800b918 <Custom_APP_Init+0xe8>)
 800b84e:	2100      	movs	r1, #0
 800b850:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b854:	f003 f9a8 	bl	800eba8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_BATTERY_VOLTAGE_CALLBACK_ID, UTIL_SEQ_RFU, Adc_Battery_Measurement_Callback);
 800b858:	4a30      	ldr	r2, [pc, #192]	@ (800b91c <Custom_APP_Init+0xec>)
 800b85a:	2100      	movs	r1, #0
 800b85c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800b860:	f003 f9a2 	bl	800eba8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_MEASURE_BATTERY_ID, UTIL_SEQ_RFU, Adc_Measure_Battery_Voltage);
 800b864:	4a2e      	ldr	r2, [pc, #184]	@ (800b920 <Custom_APP_Init+0xf0>)
 800b866:	2100      	movs	r1, #0
 800b868:	2004      	movs	r0, #4
 800b86a:	f003 f99d 	bl	800eba8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_UPDATE_CHAR_VOLTAGE_ID, UTIL_SEQ_RFU, Update_Voltage_Char);
 800b86e:	4a2d      	ldr	r2, [pc, #180]	@ (800b924 <Custom_APP_Init+0xf4>)
 800b870:	2100      	movs	r1, #0
 800b872:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b876:	f003 f997 	bl	800eba8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_START_ADVERTISING_ID, UTIL_SEQ_RFU, Start_Advertising);
 800b87a:	4a2b      	ldr	r2, [pc, #172]	@ (800b928 <Custom_APP_Init+0xf8>)
 800b87c:	2100      	movs	r1, #0
 800b87e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800b882:	f003 f991 	bl	800eba8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_STOP_ADVERTISING_ID, UTIL_SEQ_RFU, Stop_Advertising);
 800b886:	4a29      	ldr	r2, [pc, #164]	@ (800b92c <Custom_APP_Init+0xfc>)
 800b888:	2100      	movs	r1, #0
 800b88a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800b88e:	f003 f98b 	bl	800eba8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_READ_SENSOR_DATA_ID, UTIL_SEQ_RFU, Read_Sensor_Data);
 800b892:	4a27      	ldr	r2, [pc, #156]	@ (800b930 <Custom_APP_Init+0x100>)
 800b894:	2100      	movs	r1, #0
 800b896:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800b89a:	f003 f985 	bl	800eba8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_PROCESS_STEP_INTERRUPT_ID, UTIL_SEQ_RFU, Process_Step_Interrupt);
 800b89e:	4a25      	ldr	r2, [pc, #148]	@ (800b934 <Custom_APP_Init+0x104>)
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800b8a6:	f003 f97f 	bl	800eba8 <UTIL_SEQ_RegTask>

	ret=HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Custom_App_Context.measure_voltage_timer_id), hw_ts_Repeated, Measure_Battery_Timer_Callback);
 800b8aa:	4b19      	ldr	r3, [pc, #100]	@ (800b910 <Custom_APP_Init+0xe0>)
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	4922      	ldr	r1, [pc, #136]	@ (800b938 <Custom_APP_Init+0x108>)
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	f7f6 f93b 	bl	8001b2c <HW_TS_Create>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	4b20      	ldr	r3, [pc, #128]	@ (800b93c <Custom_APP_Init+0x10c>)
 800b8bc:	701a      	strb	r2, [r3, #0]
	if(ret != hw_ts_Successful)
 800b8be:	4b1f      	ldr	r3, [pc, #124]	@ (800b93c <Custom_APP_Init+0x10c>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d002      	beq.n	800b8cc <Custom_APP_Init+0x9c>
	{
		printf(" Error creating timer 1\r\n");
 800b8c6:	481e      	ldr	r0, [pc, #120]	@ (800b940 <Custom_APP_Init+0x110>)
 800b8c8:	f003 fbd6 	bl	800f078 <puts>
	}
	ret=HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Custom_App_Context.watchdog_timer_id), hw_ts_Repeated, Watchdog_Timer_Callback);
 800b8cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b944 <Custom_APP_Init+0x114>)
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	491d      	ldr	r1, [pc, #116]	@ (800b948 <Custom_APP_Init+0x118>)
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	f7f6 f92a 	bl	8001b2c <HW_TS_Create>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	461a      	mov	r2, r3
 800b8dc:	4b17      	ldr	r3, [pc, #92]	@ (800b93c <Custom_APP_Init+0x10c>)
 800b8de:	701a      	strb	r2, [r3, #0]
	if(ret != hw_ts_Successful)
 800b8e0:	4b16      	ldr	r3, [pc, #88]	@ (800b93c <Custom_APP_Init+0x10c>)
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <Custom_APP_Init+0xbe>
	{
		printf(" Error creating timer 3\r\n");
 800b8e8:	4818      	ldr	r0, [pc, #96]	@ (800b94c <Custom_APP_Init+0x11c>)
 800b8ea:	f003 fbc5 	bl	800f078 <puts>
	}

	HW_TS_Start(Custom_App_Context.watchdog_timer_id, WATCHDOG_TIMESPAN);
 800b8ee:	4b18      	ldr	r3, [pc, #96]	@ (800b950 <Custom_APP_Init+0x120>)
 800b8f0:	789b      	ldrb	r3, [r3, #2]
 800b8f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7f6 fa16 	bl	8001d28 <HW_TS_Start>
	UTIL_SEQ_SetTask(1<<CFG_TASK_SETUP_ID, 1);
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b902:	f003 f973 	bl	800ebec <UTIL_SEQ_SetTask>
	//Start_Regular_Battery_Measurement();
	deviceData.bluetoothStatus = advertisingFast;
 800b906:	4b13      	ldr	r3, [pc, #76]	@ (800b954 <Custom_APP_Init+0x124>)
 800b908:	2202      	movs	r2, #2
 800b90a:	709a      	strb	r2, [r3, #2]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b90c:	bf00      	nop
}
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	0800bbc5 	.word	0x0800bbc5
 800b914:	0800bcb5 	.word	0x0800bcb5
 800b918:	0800bc09 	.word	0x0800bc09
 800b91c:	0800bbe1 	.word	0x0800bbe1
 800b920:	0800e009 	.word	0x0800e009
 800b924:	0800bb1d 	.word	0x0800bb1d
 800b928:	0800bc99 	.word	0x0800bc99
 800b92c:	0800bca7 	.word	0x0800bca7
 800b930:	0800a511 	.word	0x0800a511
 800b934:	0800bc15 	.word	0x0800bc15
 800b938:	20000469 	.word	0x20000469
 800b93c:	2000046e 	.word	0x2000046e
 800b940:	08011804 	.word	0x08011804
 800b944:	0800bb79 	.word	0x0800bb79
 800b948:	2000046a 	.word	0x2000046a
 800b94c:	08011820 	.word	0x08011820
 800b950:	20000468 	.word	0x20000468
 800b954:	20000478 	.word	0x20000478

0800b958 <Process_Read_Request_For_Data_v2>:

/* deviceData */

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Process_Read_Request_For_Data_v2(void)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 800b95e:	af00      	add	r7, sp, #0
	uint8_t transmitRawData[768] =  {0};
 800b960:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800b964:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800b968:	4618      	mov	r0, r3
 800b96a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b96e:	461a      	mov	r2, r3
 800b970:	2100      	movs	r1, #0
 800b972:	f003 fc61 	bl	800f238 <memset>
	uint8_t returnValue = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306

	for(uint8_t i = 0; i < 768; i++)
 800b97c:	2300      	movs	r3, #0
 800b97e:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
	{
		transmitRawData[i] = rawData[i];
 800b982:	f897 2307 	ldrb.w	r2, [r7, #775]	@ 0x307
 800b986:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 800b98a:	4907      	ldr	r1, [pc, #28]	@ (800b9a8 <Process_Read_Request_For_Data_v2+0x50>)
 800b98c:	5c89      	ldrb	r1, [r1, r2]
 800b98e:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 800b992:	f5a2 7241 	sub.w	r2, r2, #772	@ 0x304
 800b996:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 768; i++)
 800b998:	f897 3307 	ldrb.w	r3, [r7, #775]	@ 0x307
 800b99c:	3301      	adds	r3, #1
 800b99e:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
		transmitRawData[i] = rawData[i];
 800b9a2:	bf00      	nop
 800b9a4:	e7ed      	b.n	800b982 <Process_Read_Request_For_Data_v2+0x2a>
 800b9a6:	bf00      	nop
 800b9a8:	2001aa84 	.word	0x2001aa84

0800b9ac <Process_Read_Request_For_Data>:
		printf("custom_app.c updating data char NOT successful\r\n");
	}
}

void Process_Read_Request_For_Data(void)
{
 800b9ac:	b590      	push	{r4, r7, lr}
 800b9ae:	b08b      	sub	sp, #44	@ 0x2c
 800b9b0:	af00      	add	r7, sp, #0
	printf("custom_app.c Process_Read_Request_For_Data\r\n");
 800b9b2:	4824      	ldr	r0, [pc, #144]	@ (800ba44 <Process_Read_Request_For_Data+0x98>)
 800b9b4:	f003 fb60 	bl	800f078 <puts>
	// this function is called each time the host reads the characteristic "savedActData"
	// after this function is executed, the value of the characteristic will be returned to the host

	uint8_t transmitData[36] =  {0}; // array to be read, the number of bytes to be read are specified in CubeIDE
 800b9b8:	463b      	mov	r3, r7
 800b9ba:	2224      	movs	r2, #36	@ 0x24
 800b9bc:	2100      	movs	r1, #0
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f003 fc3a 	bl	800f238 <memset>
	uint8_t returnValue = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
//
	// filling the dataBuffer with dummy data
	for(uint8_t i=0; i<36; i++)
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b9d0:	e019      	b.n	800ba06 <Process_Read_Request_For_Data+0x5a>
	{
		transmitData[i]=savedData[nextOut][i];
 800b9d2:	4b1d      	ldr	r3, [pc, #116]	@ (800ba48 <Process_Read_Request_For_Data+0x9c>)
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	461c      	mov	r4, r3
 800b9d8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800b9dc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b9e0:	481a      	ldr	r0, [pc, #104]	@ (800ba4c <Process_Read_Request_For_Data+0xa0>)
 800b9e2:	4623      	mov	r3, r4
 800b9e4:	00db      	lsls	r3, r3, #3
 800b9e6:	4423      	add	r3, r4
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4403      	add	r3, r0
 800b9ec:	440b      	add	r3, r1
 800b9ee:	7819      	ldrb	r1, [r3, #0]
 800b9f0:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 800b9f4:	443b      	add	r3, r7
 800b9f6:	460a      	mov	r2, r1
 800b9f8:	f803 2c28 	strb.w	r2, [r3, #-40]
	for(uint8_t i=0; i<36; i++)
 800b9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba00:	3301      	adds	r3, #1
 800ba02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ba06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba0a:	2b23      	cmp	r3, #35	@ 0x23
 800ba0c:	d9e1      	bls.n	800b9d2 <Process_Read_Request_For_Data+0x26>
	}

	returnValue = Ble_Update_Characteristic(CUSTOM_STM_SACTDAT, transmitData, sizeof(transmitData)); // updates the value of the characteristic to be read
 800ba0e:	463b      	mov	r3, r7
 800ba10:	2224      	movs	r2, #36	@ 0x24
 800ba12:	4619      	mov	r1, r3
 800ba14:	2000      	movs	r0, #0
 800ba16:	f002 fce1 	bl	800e3dc <Ble_Update_Characteristic>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	if(returnValue != BLE_STATUS_SUCCESS)
 800ba20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <Process_Read_Request_For_Data+0x82>
	{
		printf("custom_app.c updating data char NOT successful\r\n");
 800ba28:	4809      	ldr	r0, [pc, #36]	@ (800ba50 <Process_Read_Request_For_Data+0xa4>)
 800ba2a:	f003 fb25 	bl	800f078 <puts>
	}

	if(returnValue == BLE_STATUS_SUCCESS)
 800ba2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <Process_Read_Request_For_Data+0x8e>
	{
		Move_NextOut();
 800ba36:	f002 fa9f 	bl	800df78 <Move_NextOut>
	}
}
 800ba3a:	bf00      	nop
 800ba3c:	372c      	adds	r7, #44	@ 0x2c
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd90      	pop	{r4, r7, pc}
 800ba42:	bf00      	nop
 800ba44:	0801183c 	.word	0x0801183c
 800ba48:	2001aa82 	.word	0x2001aa82
 800ba4c:	200004a0 	.word	0x200004a0
 800ba50:	080116c0 	.word	0x080116c0

0800ba54 <Update_Number_Of_Activity_Data>:

void Update_Number_Of_Activity_Data(uint16_t newNumberOfActivityData)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	80fb      	strh	r3, [r7, #6]
	printf("custom_app.c Update_Number_Of_Activity_Data\r\n");
 800ba5e:	4811      	ldr	r0, [pc, #68]	@ (800baa4 <Update_Number_Of_Activity_Data+0x50>)
 800ba60:	f003 fb0a 	bl	800f078 <puts>
	// this function updates the numActData char (16 bit)

	uint8_t transmitData[2] =  {0}; // the number of bytes to be read are specified in CubeIDE
 800ba64:	2300      	movs	r3, #0
 800ba66:	81bb      	strh	r3, [r7, #12]
	uint8_t returnValue = 0;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]

	transmitData[0] = newNumberOfActivityData >> 8;
 800ba6c:	88fb      	ldrh	r3, [r7, #6]
 800ba6e:	0a1b      	lsrs	r3, r3, #8
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	733b      	strb	r3, [r7, #12]
	transmitData[1] = newNumberOfActivityData; // maybe change upper and lower byte, depending on host
 800ba76:	88fb      	ldrh	r3, [r7, #6]
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	737b      	strb	r3, [r7, #13]

	returnValue = Ble_Update_Characteristic(CUSTOM_STM_NUMACTDAT, transmitData, sizeof(transmitData)); // updates the value of the characteristic to be read
 800ba7c:	f107 030c 	add.w	r3, r7, #12
 800ba80:	2202      	movs	r2, #2
 800ba82:	4619      	mov	r1, r3
 800ba84:	2001      	movs	r0, #1
 800ba86:	f002 fca9 	bl	800e3dc <Ble_Update_Characteristic>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73fb      	strb	r3, [r7, #15]

	if(returnValue != BLE_STATUS_SUCCESS)
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <Update_Number_Of_Activity_Data+0x46>
	{
		printf("custom_app.c updating data char NOT successful\r\n");
 800ba94:	4804      	ldr	r0, [pc, #16]	@ (800baa8 <Update_Number_Of_Activity_Data+0x54>)
 800ba96:	f003 faef 	bl	800f078 <puts>
	}
}
 800ba9a:	bf00      	nop
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	08011868 	.word	0x08011868
 800baa8:	080116c0 	.word	0x080116c0

0800baac <Get_Date_Time>:

uint8_t* Get_Date_Time(void)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
	printf("custom_app.c Get_Date_Time\r\n");
 800bab2:	4817      	ldr	r0, [pc, #92]	@ (800bb10 <Get_Date_Time+0x64>)
 800bab4:	f003 fae0 	bl	800f078 <puts>
	// this function returns a pointer to an 8-bit-array that contains the time and date in the format:
	// [day], [month], [year], [hour], [minute], [second]
	// year is a value between 0 and 99

	static uint8_t dateTimeArray[6] = {0}; // array keeps values between function calls
	RTC_TimeTypeDef sTime = {0};
 800bab8:	1d3b      	adds	r3, r7, #4
 800baba:	2200      	movs	r2, #0
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	605a      	str	r2, [r3, #4]
 800bac0:	609a      	str	r2, [r3, #8]
 800bac2:	60da      	str	r2, [r3, #12]
 800bac4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 800bac6:	2300      	movs	r3, #0
 800bac8:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800baca:	463b      	mov	r3, r7
 800bacc:	2200      	movs	r2, #0
 800bace:	4619      	mov	r1, r3
 800bad0:	4810      	ldr	r0, [pc, #64]	@ (800bb14 <Get_Date_Time+0x68>)
 800bad2:	f7fc f9d1 	bl	8007e78 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800bad6:	1d3b      	adds	r3, r7, #4
 800bad8:	2200      	movs	r2, #0
 800bada:	4619      	mov	r1, r3
 800badc:	480d      	ldr	r0, [pc, #52]	@ (800bb14 <Get_Date_Time+0x68>)
 800bade:	f7fc f8c1 	bl	8007c64 <HAL_RTC_GetTime>

	dateTimeArray[0] = sDate.Date;
 800bae2:	78ba      	ldrb	r2, [r7, #2]
 800bae4:	4b0c      	ldr	r3, [pc, #48]	@ (800bb18 <Get_Date_Time+0x6c>)
 800bae6:	701a      	strb	r2, [r3, #0]
	dateTimeArray[1] = sDate.Month;
 800bae8:	787a      	ldrb	r2, [r7, #1]
 800baea:	4b0b      	ldr	r3, [pc, #44]	@ (800bb18 <Get_Date_Time+0x6c>)
 800baec:	705a      	strb	r2, [r3, #1]
	dateTimeArray[2] = sDate.Year;
 800baee:	78fa      	ldrb	r2, [r7, #3]
 800baf0:	4b09      	ldr	r3, [pc, #36]	@ (800bb18 <Get_Date_Time+0x6c>)
 800baf2:	709a      	strb	r2, [r3, #2]
	dateTimeArray[3] = sTime.Hours;
 800baf4:	793a      	ldrb	r2, [r7, #4]
 800baf6:	4b08      	ldr	r3, [pc, #32]	@ (800bb18 <Get_Date_Time+0x6c>)
 800baf8:	70da      	strb	r2, [r3, #3]
	dateTimeArray[4] = sTime.Minutes;
 800bafa:	797a      	ldrb	r2, [r7, #5]
 800bafc:	4b06      	ldr	r3, [pc, #24]	@ (800bb18 <Get_Date_Time+0x6c>)
 800bafe:	711a      	strb	r2, [r3, #4]
	dateTimeArray[5] = sTime.Seconds;
 800bb00:	79ba      	ldrb	r2, [r7, #6]
 800bb02:	4b05      	ldr	r3, [pc, #20]	@ (800bb18 <Get_Date_Time+0x6c>)
 800bb04:	715a      	strb	r2, [r3, #5]

	return dateTimeArray;
 800bb06:	4b04      	ldr	r3, [pc, #16]	@ (800bb18 <Get_Date_Time+0x6c>)
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	08011898 	.word	0x08011898
 800bb14:	20000318 	.word	0x20000318
 800bb18:	20000488 	.word	0x20000488

0800bb1c <Update_Voltage_Char>:

void Update_Voltage_Char(void)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
	updateVoltageCharPending = false;
 800bb22:	4b11      	ldr	r3, [pc, #68]	@ (800bb68 <Update_Voltage_Char+0x4c>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	701a      	strb	r2, [r3, #0]
	uint8_t transmitData[16] =  {0};
 800bb28:	1d3b      	adds	r3, r7, #4
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	601a      	str	r2, [r3, #0]
 800bb2e:	605a      	str	r2, [r3, #4]
 800bb30:	609a      	str	r2, [r3, #8]
 800bb32:	60da      	str	r2, [r3, #12]
	uint8_t returnValue = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	75fb      	strb	r3, [r7, #23]

	printf("custom_app.c Update_Voltage_Char\r\n");
 800bb38:	480c      	ldr	r0, [pc, #48]	@ (800bb6c <Update_Voltage_Char+0x50>)
 800bb3a:	f003 fa9d 	bl	800f078 <puts>

	transmitData[0] =  deviceData.batteryVoltage;
 800bb3e:	4b0c      	ldr	r3, [pc, #48]	@ (800bb70 <Update_Voltage_Char+0x54>)
 800bb40:	785b      	ldrb	r3, [r3, #1]
 800bb42:	713b      	strb	r3, [r7, #4]
	returnValue = Ble_Update_Characteristic(CUSTOM_STM_BATLVL, transmitData, 1);
 800bb44:	1d3b      	adds	r3, r7, #4
 800bb46:	2201      	movs	r2, #1
 800bb48:	4619      	mov	r1, r3
 800bb4a:	2004      	movs	r0, #4
 800bb4c:	f002 fc46 	bl	800e3dc <Ble_Update_Characteristic>
 800bb50:	4603      	mov	r3, r0
 800bb52:	75fb      	strb	r3, [r7, #23]



	if(returnValue != BLE_STATUS_SUCCESS)
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <Update_Voltage_Char+0x44>
	{
		// wenn CPU2 busy war, kann es sein, dass die charakteristic nicht upgedated wurde.
		// In diesem Fall wird der Task erneut gescheduled
		//UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_CHAR_VOLTAGE_ID, 1);
		printf("custom_app.c updating voltage char unsuccessful\r\n");
 800bb5a:	4806      	ldr	r0, [pc, #24]	@ (800bb74 <Update_Voltage_Char+0x58>)
 800bb5c:	f003 fa8c 	bl	800f078 <puts>
//		updateVoltageCharPending = true;
//		HW_TS_Start(Custom_App_Context.wait_for_update_char_timer_id, WAIT_FOR_UPDATE_CHAR_TIMESPAN);
	}
}
 800bb60:	bf00      	nop
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20000483 	.word	0x20000483
 800bb6c:	080118b4 	.word	0x080118b4
 800bb70:	20000478 	.word	0x20000478
 800bb74:	080118d8 	.word	0x080118d8

0800bb78 <Watchdog_Timer_Callback>:

void Watchdog_Timer_Callback(void)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800bb7c:	4802      	ldr	r0, [pc, #8]	@ (800bb88 <Watchdog_Timer_Callback+0x10>)
 800bb7e:	f7fa f964 	bl	8005e4a <HAL_IWDG_Refresh>
}
 800bb82:	bf00      	nop
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	20000308 	.word	0x20000308

0800bb8c <Start_Regular_Battery_Measurement>:


void Start_Regular_Battery_Measurement(void)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	af00      	add	r7, sp, #0
	if(regularBatteryMeasurementIsActiveFlag == false)
 800bb90:	4b08      	ldr	r3, [pc, #32]	@ (800bbb4 <Start_Regular_Battery_Measurement+0x28>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10b      	bne.n	800bbb0 <Start_Regular_Battery_Measurement+0x24>
	{
		printf("regular battery measurement started\r\n");
 800bb98:	4807      	ldr	r0, [pc, #28]	@ (800bbb8 <Start_Regular_Battery_Measurement+0x2c>)
 800bb9a:	f003 fa6d 	bl	800f078 <puts>
		regularBatteryMeasurementIsActiveFlag = true;
 800bb9e:	4b05      	ldr	r3, [pc, #20]	@ (800bbb4 <Start_Regular_Battery_Measurement+0x28>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	701a      	strb	r2, [r3, #0]
		HW_TS_Start(Custom_App_Context.measure_voltage_timer_id, ADC_TIMESPAN_VOLTAGE_NORMAL);
 800bba4:	4b05      	ldr	r3, [pc, #20]	@ (800bbbc <Start_Regular_Battery_Measurement+0x30>)
 800bba6:	785b      	ldrb	r3, [r3, #1]
 800bba8:	4905      	ldr	r1, [pc, #20]	@ (800bbc0 <Start_Regular_Battery_Measurement+0x34>)
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f6 f8bc 	bl	8001d28 <HW_TS_Start>
	}
	//HW_TS_Start(Custom_App_Context.measure_voltage_timer_id, ADC_TIMESPAN_VOLTAGE_NORMAL);
}
 800bbb0:	bf00      	nop
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	20000482 	.word	0x20000482
 800bbb8:	0801190c 	.word	0x0801190c
 800bbbc:	20000468 	.word	0x20000468
 800bbc0:	0001d4c0 	.word	0x0001d4c0

0800bbc4 <Measure_Battery_Timer_Callback>:
		HW_TS_Stop(Custom_App_Context.measure_voltage_timer_id);
	}
}

void Measure_Battery_Timer_Callback(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
	// measures battery voltage and brightness
	printf("measure battery timer callback\r\n");
 800bbc8:	4804      	ldr	r0, [pc, #16]	@ (800bbdc <Measure_Battery_Timer_Callback+0x18>)
 800bbca:	f003 fa55 	bl	800f078 <puts>

	UTIL_SEQ_SetTask(1<<CFG_TASK_MEASURE_BATTERY_ID, 1);
 800bbce:	2101      	movs	r1, #1
 800bbd0:	2004      	movs	r0, #4
 800bbd2:	f003 f80b 	bl	800ebec <UTIL_SEQ_SetTask>

}
 800bbd6:	bf00      	nop
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	0801195c 	.word	0x0801195c

0800bbe0 <Adc_Battery_Measurement_Callback>:

void Adc_Battery_Measurement_Callback()
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	af00      	add	r7, sp, #0
	printf("custom_app.c Battery Measurement Callback\r\n");
 800bbe4:	4807      	ldr	r0, [pc, #28]	@ (800bc04 <Adc_Battery_Measurement_Callback+0x24>)
 800bbe6:	f003 fa47 	bl	800f078 <puts>

	UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_CHAR_VOLTAGE_ID, 1);
 800bbea:	2101      	movs	r1, #1
 800bbec:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bbf0:	f002 fffc 	bl	800ebec <UTIL_SEQ_SetTask>
	UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_ADVERTISING_DATA_ID, 1);
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bbfa:	f002 fff7 	bl	800ebec <UTIL_SEQ_SetTask>
}
 800bbfe:	bf00      	nop
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	0801197c 	.word	0x0801197c

0800bc08 <Update_Advertising_Data>:


void Update_Advertising_Data(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
	// Task for scheduler
	Ble_Update_Advertising_Data();
 800bc0c:	f002 fb98 	bl	800e340 <Ble_Update_Advertising_Data>
}
 800bc10:	bf00      	nop
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <Process_Step_Interrupt>:

void Process_Step_Interrupt(void)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	af00      	add	r7, sp, #0
	// this task is scheduled after the uC receives a step detector interrupt
	// this task is executed outside the interrupt routine
//	printf("custom_app.c Process_Step_Interrupt\r\n");
	stepCounterInt++;
 800bc18:	4b08      	ldr	r3, [pc, #32]	@ (800bc3c <Process_Step_Interrupt+0x28>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	4a07      	ldr	r2, [pc, #28]	@ (800bc3c <Process_Step_Interrupt+0x28>)
 800bc20:	6013      	str	r3, [r2, #0]
	printf("custom_app.c step counter interrupt: %lu\r\n", stepCounterInt);
 800bc22:	4b06      	ldr	r3, [pc, #24]	@ (800bc3c <Process_Step_Interrupt+0x28>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4619      	mov	r1, r3
 800bc28:	4805      	ldr	r0, [pc, #20]	@ (800bc40 <Process_Step_Interrupt+0x2c>)
 800bc2a:	f003 f9bd 	bl	800efa8 <iprintf>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800bc2e:	2102      	movs	r1, #2
 800bc30:	4804      	ldr	r0, [pc, #16]	@ (800bc44 <Process_Step_Interrupt+0x30>)
 800bc32:	f7f9 f9d1 	bl	8004fd8 <HAL_GPIO_TogglePin>
//	Clear_Interrupt(); // seems like this is not necessary to reset the interrupt

}
 800bc36:	bf00      	nop
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20000484 	.word	0x20000484
 800bc40:	080119a8 	.word	0x080119a8
 800bc44:	48000c00 	.word	0x48000c00

0800bc48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	80fb      	strh	r3, [r7, #6]
//	printf("custom_app.c external interrupt\r\n");
	switch(GPIO_Pin)
 800bc52:	88fb      	ldrh	r3, [r7, #6]
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	d002      	beq.n	800bc5e <HAL_GPIO_EXTI_Callback+0x16>
 800bc58:	2b08      	cmp	r3, #8
 800bc5a:	d00e      	beq.n	800bc7a <HAL_GPIO_EXTI_Callback+0x32>
		UTIL_SEQ_SetTask(1<<CFG_TASK_PROCESS_STEP_INTERRUPT_ID, 1);

		break;
	}

}
 800bc5c:	e013      	b.n	800bc86 <HAL_GPIO_EXTI_Callback+0x3e>
		if(sensorIsInitialised==1)
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc90 <HAL_GPIO_EXTI_Callback+0x48>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d105      	bne.n	800bc72 <HAL_GPIO_EXTI_Callback+0x2a>
			UTIL_SEQ_SetTask(1<<CFG_TASK_READ_SENSOR_DATA_ID, 1);
 800bc66:	2101      	movs	r1, #1
 800bc68:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800bc6c:	f002 ffbe 	bl	800ebec <UTIL_SEQ_SetTask>
		break;
 800bc70:	e009      	b.n	800bc86 <HAL_GPIO_EXTI_Callback+0x3e>
			printf("custom_app.c Sensor not initialized\r\n");
 800bc72:	4808      	ldr	r0, [pc, #32]	@ (800bc94 <HAL_GPIO_EXTI_Callback+0x4c>)
 800bc74:	f003 fa00 	bl	800f078 <puts>
		break;
 800bc78:	e005      	b.n	800bc86 <HAL_GPIO_EXTI_Callback+0x3e>
		UTIL_SEQ_SetTask(1<<CFG_TASK_PROCESS_STEP_INTERRUPT_ID, 1);
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800bc80:	f002 ffb4 	bl	800ebec <UTIL_SEQ_SetTask>
		break;
 800bc84:	bf00      	nop
}
 800bc86:	bf00      	nop
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	200003c8 	.word	0x200003c8
 800bc94:	080119d4 	.word	0x080119d4

0800bc98 <Start_Advertising>:

void Start_Advertising(void)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	af00      	add	r7, sp, #0
	Ble_Start_Advertising(FAST_ADVERTISING);
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	f002 fa8d 	bl	800e1bc <Ble_Start_Advertising>
}
 800bca2:	bf00      	nop
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <Stop_Advertising>:

void Stop_Advertising(void)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	af00      	add	r7, sp, #0
	Ble_Stop_Advertising();
 800bcaa:	f002 fb09 	bl	800e2c0 <Ble_Stop_Advertising>
}
 800bcae:	bf00      	nop
 800bcb0:	bd80      	pop	{r7, pc}
	...

0800bcb4 <Setup>:
	// und der Client bestätigt, dass er das letzte Indicate erhalten hat
	// aber die Funktion wird nicht aufgerufen...
}

void Setup()
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
	// Dieser Task wird nach der Initialisierung als erstes aufgerufen
	printf("custom_app.c setup\r\n");
 800bcb8:	480c      	ldr	r0, [pc, #48]	@ (800bcec <Setup+0x38>)
 800bcba:	f003 f9dd 	bl	800f078 <puts>

	HAL_GPIO_WritePin(V3_ENABLE_GPIO_Port, V3_ENABLE_Pin, 1);
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bcc4:	480a      	ldr	r0, [pc, #40]	@ (800bcf0 <Setup+0x3c>)
 800bcc6:	f7f9 f96f 	bl	8004fa8 <HAL_GPIO_WritePin>
	HAL_Delay(50); // Spannungsregler einschalten und kurz warten
 800bcca:	2032      	movs	r0, #50	@ 0x32
 800bccc:	f7f5 f9dd 	bl	800108a <HAL_Delay>
	UTIL_SEQ_SetTask(1<<CFG_TASK_MEASURE_BATTERY_ID, 1);
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	2004      	movs	r0, #4
 800bcd4:	f002 ff8a 	bl	800ebec <UTIL_SEQ_SetTask>

	Sensor_Init();
 800bcd8:	f7fe fb58 	bl	800a38c <Sensor_Init>
	Start_Regular_Battery_Measurement();
 800bcdc:	f7ff ff56 	bl	800bb8c <Start_Regular_Battery_Measurement>
	printf("custom_app.c ################################ setup\r\n");
 800bce0:	4804      	ldr	r0, [pc, #16]	@ (800bcf4 <Setup+0x40>)
 800bce2:	f003 f9c9 	bl	800f078 <puts>

}
 800bce6:	bf00      	nop
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	08011a28 	.word	0x08011a28
 800bcf0:	48000800 	.word	0x48000800
 800bcf4:	08011a3c 	.word	0x08011a3c

0800bcf8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08c      	sub	sp, #48	@ 0x30
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800bd00:	2300      	movs	r3, #0
 800bd02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800bd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	2bff      	cmp	r3, #255	@ 0xff
 800bd12:	f040 8128 	bne.w	800bf66 <Custom_STM_Event_Handler+0x26e>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800bd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd18:	3302      	adds	r3, #2
 800bd1a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1e:	881b      	ldrh	r3, [r3, #0]
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800bd26:	2b16      	cmp	r3, #22
 800bd28:	f200 8115 	bhi.w	800bf56 <Custom_STM_Event_Handler+0x25e>
 800bd2c:	a201      	add	r2, pc, #4	@ (adr r2, 800bd34 <Custom_STM_Event_Handler+0x3c>)
 800bd2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd32:	bf00      	nop
 800bd34:	0800bd91 	.word	0x0800bd91
 800bd38:	0800bf57 	.word	0x0800bf57
 800bd3c:	0800bf41 	.word	0x0800bf41
 800bd40:	0800bf57 	.word	0x0800bf57
 800bd44:	0800bf57 	.word	0x0800bf57
 800bd48:	0800bf57 	.word	0x0800bf57
 800bd4c:	0800bf57 	.word	0x0800bf57
 800bd50:	0800bf57 	.word	0x0800bf57
 800bd54:	0800bf57 	.word	0x0800bf57
 800bd58:	0800bf57 	.word	0x0800bf57
 800bd5c:	0800bf57 	.word	0x0800bf57
 800bd60:	0800bf57 	.word	0x0800bf57
 800bd64:	0800bf57 	.word	0x0800bf57
 800bd68:	0800bf57 	.word	0x0800bf57
 800bd6c:	0800bf57 	.word	0x0800bf57
 800bd70:	0800bf57 	.word	0x0800bf57
 800bd74:	0800bf57 	.word	0x0800bf57
 800bd78:	0800bf57 	.word	0x0800bf57
 800bd7c:	0800bf5f 	.word	0x0800bf5f
 800bd80:	0800be65 	.word	0x0800be65
 800bd84:	0800bf57 	.word	0x0800bf57
 800bd88:	0800bf49 	.word	0x0800bf49
 800bd8c:	0800bf5f 	.word	0x0800bf5f
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
        	printf("custom_stm.c some event\r\n");
 800bd90:	487b      	ldr	r0, [pc, #492]	@ (800bf80 <Custom_STM_Event_Handler+0x288>)
 800bd92:	f003 f971 	bl	800f078 <puts>
          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	3302      	adds	r3, #2
 800bd9a:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSactdatHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	885b      	ldrh	r3, [r3, #2]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	461a      	mov	r2, r3
 800bda4:	4b77      	ldr	r3, [pc, #476]	@ (800bf84 <Custom_STM_Event_Handler+0x28c>)
 800bda6:	885b      	ldrh	r3, [r3, #2]
 800bda8:	3302      	adds	r3, #2
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d11c      	bne.n	800bde8 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */
        	printf("custom_stm.c service 1 char 1\r\n");
 800bdb4:	4874      	ldr	r0, [pc, #464]	@ (800bf88 <Custom_STM_Event_Handler+0x290>)
 800bdb6:	f003 f95f 	bl	800f078 <puts>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	7a1b      	ldrb	r3, [r3, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <Custom_STM_Event_Handler+0xd0>
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d008      	beq.n	800bdd8 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 800bdc6:	e049      	b.n	800be5c <Custom_STM_Event_Handler+0x164>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SACTDAT_NOTIFY_DISABLED_EVT;
 800bdc8:	2302      	movs	r3, #2
 800bdca:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800bdcc:	f107 030c 	add.w	r3, r7, #12
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fae1 	bl	800b398 <Custom_STM_App_Notification>
                break;
 800bdd6:	e041      	b.n	800be5c <Custom_STM_Event_Handler+0x164>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SACTDAT_NOTIFY_ENABLED_EVT;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800bddc:	f107 030c 	add.w	r3, r7, #12
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7ff fad9 	bl	800b398 <Custom_STM_App_Notification>
                break;
 800bde6:	e039      	b.n	800be5c <Custom_STM_Event_Handler+0x164>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSactdatHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomRtcHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	885b      	ldrh	r3, [r3, #2]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	461a      	mov	r2, r3
 800bdf0:	4b64      	ldr	r3, [pc, #400]	@ (800bf84 <Custom_STM_Event_Handler+0x28c>)
 800bdf2:	88db      	ldrh	r3, [r3, #6]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d115      	bne.n	800be26 <Custom_STM_Event_Handler+0x12e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        	printf("custom_stm.c service 1 char 3\r\n");
 800be00:	4862      	ldr	r0, [pc, #392]	@ (800bf8c <Custom_STM_Event_Handler+0x294>)
 800be02:	f003 f939 	bl	800f078 <puts>
            Notification.Custom_Evt_Opcode = CUSTOM_STM_RTC_WRITE_EVT;
 800be06:	2305      	movs	r3, #5
 800be08:	733b      	strb	r3, [r7, #12]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	88db      	ldrh	r3, [r3, #6]
 800be0e:	b29b      	uxth	r3, r3
 800be10:	b2db      	uxtb	r3, r3
 800be12:	753b      	strb	r3, [r7, #20]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	3308      	adds	r3, #8
 800be18:	613b      	str	r3, [r7, #16]
            Custom_STM_App_Notification(&Notification);
 800be1a:	f107 030c 	add.w	r3, r7, #12
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff faba 	bl	800b398 <Custom_STM_App_Notification>
 800be24:	e01a      	b.n	800be5c <Custom_STM_Event_Handler+0x164>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomRtcHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomStepcounterintHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	885b      	ldrh	r3, [r3, #2]
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	461a      	mov	r2, r3
 800be2e:	4b55      	ldr	r3, [pc, #340]	@ (800bf84 <Custom_STM_Event_Handler+0x28c>)
 800be30:	891b      	ldrh	r3, [r3, #8]
 800be32:	3301      	adds	r3, #1
 800be34:	429a      	cmp	r2, r3
 800be36:	d111      	bne.n	800be5c <Custom_STM_Event_Handler+0x164>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800be38:	2301      	movs	r3, #1
 800be3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_STEPCOUNTERINT_WRITE_EVT;
 800be3e:	2307      	movs	r3, #7
 800be40:	733b      	strb	r3, [r7, #12]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	88db      	ldrh	r3, [r3, #6]
 800be46:	b29b      	uxth	r3, r3
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	753b      	strb	r3, [r7, #20]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	3308      	adds	r3, #8
 800be50:	613b      	str	r3, [r7, #16]
            Custom_STM_App_Notification(&Notification);
 800be52:	f107 030c 	add.w	r3, r7, #12
 800be56:	4618      	mov	r0, r3
 800be58:	f7ff fa9e 	bl	800b398 <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_4_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomStepcounterintHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      	printf("custom_stm.c attribute modified end\r\n");
 800be5c:	484c      	ldr	r0, [pc, #304]	@ (800bf90 <Custom_STM_Event_Handler+0x298>)
 800be5e:	f003 f90b 	bl	800f078 <puts>
          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800be62:	e07f      	b.n	800bf64 <Custom_STM_Event_Handler+0x26c>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
        	printf("custom_stm.c read permit request\r\n");
 800be64:	484b      	ldr	r0, [pc, #300]	@ (800bf94 <Custom_STM_Event_Handler+0x29c>)
 800be66:	f003 f907 	bl	800f078 <puts>
          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800be6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6c:	3302      	adds	r3, #2
 800be6e:	623b      	str	r3, [r7, #32]

          // ----------------- Characteristic 1 / Activity Data ------------------------
          if (read_req->Attribute_Handle == (CustomContext.CustomSactdatHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800be70:	6a3b      	ldr	r3, [r7, #32]
 800be72:	885b      	ldrh	r3, [r3, #2]
 800be74:	b29b      	uxth	r3, r3
 800be76:	461a      	mov	r2, r3
 800be78:	4b42      	ldr	r3, [pc, #264]	@ (800bf84 <Custom_STM_Event_Handler+0x28c>)
 800be7a:	885b      	ldrh	r3, [r3, #2]
 800be7c:	3301      	adds	r3, #1
 800be7e:	429a      	cmp	r2, r3
 800be80:	d110      	bne.n	800bea4 <Custom_STM_Event_Handler+0x1ac>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800be82:	2301      	movs	r3, #1
 800be84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_SACTDAT_READ_EVT;
 800be88:	2300      	movs	r3, #0
 800be8a:	733b      	strb	r3, [r7, #12]
			      Custom_STM_App_Notification(&Notification);
 800be8c:	f107 030c 	add.w	r3, r7, #12
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fa81 	bl	800b398 <Custom_STM_App_Notification>
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	881b      	ldrh	r3, [r3, #0]
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fd f80f 	bl	8008ec0 <aci_gatt_allow_read>
            /*USER CODE END CUSTOM_STM_Service_1_Char_4_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomStepcounterintHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 800bea2:	e05e      	b.n	800bf62 <Custom_STM_Event_Handler+0x26a>
          else if (read_req->Attribute_Handle == (CustomContext.CustomNewCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	885b      	ldrh	r3, [r3, #2]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	461a      	mov	r2, r3
 800beac:	4b35      	ldr	r3, [pc, #212]	@ (800bf84 <Custom_STM_Event_Handler+0x28c>)
 800beae:	89db      	ldrh	r3, [r3, #14]
 800beb0:	3301      	adds	r3, #1
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d110      	bne.n	800bed8 <Custom_STM_Event_Handler+0x1e0>
            return_value = SVCCTL_EvtAckFlowEnable;
 800beb6:	2301      	movs	r3, #1
 800beb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_NEW_CHAR_READ_EVT;
 800bebc:	230a      	movs	r3, #10
 800bebe:	733b      	strb	r3, [r7, #12]
			      Custom_STM_App_Notification(&Notification);
 800bec0:	f107 030c 	add.w	r3, r7, #12
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff fa67 	bl	800b398 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fc fff5 	bl	8008ec0 <aci_gatt_allow_read>
          break;
 800bed6:	e044      	b.n	800bf62 <Custom_STM_Event_Handler+0x26a>
          else if (read_req->Attribute_Handle == (CustomContext.CustomRtcHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	885b      	ldrh	r3, [r3, #2]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	461a      	mov	r2, r3
 800bee0:	4b28      	ldr	r3, [pc, #160]	@ (800bf84 <Custom_STM_Event_Handler+0x28c>)
 800bee2:	88db      	ldrh	r3, [r3, #6]
 800bee4:	3301      	adds	r3, #1
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d110      	bne.n	800bf0c <Custom_STM_Event_Handler+0x214>
            return_value = SVCCTL_EvtAckFlowEnable;
 800beea:	2301      	movs	r3, #1
 800beec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_RTC_READ_EVT;
 800bef0:	2304      	movs	r3, #4
 800bef2:	733b      	strb	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 800bef4:	f107 030c 	add.w	r3, r7, #12
 800bef8:	4618      	mov	r0, r3
 800befa:	f7ff fa4d 	bl	800b398 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fc ffdb 	bl	8008ec0 <aci_gatt_allow_read>
          break;
 800bf0a:	e02a      	b.n	800bf62 <Custom_STM_Event_Handler+0x26a>
          else if (read_req->Attribute_Handle == (CustomContext.CustomStepcounterintHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bf0c:	6a3b      	ldr	r3, [r7, #32]
 800bf0e:	885b      	ldrh	r3, [r3, #2]
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	461a      	mov	r2, r3
 800bf14:	4b1b      	ldr	r3, [pc, #108]	@ (800bf84 <Custom_STM_Event_Handler+0x28c>)
 800bf16:	891b      	ldrh	r3, [r3, #8]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d121      	bne.n	800bf62 <Custom_STM_Event_Handler+0x26a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_STEPCOUNTERINT_READ_EVT;
 800bf24:	2306      	movs	r3, #6
 800bf26:	733b      	strb	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 800bf28:	f107 030c 	add.w	r3, r7, #12
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7ff fa33 	bl	800b398 <Custom_STM_App_Notification>
            aci_gatt_allow_read(read_req->Connection_Handle);
 800bf32:	6a3b      	ldr	r3, [r7, #32]
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7fc ffc1 	bl	8008ec0 <aci_gatt_allow_read>
          break;
 800bf3e:	e010      	b.n	800bf62 <Custom_STM_Event_Handler+0x26a>
//            	  UTIL_SEQ_SetTask(1<<CFG_TASK_SEND_DUMMY_DATA_ID, 1);
//              }

              break;
        case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
        	printf("custom_stm.c ATT exchange MTU response event\r\n");
 800bf40:	4815      	ldr	r0, [pc, #84]	@ (800bf98 <Custom_STM_Event_Handler+0x2a0>)
 800bf42:	f003 f899 	bl	800f078 <puts>

          break;
 800bf46:	e00d      	b.n	800bf64 <Custom_STM_Event_Handler+0x26c>

		case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
        	printf("custom_stm.c gatt tx pool available\r\n");
 800bf48:	4814      	ldr	r0, [pc, #80]	@ (800bf9c <Custom_STM_Event_Handler+0x2a4>)
 800bf4a:	f003 f895 	bl	800f078 <puts>
//        	UTIL_SEQ_SetTask(1<<CFG_TASK_SEND_DUMMY_DATA_ID, 1);
        	waitForRessourcesToNotify=0;
 800bf4e:	4b14      	ldr	r3, [pc, #80]	@ (800bfa0 <Custom_STM_Event_Handler+0x2a8>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	701a      	strb	r2, [r3, #0]
          break;
 800bf54:	e006      	b.n	800bf64 <Custom_STM_Event_Handler+0x26c>

        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */
        	printf("custom_stm.c default\r\n");
 800bf56:	4813      	ldr	r0, [pc, #76]	@ (800bfa4 <Custom_STM_Event_Handler+0x2ac>)
 800bf58:	f003 f88e 	bl	800f078 <puts>
          /* USER CODE END EVT_DEFAULT */
          break;
 800bf5c:	e002      	b.n	800bf64 <Custom_STM_Event_Handler+0x26c>
          break;
 800bf5e:	bf00      	nop
 800bf60:	e005      	b.n	800bf6e <Custom_STM_Event_Handler+0x276>
          break;
 800bf62:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/


      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bf64:	e003      	b.n	800bf6e <Custom_STM_Event_Handler+0x276>

      /* USER CODE END EVENT_PCKT_CASES*/

    default:
      /* USER CODE BEGIN EVENT_PCKT*/
    	printf("custom_stm.c default 2\r\n");
 800bf66:	4810      	ldr	r0, [pc, #64]	@ (800bfa8 <Custom_STM_Event_Handler+0x2b0>)
 800bf68:	f003 f886 	bl	800f078 <puts>
      /* USER CODE END EVENT_PCKT*/
      break;
 800bf6c:	bf00      	nop
  }

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */
	printf("custom_stm.c event handler 2\r\n");
 800bf6e:	480f      	ldr	r0, [pc, #60]	@ (800bfac <Custom_STM_Event_Handler+0x2b4>)
 800bf70:	f003 f882 	bl	800f078 <puts>
  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800bf74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3730      	adds	r7, #48	@ 0x30
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	08011acc 	.word	0x08011acc
 800bf84:	20000490 	.word	0x20000490
 800bf88:	08011ae8 	.word	0x08011ae8
 800bf8c:	08011b08 	.word	0x08011b08
 800bf90:	08011b28 	.word	0x08011b28
 800bf94:	08011b50 	.word	0x08011b50
 800bf98:	08011b74 	.word	0x08011b74
 800bf9c:	08011ba4 	.word	0x08011ba4
 800bfa0:	20000472 	.word	0x20000472
 800bfa4:	08011bcc 	.word	0x08011bcc
 800bfa8:	08011be4 	.word	0x08011be4
 800bfac:	08011bfc 	.word	0x08011bfc

0800bfb0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08c      	sub	sp, #48	@ 0x30
 800bfb4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bfb6:	2392      	movs	r3, #146	@ 0x92
 800bfb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800bfba:	4862      	ldr	r0, [pc, #392]	@ (800c144 <SVCCTL_InitCustomSvc+0x194>)
 800bfbc:	f7fd fa88 	bl	80094d0 <SVCCTL_RegisterSvcHandler>
   */




  max_attr_record = 10;
 800bfc0:	230a      	movs	r3, #10
 800bfc2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x2b3d;
 800bfc4:	f642 333d 	movw	r3, #11069	@ 0x2b3d
 800bfc8:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 800bfca:	7dbb      	ldrb	r3, [r7, #22]
 800bfcc:	1d39      	adds	r1, r7, #4
 800bfce:	4a5e      	ldr	r2, [pc, #376]	@ (800c148 <SVCCTL_InitCustomSvc+0x198>)
 800bfd0:	9200      	str	r2, [sp, #0]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	f7fc fc94 	bl	8008902 <aci_gatt_add_service>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  eigene Characteristic
   */
  uuid.Char_UUID_16 = 0x2ad2;
 800bfde:	f642 23d2 	movw	r3, #10962	@ 0x2ad2
 800bfe2:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomActivitydatHdle,
 800bfe4:	4b58      	ldr	r3, [pc, #352]	@ (800c148 <SVCCTL_InitCustomSvc+0x198>)
 800bfe6:	8818      	ldrh	r0, [r3, #0]
 800bfe8:	1d3a      	adds	r2, r7, #4
 800bfea:	4b58      	ldr	r3, [pc, #352]	@ (800c14c <SVCCTL_InitCustomSvc+0x19c>)
 800bfec:	9305      	str	r3, [sp, #20]
 800bfee:	2300      	movs	r3, #0
 800bff0:	9304      	str	r3, [sp, #16]
 800bff2:	2310      	movs	r3, #16
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	2304      	movs	r3, #4
 800bff8:	9302      	str	r3, [sp, #8]
 800bffa:	2300      	movs	r3, #0
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	2312      	movs	r3, #18
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c006:	2101      	movs	r1, #1
 800c008:	f7fc fd51 	bl	8008aae <aci_gatt_add_char>
 800c00c:	4603      	mov	r3, r0
 800c00e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  savedActData
   */
  uuid.Char_UUID_16 = 0x2ad3;
 800c010:	f642 23d3 	movw	r3, #10963	@ 0x2ad3
 800c014:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomActivitydatHdle,
 800c016:	4b4c      	ldr	r3, [pc, #304]	@ (800c148 <SVCCTL_InitCustomSvc+0x198>)
 800c018:	8818      	ldrh	r0, [r3, #0]
 800c01a:	4b4d      	ldr	r3, [pc, #308]	@ (800c150 <SVCCTL_InitCustomSvc+0x1a0>)
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	4619      	mov	r1, r3
 800c020:	1d3a      	adds	r2, r7, #4
 800c022:	4b4c      	ldr	r3, [pc, #304]	@ (800c154 <SVCCTL_InitCustomSvc+0x1a4>)
 800c024:	9305      	str	r3, [sp, #20]
 800c026:	2300      	movs	r3, #0
 800c028:	9304      	str	r3, [sp, #16]
 800c02a:	2310      	movs	r3, #16
 800c02c:	9303      	str	r3, [sp, #12]
 800c02e:	2304      	movs	r3, #4
 800c030:	9302      	str	r3, [sp, #8]
 800c032:	2300      	movs	r3, #0
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	2312      	movs	r3, #18
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	460b      	mov	r3, r1
 800c03c:	2101      	movs	r1, #1
 800c03e:	f7fc fd36 	bl	8008aae <aci_gatt_add_char>
 800c042:	4603      	mov	r3, r0
 800c044:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  numberSavedActData
   */
  uuid.Char_UUID_16 = 0x2b45;
 800c046:	f642 3345 	movw	r3, #11077	@ 0x2b45
 800c04a:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomActivitydatHdle,
 800c04c:	4b3e      	ldr	r3, [pc, #248]	@ (800c148 <SVCCTL_InitCustomSvc+0x198>)
 800c04e:	8818      	ldrh	r0, [r3, #0]
 800c050:	4b41      	ldr	r3, [pc, #260]	@ (800c158 <SVCCTL_InitCustomSvc+0x1a8>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	4619      	mov	r1, r3
 800c056:	1d3a      	adds	r2, r7, #4
 800c058:	4b40      	ldr	r3, [pc, #256]	@ (800c15c <SVCCTL_InitCustomSvc+0x1ac>)
 800c05a:	9305      	str	r3, [sp, #20]
 800c05c:	2300      	movs	r3, #0
 800c05e:	9304      	str	r3, [sp, #16]
 800c060:	2310      	movs	r3, #16
 800c062:	9303      	str	r3, [sp, #12]
 800c064:	2300      	movs	r3, #0
 800c066:	9302      	str	r3, [sp, #8]
 800c068:	2300      	movs	r3, #0
 800c06a:	9301      	str	r3, [sp, #4]
 800c06c:	2302      	movs	r3, #2
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	460b      	mov	r3, r1
 800c072:	2101      	movs	r1, #1
 800c074:	f7fc fd1b 	bl	8008aae <aci_gatt_add_char>
 800c078:	4603      	mov	r3, r0
 800c07a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  realTimeClock
   */
  uuid.Char_UUID_16 = 0x2b91;
 800c07c:	f642 3391 	movw	r3, #11153	@ 0x2b91
 800c080:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomActivitydatHdle,
 800c082:	4b31      	ldr	r3, [pc, #196]	@ (800c148 <SVCCTL_InitCustomSvc+0x198>)
 800c084:	8818      	ldrh	r0, [r3, #0]
 800c086:	4b36      	ldr	r3, [pc, #216]	@ (800c160 <SVCCTL_InitCustomSvc+0x1b0>)
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	4619      	mov	r1, r3
 800c08c:	1d3a      	adds	r2, r7, #4
 800c08e:	4b35      	ldr	r3, [pc, #212]	@ (800c164 <SVCCTL_InitCustomSvc+0x1b4>)
 800c090:	9305      	str	r3, [sp, #20]
 800c092:	2300      	movs	r3, #0
 800c094:	9304      	str	r3, [sp, #16]
 800c096:	2310      	movs	r3, #16
 800c098:	9303      	str	r3, [sp, #12]
 800c09a:	2305      	movs	r3, #5
 800c09c:	9302      	str	r3, [sp, #8]
 800c09e:	2300      	movs	r3, #0
 800c0a0:	9301      	str	r3, [sp, #4]
 800c0a2:	230a      	movs	r3, #10
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	f7fc fd00 	bl	8008aae <aci_gatt_add_char>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  stepCounterInt
   */
  uuid.Char_UUID_16 = 0x2b05;
 800c0b2:	f642 3305 	movw	r3, #11013	@ 0x2b05
 800c0b6:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomActivitydatHdle,
 800c0b8:	4b23      	ldr	r3, [pc, #140]	@ (800c148 <SVCCTL_InitCustomSvc+0x198>)
 800c0ba:	8818      	ldrh	r0, [r3, #0]
 800c0bc:	4b2a      	ldr	r3, [pc, #168]	@ (800c168 <SVCCTL_InitCustomSvc+0x1b8>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	1d3a      	adds	r2, r7, #4
 800c0c4:	4b29      	ldr	r3, [pc, #164]	@ (800c16c <SVCCTL_InitCustomSvc+0x1bc>)
 800c0c6:	9305      	str	r3, [sp, #20]
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	2310      	movs	r3, #16
 800c0ce:	9303      	str	r3, [sp, #12]
 800c0d0:	2305      	movs	r3, #5
 800c0d2:	9302      	str	r3, [sp, #8]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	230a      	movs	r3, #10
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	2101      	movs	r1, #1
 800c0e0:	f7fc fce5 	bl	8008aae <aci_gatt_add_char>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	75fb      	strb	r3, [r7, #23]
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x180a;
 800c0ec:	f641 030a 	movw	r3, #6154	@ 0x180a
 800c0f0:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 800c0f2:	7dbb      	ldrb	r3, [r7, #22]
 800c0f4:	1d39      	adds	r1, r7, #4
 800c0f6:	4a1e      	ldr	r2, [pc, #120]	@ (800c170 <SVCCTL_InitCustomSvc+0x1c0>)
 800c0f8:	9200      	str	r2, [sp, #0]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	2001      	movs	r0, #1
 800c0fe:	f7fc fc00 	bl	8008902 <aci_gatt_add_service>
 800c102:	4603      	mov	r3, r0
 800c104:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  batteryLevel
   */
  uuid.Char_UUID_16 = 0x2a19;
 800c106:	f642 2319 	movw	r3, #10777	@ 0x2a19
 800c10a:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomDevicedatHdle,
 800c10c:	4b0e      	ldr	r3, [pc, #56]	@ (800c148 <SVCCTL_InitCustomSvc+0x198>)
 800c10e:	8958      	ldrh	r0, [r3, #10]
 800c110:	4b18      	ldr	r3, [pc, #96]	@ (800c174 <SVCCTL_InitCustomSvc+0x1c4>)
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	4619      	mov	r1, r3
 800c116:	1d3a      	adds	r2, r7, #4
 800c118:	4b17      	ldr	r3, [pc, #92]	@ (800c178 <SVCCTL_InitCustomSvc+0x1c8>)
 800c11a:	9305      	str	r3, [sp, #20]
 800c11c:	2300      	movs	r3, #0
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	2310      	movs	r3, #16
 800c122:	9303      	str	r3, [sp, #12]
 800c124:	2300      	movs	r3, #0
 800c126:	9302      	str	r3, [sp, #8]
 800c128:	2300      	movs	r3, #0
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	2302      	movs	r3, #2
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	460b      	mov	r3, r1
 800c132:	2101      	movs	r1, #1
 800c134:	f7fc fcbb 	bl	8008aae <aci_gatt_add_char>
 800c138:	4603      	mov	r3, r0
 800c13a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c13c:	bf00      	nop
}
 800c13e:	3718      	adds	r7, #24
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	0800bcf9 	.word	0x0800bcf9
 800c148:	20000490 	.word	0x20000490
 800c14c:	2000049e 	.word	0x2000049e
 800c150:	20000028 	.word	0x20000028
 800c154:	20000492 	.word	0x20000492
 800c158:	20000029 	.word	0x20000029
 800c15c:	20000494 	.word	0x20000494
 800c160:	2000002a 	.word	0x2000002a
 800c164:	20000496 	.word	0x20000496
 800c168:	2000002b 	.word	0x2000002b
 800c16c:	20000498 	.word	0x20000498
 800c170:	2000049a 	.word	0x2000049a
 800c174:	2000002c 	.word	0x2000002c
 800c178:	2000049c 	.word	0x2000049c

0800c17c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af02      	add	r7, sp, #8
 800c182:	4603      	mov	r3, r0
 800c184:	6039      	str	r1, [r7, #0]
 800c186:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c188:	2392      	movs	r3, #146	@ 0x92
 800c18a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800c18c:	79fb      	ldrb	r3, [r7, #7]
 800c18e:	2b05      	cmp	r3, #5
 800c190:	d867      	bhi.n	800c262 <Custom_STM_App_Update_Char+0xe6>
 800c192:	a201      	add	r2, pc, #4	@ (adr r2, 800c198 <Custom_STM_App_Update_Char+0x1c>)
 800c194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c198:	0800c1cd 	.word	0x0800c1cd
 800c19c:	0800c1eb 	.word	0x0800c1eb
 800c1a0:	0800c209 	.word	0x0800c209
 800c1a4:	0800c227 	.word	0x0800c227
 800c1a8:	0800c245 	.word	0x0800c245
 800c1ac:	0800c1b1 	.word	0x0800c1b1
  {
    // Eigen angelegte Characteristic
    case CUSTOM_STM_EIGEN_ACT:
      ret = aci_gatt_update_char_value(CustomContext.CustomActivitydatHdle, 
 800c1b0:	4b2f      	ldr	r3, [pc, #188]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c1b2:	8818      	ldrh	r0, [r3, #0]
 800c1b4:	4b2e      	ldr	r3, [pc, #184]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c1b6:	89d9      	ldrh	r1, [r3, #14]
 800c1b8:	4b2e      	ldr	r3, [pc, #184]	@ (800c274 <Custom_STM_App_Update_Char+0xf8>)
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f7fc fd7b 	bl	8008cbe <aci_gatt_update_char_value>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]
                                       0,
                                       SizeNewChar,
                                       (uint8_t *)  pPayload);

    case CUSTOM_STM_SACTDAT:
      ret = aci_gatt_update_char_value(CustomContext.CustomActivitydatHdle,
 800c1cc:	4b28      	ldr	r3, [pc, #160]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c1ce:	8818      	ldrh	r0, [r3, #0]
 800c1d0:	4b27      	ldr	r3, [pc, #156]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c1d2:	8859      	ldrh	r1, [r3, #2]
 800c1d4:	4b28      	ldr	r3, [pc, #160]	@ (800c278 <Custom_STM_App_Update_Char+0xfc>)
 800c1d6:	781a      	ldrb	r2, [r3, #0]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	4613      	mov	r3, r2
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f7fc fd6d 	bl	8008cbe <aci_gatt_update_char_value>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SACTDAT command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800c1e8:	e03c      	b.n	800c264 <Custom_STM_App_Update_Char+0xe8>

    case CUSTOM_STM_NUMACTDAT:
      ret = aci_gatt_update_char_value(CustomContext.CustomActivitydatHdle,
 800c1ea:	4b21      	ldr	r3, [pc, #132]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c1ec:	8818      	ldrh	r0, [r3, #0]
 800c1ee:	4b20      	ldr	r3, [pc, #128]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c1f0:	8899      	ldrh	r1, [r3, #4]
 800c1f2:	4b22      	ldr	r3, [pc, #136]	@ (800c27c <Custom_STM_App_Update_Char+0x100>)
 800c1f4:	781a      	ldrb	r2, [r3, #0]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f7fc fd5e 	bl	8008cbe <aci_gatt_update_char_value>
 800c202:	4603      	mov	r3, r0
 800c204:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value NUMACTDAT command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 800c206:	e02d      	b.n	800c264 <Custom_STM_App_Update_Char+0xe8>

    case CUSTOM_STM_RTC:
      ret = aci_gatt_update_char_value(CustomContext.CustomActivitydatHdle,
 800c208:	4b19      	ldr	r3, [pc, #100]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c20a:	8818      	ldrh	r0, [r3, #0]
 800c20c:	4b18      	ldr	r3, [pc, #96]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c20e:	88d9      	ldrh	r1, [r3, #6]
 800c210:	4b1b      	ldr	r3, [pc, #108]	@ (800c280 <Custom_STM_App_Update_Char+0x104>)
 800c212:	781a      	ldrb	r2, [r3, #0]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	4613      	mov	r3, r2
 800c21a:	2200      	movs	r2, #0
 800c21c:	f7fc fd4f 	bl	8008cbe <aci_gatt_update_char_value>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value RTC command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 800c224:	e01e      	b.n	800c264 <Custom_STM_App_Update_Char+0xe8>

    case CUSTOM_STM_STEPCOUNTERINT:
      ret = aci_gatt_update_char_value(CustomContext.CustomActivitydatHdle,
 800c226:	4b12      	ldr	r3, [pc, #72]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c228:	8818      	ldrh	r0, [r3, #0]
 800c22a:	4b11      	ldr	r3, [pc, #68]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c22c:	8919      	ldrh	r1, [r3, #8]
 800c22e:	4b15      	ldr	r3, [pc, #84]	@ (800c284 <Custom_STM_App_Update_Char+0x108>)
 800c230:	781a      	ldrb	r2, [r3, #0]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	4613      	mov	r3, r2
 800c238:	2200      	movs	r2, #0
 800c23a:	f7fc fd40 	bl	8008cbe <aci_gatt_update_char_value>
 800c23e:	4603      	mov	r3, r0
 800c240:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value STEPCOUNTERINT command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 800c242:	e00f      	b.n	800c264 <Custom_STM_App_Update_Char+0xe8>

    case CUSTOM_STM_BATLVL:
      ret = aci_gatt_update_char_value(CustomContext.CustomDevicedatHdle,
 800c244:	4b0a      	ldr	r3, [pc, #40]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c246:	8958      	ldrh	r0, [r3, #10]
 800c248:	4b09      	ldr	r3, [pc, #36]	@ (800c270 <Custom_STM_App_Update_Char+0xf4>)
 800c24a:	8999      	ldrh	r1, [r3, #12]
 800c24c:	4b0e      	ldr	r3, [pc, #56]	@ (800c288 <Custom_STM_App_Update_Char+0x10c>)
 800c24e:	781a      	ldrb	r2, [r3, #0]
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	4613      	mov	r3, r2
 800c256:	2200      	movs	r2, #0
 800c258:	f7fc fd31 	bl	8008cbe <aci_gatt_update_char_value>
 800c25c:	4603      	mov	r3, r0
 800c25e:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value BATLVL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 800c260:	e000      	b.n	800c264 <Custom_STM_App_Update_Char+0xe8>

    default:
      break;
 800c262:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800c264:	7bfb      	ldrb	r3, [r7, #15]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20000490 	.word	0x20000490
 800c274:	2000048e 	.word	0x2000048e
 800c278:	20000028 	.word	0x20000028
 800c27c:	20000029 	.word	0x20000029
 800c280:	2000002a 	.word	0x2000002a
 800c284:	2000002b 	.word	0x2000002b
 800c288:	2000002c 	.word	0x2000002c

0800c28c <Determine_RawData>:
uint16_t fallConfCounter = 0;
int32_t sumAccY4Fall= 0;

//uint16_t counter = 0;	// Counts the calls of Determine_Activities()

void Determine_RawData(int16_t accelerationValueX, int16_t accelerationValueY, int16_t accelerationValueZ) {
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	80fb      	strh	r3, [r7, #6]
 800c296:	460b      	mov	r3, r1
 800c298:	80bb      	strh	r3, [r7, #4]
 800c29a:	4613      	mov	r3, r2
 800c29c:	807b      	strh	r3, [r7, #2]

    rawData[3 * accelerationValueCounterForRawData + 1] = accelerationValueX;
 800c29e:	4b16      	ldr	r3, [pc, #88]	@ (800c2f8 <Determine_RawData+0x6c>)
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	88fa      	ldrh	r2, [r7, #6]
 800c2ae:	b2d1      	uxtb	r1, r2
 800c2b0:	4a12      	ldr	r2, [pc, #72]	@ (800c2fc <Determine_RawData+0x70>)
 800c2b2:	54d1      	strb	r1, [r2, r3]
    rawData[3 * accelerationValueCounterForRawData + 2] = accelerationValueY;
 800c2b4:	4b10      	ldr	r3, [pc, #64]	@ (800c2f8 <Determine_RawData+0x6c>)
 800c2b6:	881b      	ldrh	r3, [r3, #0]
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	4413      	add	r3, r2
 800c2c0:	3302      	adds	r3, #2
 800c2c2:	88ba      	ldrh	r2, [r7, #4]
 800c2c4:	b2d1      	uxtb	r1, r2
 800c2c6:	4a0d      	ldr	r2, [pc, #52]	@ (800c2fc <Determine_RawData+0x70>)
 800c2c8:	54d1      	strb	r1, [r2, r3]
    rawData[3 * accelerationValueCounterForRawData + 3] = accelerationValueZ;
 800c2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f8 <Determine_RawData+0x6c>)
 800c2cc:	881b      	ldrh	r3, [r3, #0]
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	4413      	add	r3, r2
 800c2d6:	887a      	ldrh	r2, [r7, #2]
 800c2d8:	b2d1      	uxtb	r1, r2
 800c2da:	4a08      	ldr	r2, [pc, #32]	@ (800c2fc <Determine_RawData+0x70>)
 800c2dc:	54d1      	strb	r1, [r2, r3]
 
    accelerationValueCounterForRawData ++;
 800c2de:	4b06      	ldr	r3, [pc, #24]	@ (800c2f8 <Determine_RawData+0x6c>)
 800c2e0:	881b      	ldrh	r3, [r3, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	4b04      	ldr	r3, [pc, #16]	@ (800c2f8 <Determine_RawData+0x6c>)
 800c2e8:	801a      	strh	r2, [r3, #0]

}
 800c2ea:	bf00      	nop
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	2001ad84 	.word	0x2001ad84
 800c2fc:	2001aa84 	.word	0x2001aa84

0800c300 <Determine_Activities>:


void Determine_Activities(int16_t accelerationValueX, int16_t accelerationValueY, int16_t accelerationValueZ)
{
 800c300:	b590      	push	{r4, r7, lr}
 800c302:	b08f      	sub	sp, #60	@ 0x3c
 800c304:	af02      	add	r7, sp, #8
 800c306:	4603      	mov	r3, r0
 800c308:	80fb      	strh	r3, [r7, #6]
 800c30a:	460b      	mov	r3, r1
 800c30c:	80bb      	strh	r3, [r7, #4]
 800c30e:	4613      	mov	r3, r2
 800c310:	807b      	strh	r3, [r7, #2]
	RTC_TimeTypeDef rtcTime;
	RTC_DateTypeDef rtcDate;

	uint8_t yAxisOrientationNew = yUndefined;
 800c312:	2300      	movs	r3, #0
 800c314:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t xyAxisOrientationNew = xyUndefined;
 800c318:	2300      	movs	r3, #0
 800c31a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint8_t postureNew = postureUndefined;
 800c31e:	2300      	movs	r3, #0
 800c320:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t shortTermActivityLevel = activityLevelZero;
 800c324:	2300      	movs	r3, #0
 800c326:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	uint8_t longTermActivityLevel = activityLevelZero;
 800c32a:	2300      	movs	r3, #0
 800c32c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	int16_t meanX = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	853b      	strh	r3, [r7, #40]	@ 0x28
	int16_t meanY = 0;
 800c334:	2300      	movs	r3, #0
 800c336:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t meanZ = 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if(accelerationValueCounter == 0 && receivedSignalsCounter == 0)
 800c33c:	4ba7      	ldr	r3, [pc, #668]	@ (800c5dc <Determine_Activities+0x2dc>)
 800c33e:	881b      	ldrh	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d145      	bne.n	800c3d0 <Determine_Activities+0xd0>
 800c344:	4ba6      	ldr	r3, [pc, #664]	@ (800c5e0 <Determine_Activities+0x2e0>)
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d141      	bne.n	800c3d0 <Determine_Activities+0xd0>
	{	// Start of transmission unit
		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800c34c:	f107 0310 	add.w	r3, r7, #16
 800c350:	2200      	movs	r2, #0
 800c352:	4619      	mov	r1, r3
 800c354:	48a3      	ldr	r0, [pc, #652]	@ (800c5e4 <Determine_Activities+0x2e4>)
 800c356:	f7fb fc85 	bl	8007c64 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800c35a:	f107 030c 	add.w	r3, r7, #12
 800c35e:	2200      	movs	r2, #0
 800c360:	4619      	mov	r1, r3
 800c362:	48a0      	ldr	r0, [pc, #640]	@ (800c5e4 <Determine_Activities+0x2e4>)
 800c364:	f7fb fd88 	bl	8007e78 <HAL_RTC_GetDate>
		printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
				rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds, 
 800c368:	7c3b      	ldrb	r3, [r7, #16]
		printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
 800c36a:	4619      	mov	r1, r3
				rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds, 
 800c36c:	7c7b      	ldrb	r3, [r7, #17]
		printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
 800c36e:	4618      	mov	r0, r3
				rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds, 
 800c370:	7cbb      	ldrb	r3, [r7, #18]
		printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
 800c372:	461c      	mov	r4, r3
                1000* (rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction +1));
 800c374:	69ba      	ldr	r2, [r7, #24]
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c37e:	fb03 f202 	mul.w	r2, r3, r2
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	3301      	adds	r3, #1
		printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
 800c386:	fbb2 f3f3 	udiv	r3, r2, r3
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	4623      	mov	r3, r4
 800c38e:	4602      	mov	r2, r0
 800c390:	4895      	ldr	r0, [pc, #596]	@ (800c5e8 <Determine_Activities+0x2e8>)
 800c392:	f002 fe09 	bl	800efa8 <iprintf>
		printf("%d:%d:%d eigen_activities.c accel counter start date\r\n", rtcDate.Year, rtcDate.Month, rtcDate.Date);
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	4619      	mov	r1, r3
 800c39a:	7b7b      	ldrb	r3, [r7, #13]
 800c39c:	461a      	mov	r2, r3
 800c39e:	7bbb      	ldrb	r3, [r7, #14]
 800c3a0:	4892      	ldr	r0, [pc, #584]	@ (800c5ec <Determine_Activities+0x2ec>)
 800c3a2:	f002 fe01 	bl	800efa8 <iprintf>
		printf("Got datetimeStart. \r\n\r\n");
 800c3a6:	4892      	ldr	r0, [pc, #584]	@ (800c5f0 <Determine_Activities+0x2f0>)
 800c3a8:	f002 fe66 	bl	800f078 <puts>
		datetimeStart.Year = rtcDate.Year;
 800c3ac:	7bfa      	ldrb	r2, [r7, #15]
 800c3ae:	4b91      	ldr	r3, [pc, #580]	@ (800c5f4 <Determine_Activities+0x2f4>)
 800c3b0:	701a      	strb	r2, [r3, #0]
		datetimeStart.Month = rtcDate.Month;
 800c3b2:	7b7a      	ldrb	r2, [r7, #13]
 800c3b4:	4b8f      	ldr	r3, [pc, #572]	@ (800c5f4 <Determine_Activities+0x2f4>)
 800c3b6:	705a      	strb	r2, [r3, #1]
		datetimeStart.Date = rtcDate.Date;
 800c3b8:	7bba      	ldrb	r2, [r7, #14]
 800c3ba:	4b8e      	ldr	r3, [pc, #568]	@ (800c5f4 <Determine_Activities+0x2f4>)
 800c3bc:	709a      	strb	r2, [r3, #2]
		datetimeStart.Hours = rtcTime.Hours;
 800c3be:	7c3a      	ldrb	r2, [r7, #16]
 800c3c0:	4b8c      	ldr	r3, [pc, #560]	@ (800c5f4 <Determine_Activities+0x2f4>)
 800c3c2:	70da      	strb	r2, [r3, #3]
		datetimeStart.Minutes = rtcTime.Minutes;
 800c3c4:	7c7a      	ldrb	r2, [r7, #17]
 800c3c6:	4b8b      	ldr	r3, [pc, #556]	@ (800c5f4 <Determine_Activities+0x2f4>)
 800c3c8:	711a      	strb	r2, [r3, #4]
		datetimeStart.Seconds = rtcTime.Seconds;
 800c3ca:	7cba      	ldrb	r2, [r7, #18]
 800c3cc:	4b89      	ldr	r3, [pc, #548]	@ (800c5f4 <Determine_Activities+0x2f4>)
 800c3ce:	715a      	strb	r2, [r3, #5]
	}

	accX[accelerationValueCounter] = accelerationValueX;
 800c3d0:	4b82      	ldr	r3, [pc, #520]	@ (800c5dc <Determine_Activities+0x2dc>)
 800c3d2:	881b      	ldrh	r3, [r3, #0]
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	4a88      	ldr	r2, [pc, #544]	@ (800c5f8 <Determine_Activities+0x2f8>)
 800c3d8:	88fb      	ldrh	r3, [r7, #6]
 800c3da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	accY[accelerationValueCounter] = accelerationValueY;
 800c3de:	4b7f      	ldr	r3, [pc, #508]	@ (800c5dc <Determine_Activities+0x2dc>)
 800c3e0:	881b      	ldrh	r3, [r3, #0]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4a85      	ldr	r2, [pc, #532]	@ (800c5fc <Determine_Activities+0x2fc>)
 800c3e6:	88bb      	ldrh	r3, [r7, #4]
 800c3e8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	accZ[accelerationValueCounter] = accelerationValueZ;
 800c3ec:	4b7b      	ldr	r3, [pc, #492]	@ (800c5dc <Determine_Activities+0x2dc>)
 800c3ee:	881b      	ldrh	r3, [r3, #0]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4a83      	ldr	r2, [pc, #524]	@ (800c600 <Determine_Activities+0x300>)
 800c3f4:	887b      	ldrh	r3, [r7, #2]
 800c3f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

	sumAccX += accelerationValueX;
 800c3fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c3fe:	4b81      	ldr	r3, [pc, #516]	@ (800c604 <Determine_Activities+0x304>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4413      	add	r3, r2
 800c404:	4a7f      	ldr	r2, [pc, #508]	@ (800c604 <Determine_Activities+0x304>)
 800c406:	6013      	str	r3, [r2, #0]
	sumAccY += accelerationValueY;
 800c408:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c40c:	4b7e      	ldr	r3, [pc, #504]	@ (800c608 <Determine_Activities+0x308>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4413      	add	r3, r2
 800c412:	4a7d      	ldr	r2, [pc, #500]	@ (800c608 <Determine_Activities+0x308>)
 800c414:	6013      	str	r3, [r2, #0]
	sumAccZ += accelerationValueZ;
 800c416:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c41a:	4b7c      	ldr	r3, [pc, #496]	@ (800c60c <Determine_Activities+0x30c>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4413      	add	r3, r2
 800c420:	4a7a      	ldr	r2, [pc, #488]	@ (800c60c <Determine_Activities+0x30c>)
 800c422:	6013      	str	r3, [r2, #0]

	accelerationValueCounter ++;
 800c424:	4b6d      	ldr	r3, [pc, #436]	@ (800c5dc <Determine_Activities+0x2dc>)
 800c426:	881b      	ldrh	r3, [r3, #0]
 800c428:	3301      	adds	r3, #1
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	4b6b      	ldr	r3, [pc, #428]	@ (800c5dc <Determine_Activities+0x2dc>)
 800c42e:	801a      	strh	r2, [r3, #0]

	// Detect and count movements
	Count_Jumps(accelerationValueY, yAxisOrientation);
 800c430:	4b77      	ldr	r3, [pc, #476]	@ (800c610 <Determine_Activities+0x310>)
 800c432:	781a      	ldrb	r2, [r3, #0]
 800c434:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c438:	4611      	mov	r1, r2
 800c43a:	4618      	mov	r0, r3
 800c43c:	f000 f9be 	bl	800c7bc <Count_Jumps>
	Count_Runs(accelerationValueY, yAxisOrientation);
 800c440:	4b73      	ldr	r3, [pc, #460]	@ (800c610 <Determine_Activities+0x310>)
 800c442:	781a      	ldrb	r2, [r3, #0]
 800c444:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c448:	4611      	mov	r1, r2
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 face 	bl	800c9ec <Count_Runs>
	// Use function Count_WalkingSteps or Count_WalkingSteps_And_Squats to avoid double counting of walking steps!!!
    // Count_WalkingSteps(accelerationValueY, yAxisOrientation);
	Count_WalkingSteps_And_Squats(accelerationValueX, accelerationValueY, xyAxisOrientation, yAxisOrientation);
 800c450:	4b70      	ldr	r3, [pc, #448]	@ (800c614 <Determine_Activities+0x314>)
 800c452:	781a      	ldrb	r2, [r3, #0]
 800c454:	4b6e      	ldr	r3, [pc, #440]	@ (800c610 <Determine_Activities+0x310>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800c45c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800c460:	f000 fbd6 	bl	800cc10 <Count_WalkingSteps_And_Squats>
	Count_Situps(accelerationValueX, accelerationValueY, xyAxisOrientation, yAxisOrientation);
 800c464:	4b6b      	ldr	r3, [pc, #428]	@ (800c614 <Determine_Activities+0x314>)
 800c466:	781a      	ldrb	r2, [r3, #0]
 800c468:	4b69      	ldr	r3, [pc, #420]	@ (800c610 <Determine_Activities+0x310>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800c470:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800c474:	f000 fe4c 	bl	800d110 <Count_Situps>
	Count_Pushups(accelerationValueX, accelerationValueY, accelerationValueZ, xyAxisOrientation);
 800c478:	4b66      	ldr	r3, [pc, #408]	@ (800c614 <Determine_Activities+0x314>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c480:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800c484:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800c488:	f000 fed8 	bl	800d23c <Count_Pushups>
    // Detect fall (needs a method to send a warning)
    // Detect_Fall(accelerationValueX, accelerationValueY, accelerationValueZ);


	// Signal is complete
	if(accelerationValueCounter == ACCELEROMETER_VALUES_PER_SIGNAL)
 800c48c:	4b53      	ldr	r3, [pc, #332]	@ (800c5dc <Determine_Activities+0x2dc>)
 800c48e:	881b      	ldrh	r3, [r3, #0]
 800c490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c494:	f040 812f 	bne.w	800c6f6 <Determine_Activities+0x3f6>
	{
		accelerationValueCounter = 0;
 800c498:	4b50      	ldr	r3, [pc, #320]	@ (800c5dc <Determine_Activities+0x2dc>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	801a      	strh	r2, [r3, #0]
		receivedSignalsCounter ++;
 800c49e:	4b50      	ldr	r3, [pc, #320]	@ (800c5e0 <Determine_Activities+0x2e0>)
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	4b4e      	ldr	r3, [pc, #312]	@ (800c5e0 <Determine_Activities+0x2e0>)
 800c4a8:	801a      	strh	r2, [r3, #0]
		// Calculate mean for each axis (meanX = sumAccX / ACCELEROMETER_VALUES_PER_SIGNAL)
		meanX = sumAccX >> 8;
 800c4aa:	4b56      	ldr	r3, [pc, #344]	@ (800c604 <Determine_Activities+0x304>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	121b      	asrs	r3, r3, #8
 800c4b0:	853b      	strh	r3, [r7, #40]	@ 0x28
		meanY = sumAccY >> 8;
 800c4b2:	4b55      	ldr	r3, [pc, #340]	@ (800c608 <Determine_Activities+0x308>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	121b      	asrs	r3, r3, #8
 800c4b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
		meanZ = sumAccZ >> 8;
 800c4ba:	4b54      	ldr	r3, [pc, #336]	@ (800c60c <Determine_Activities+0x30c>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	121b      	asrs	r3, r3, #8
 800c4c0:	84bb      	strh	r3, [r7, #36]	@ 0x24

		sumAccX = 0;
 800c4c2:	4b50      	ldr	r3, [pc, #320]	@ (800c604 <Determine_Activities+0x304>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]
		sumAccY = 0;
 800c4c8:	4b4f      	ldr	r3, [pc, #316]	@ (800c608 <Determine_Activities+0x308>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]
		sumAccZ = 0;
 800c4ce:	4b4f      	ldr	r3, [pc, #316]	@ (800c60c <Determine_Activities+0x30c>)
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	601a      	str	r2, [r3, #0]

		yAxisOrientationNew = Get_Y_Axis_Orientation(meanY);
 800c4d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f000 f919 	bl	800c710 <Get_Y_Axis_Orientation>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		xyAxisOrientationNew = Get_XY_Axis_Orientation(meanX, meanY);
 800c4e4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800c4e8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 f928 	bl	800c744 <Get_XY_Axis_Orientation>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		postureNew = Get_Posture(meanX, meanY, meanZ, xyAxisOrientation);
 800c4fa:	4b46      	ldr	r3, [pc, #280]	@ (800c614 <Determine_Activities+0x314>)
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800c502:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 800c506:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	@ 0x28
 800c50a:	f000 ff1f 	bl	800d34c <Get_Posture>
 800c50e:	4603      	mov	r3, r0
 800c510:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

        
		printf("postureNew = %d\r\n", postureNew);
 800c514:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c518:	4619      	mov	r1, r3
 800c51a:	483f      	ldr	r0, [pc, #252]	@ (800c618 <Determine_Activities+0x318>)
 800c51c:	f002 fd44 	bl	800efa8 <iprintf>
        
		if (yAxisOrientation != yAxisOrientationNew)
 800c520:	4b3b      	ldr	r3, [pc, #236]	@ (800c610 <Determine_Activities+0x310>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c528:	429a      	cmp	r2, r3
 800c52a:	d009      	beq.n	800c540 <Determine_Activities+0x240>
		{
			yAxisOrientation = yAxisOrientationNew;
 800c52c:	4a38      	ldr	r2, [pc, #224]	@ (800c610 <Determine_Activities+0x310>)
 800c52e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c532:	7013      	strb	r3, [r2, #0]
			printf("y-Axisorientation = %d\r\n", yAxisOrientation);
 800c534:	4b36      	ldr	r3, [pc, #216]	@ (800c610 <Determine_Activities+0x310>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	4619      	mov	r1, r3
 800c53a:	4838      	ldr	r0, [pc, #224]	@ (800c61c <Determine_Activities+0x31c>)
 800c53c:	f002 fd34 	bl	800efa8 <iprintf>
		}

		if (xyAxisOrientation != xyAxisOrientationNew && xyAxisOrientationNew != xyUndefined)
 800c540:	4b34      	ldr	r3, [pc, #208]	@ (800c614 <Determine_Activities+0x314>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800c548:	429a      	cmp	r2, r3
 800c54a:	d00d      	beq.n	800c568 <Determine_Activities+0x268>
 800c54c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c550:	2b00      	cmp	r3, #0
 800c552:	d009      	beq.n	800c568 <Determine_Activities+0x268>
		{
			xyAxisOrientation = xyAxisOrientationNew;
 800c554:	4a2f      	ldr	r2, [pc, #188]	@ (800c614 <Determine_Activities+0x314>)
 800c556:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c55a:	7013      	strb	r3, [r2, #0]
			printf("xy-Axisorientation = %d\r\n", xyAxisOrientation);
 800c55c:	4b2d      	ldr	r3, [pc, #180]	@ (800c614 <Determine_Activities+0x314>)
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	4619      	mov	r1, r3
 800c562:	482f      	ldr	r0, [pc, #188]	@ (800c620 <Determine_Activities+0x320>)
 800c564:	f002 fd20 	bl	800efa8 <iprintf>
		}



		// First data set or data for old posture has just been saved
		if(postureOld == postureUndefined)
 800c568:	4b2e      	ldr	r3, [pc, #184]	@ (800c624 <Determine_Activities+0x324>)
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d103      	bne.n	800c578 <Determine_Activities+0x278>
		{
			postureOld = postureNew;
 800c570:	4a2c      	ldr	r2, [pc, #176]	@ (800c624 <Determine_Activities+0x324>)
 800c572:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c576:	7013      	strb	r3, [r2, #0]
		}

		// Posture changed
		if(postureOld != postureNew)
 800c578:	4b2a      	ldr	r3, [pc, #168]	@ (800c624 <Determine_Activities+0x324>)
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800c580:	429a      	cmp	r2, r3
 800c582:	d053      	beq.n	800c62c <Determine_Activities+0x32c>
		{
            shortTermActivityLevel = Get_Short_Term_Activity_Level();
 800c584:	f001 f816 	bl	800d5b4 <Get_Short_Term_Activity_Level>
 800c588:	4603      	mov	r3, r0
 800c58a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            longTermActivityLevel = Get_Long_Term_Activity_Level();
 800c58e:	f001 f87f 	bl	800d690 <Get_Long_Term_Activity_Level>
 800c592:	4603      	mov	r3, r0
 800c594:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            Get_Average_Speed();    
 800c598:	f001 f9d0 	bl	800d93c <Get_Average_Speed>
            Save_Data(shortTermActivityLevel, longTermActivityLevel);
 800c59c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800c5a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f001 fa0c 	bl	800d9c4 <Save_Data>
            Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration(meanX, meanY, meanZ);
 800c5ac:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800c5b0:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 800c5b4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f001 f8f1 	bl	800d7a0 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration>

            // Set variables for new signal
            postureOld = postureNew;
 800c5be:	4a19      	ldr	r2, [pc, #100]	@ (800c624 <Determine_Activities+0x324>)
 800c5c0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c5c4:	7013      	strb	r3, [r2, #0]
            receivedSignalsCounter = 1;
 800c5c6:	4b06      	ldr	r3, [pc, #24]	@ (800c5e0 <Determine_Activities+0x2e0>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	801a      	strh	r2, [r3, #0]
            datetimeStart = datetimeEnd;
 800c5cc:	4b09      	ldr	r3, [pc, #36]	@ (800c5f4 <Determine_Activities+0x2f4>)
 800c5ce:	4a16      	ldr	r2, [pc, #88]	@ (800c628 <Determine_Activities+0x328>)
 800c5d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c5d4:	6018      	str	r0, [r3, #0]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	8019      	strh	r1, [r3, #0]
					noActivitySignalsCounter = 0;
				}
			}
		}
	}
}
 800c5da:	e08c      	b.n	800c6f6 <Determine_Activities+0x3f6>
 800c5dc:	2001ad88 	.word	0x2001ad88
 800c5e0:	2001ad8a 	.word	0x2001ad8a
 800c5e4:	20000318 	.word	0x20000318
 800c5e8:	08011c1c 	.word	0x08011c1c
 800c5ec:	08011c5c 	.word	0x08011c5c
 800c5f0:	08011c94 	.word	0x08011c94
 800c5f4:	2001b3a8 	.word	0x2001b3a8
 800c5f8:	2001ad90 	.word	0x2001ad90
 800c5fc:	2001af90 	.word	0x2001af90
 800c600:	2001b190 	.word	0x2001b190
 800c604:	2001b390 	.word	0x2001b390
 800c608:	2001b394 	.word	0x2001b394
 800c60c:	2001b398 	.word	0x2001b398
 800c610:	2001b3b6 	.word	0x2001b3b6
 800c614:	2001b3b7 	.word	0x2001b3b7
 800c618:	08011cac 	.word	0x08011cac
 800c61c:	08011cc0 	.word	0x08011cc0
 800c620:	08011cdc 	.word	0x08011cdc
 800c624:	2001ad86 	.word	0x2001ad86
 800c628:	2001b3b0 	.word	0x2001b3b0
			Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration(meanX, meanY, meanZ);
 800c62c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800c630:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 800c634:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800c638:	4618      	mov	r0, r3
 800c63a:	f001 f8b1 	bl	800d7a0 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration>
			shortTermActivityLevel = Get_Short_Term_Activity_Level();
 800c63e:	f000 ffb9 	bl	800d5b4 <Get_Short_Term_Activity_Level>
 800c642:	4603      	mov	r3, r0
 800c644:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			longTermActivityLevel = Get_Long_Term_Activity_Level();
 800c648:	f001 f822 	bl	800d690 <Get_Long_Term_Activity_Level>
 800c64c:	4603      	mov	r3, r0
 800c64e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			Get_Average_Speed();
 800c652:	f001 f973 	bl	800d93c <Get_Average_Speed>
			if(shortTermActivityLevel == activityLevelZero && longTermActivityLevel == activityLevelZero)
 800c656:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d129      	bne.n	800c6b2 <Determine_Activities+0x3b2>
 800c65e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c662:	2b00      	cmp	r3, #0
 800c664:	d125      	bne.n	800c6b2 <Determine_Activities+0x3b2>
				noActivitySignalsCounter ++;
 800c666:	4b26      	ldr	r3, [pc, #152]	@ (800c700 <Determine_Activities+0x400>)
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	3301      	adds	r3, #1
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	4b24      	ldr	r3, [pc, #144]	@ (800c700 <Determine_Activities+0x400>)
 800c670:	801a      	strh	r2, [r3, #0]
				if(receivedSignalsCounter == SIGNALS_PER_TRANSMISSION_CASE_NO_ACTIVITY)
 800c672:	4b24      	ldr	r3, [pc, #144]	@ (800c704 <Determine_Activities+0x404>)
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800c67a:	d10d      	bne.n	800c698 <Determine_Activities+0x398>
					Save_Data(shortTermActivityLevel, longTermActivityLevel);
 800c67c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800c680:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c684:	4611      	mov	r1, r2
 800c686:	4618      	mov	r0, r3
 800c688:	f001 f99c 	bl	800d9c4 <Save_Data>
					postureOld = postureUndefined;
 800c68c:	4b1e      	ldr	r3, [pc, #120]	@ (800c708 <Determine_Activities+0x408>)
 800c68e:	2200      	movs	r2, #0
 800c690:	701a      	strb	r2, [r3, #0]
					receivedSignalsCounter = 0;
 800c692:	4b1c      	ldr	r3, [pc, #112]	@ (800c704 <Determine_Activities+0x404>)
 800c694:	2200      	movs	r2, #0
 800c696:	801a      	strh	r2, [r3, #0]
				if(noActivitySignalsCounter == MAX_NUMBER_NO_ACTIVITY_SIGNALS)
 800c698:	4b19      	ldr	r3, [pc, #100]	@ (800c700 <Determine_Activities+0x400>)
 800c69a:	881b      	ldrh	r3, [r3, #0]
 800c69c:	f641 3277 	movw	r2, #7031	@ 0x1b77
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d128      	bne.n	800c6f6 <Determine_Activities+0x3f6>
					printf("SEIT 10 STUNDEN KEINE AKTIVITÄT!!!");	// Replace by a method to send a warning
 800c6a4:	4819      	ldr	r0, [pc, #100]	@ (800c70c <Determine_Activities+0x40c>)
 800c6a6:	f002 fc7f 	bl	800efa8 <iprintf>
					noActivitySignalsCounter = 0;
 800c6aa:	4b15      	ldr	r3, [pc, #84]	@ (800c700 <Determine_Activities+0x400>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	801a      	strh	r2, [r3, #0]
				if(noActivitySignalsCounter == MAX_NUMBER_NO_ACTIVITY_SIGNALS)
 800c6b0:	e021      	b.n	800c6f6 <Determine_Activities+0x3f6>
				if(receivedSignalsCounter >= SIGNALS_PER_TRANSMISSION)
 800c6b2:	4b14      	ldr	r3, [pc, #80]	@ (800c704 <Determine_Activities+0x404>)
 800c6b4:	881b      	ldrh	r3, [r3, #0]
 800c6b6:	2b75      	cmp	r3, #117	@ 0x75
 800c6b8:	d91d      	bls.n	800c6f6 <Determine_Activities+0x3f6>
					shortTermActivityLevel = Get_Short_Term_Activity_Level();
 800c6ba:	f000 ff7b 	bl	800d5b4 <Get_Short_Term_Activity_Level>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
					longTermActivityLevel = Get_Long_Term_Activity_Level();
 800c6c4:	f000 ffe4 	bl	800d690 <Get_Long_Term_Activity_Level>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
					Get_Average_Speed();
 800c6ce:	f001 f935 	bl	800d93c <Get_Average_Speed>
					Save_Data(shortTermActivityLevel, longTermActivityLevel);
 800c6d2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800c6d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c6da:	4611      	mov	r1, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f001 f971 	bl	800d9c4 <Save_Data>
					postureOld = postureUndefined;
 800c6e2:	4b09      	ldr	r3, [pc, #36]	@ (800c708 <Determine_Activities+0x408>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
					receivedSignalsCounter = 0;
 800c6e8:	4b06      	ldr	r3, [pc, #24]	@ (800c704 <Determine_Activities+0x404>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	801a      	strh	r2, [r3, #0]
					noActivitySignalsCounter = 0;
 800c6ee:	4b04      	ldr	r3, [pc, #16]	@ (800c700 <Determine_Activities+0x400>)
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	801a      	strh	r2, [r3, #0]
}
 800c6f4:	e7ff      	b.n	800c6f6 <Determine_Activities+0x3f6>
 800c6f6:	bf00      	nop
 800c6f8:	3734      	adds	r7, #52	@ 0x34
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd90      	pop	{r4, r7, pc}
 800c6fe:	bf00      	nop
 800c700:	2001ad8c 	.word	0x2001ad8c
 800c704:	2001ad8a 	.word	0x2001ad8a
 800c708:	2001ad86 	.word	0x2001ad86
 800c70c:	08011cf8 	.word	0x08011cf8

0800c710 <Get_Y_Axis_Orientation>:


uint8_t Get_Y_Axis_Orientation(int16_t meanY)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	80fb      	strh	r3, [r7, #6]
    if(meanY > MEAN_LIMIT_FOR_Y_UP)
 800c71a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c71e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800c722:	dd01      	ble.n	800c728 <Get_Y_Axis_Orientation+0x18>
    {
    	return yUp;
 800c724:	2301      	movs	r3, #1
 800c726:	e007      	b.n	800c738 <Get_Y_Axis_Orientation+0x28>
    }
    if(meanY < MEAN_LIMIT_FOR_Y_DOWN)
 800c728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c72c:	f513 7f48 	cmn.w	r3, #800	@ 0x320
 800c730:	da01      	bge.n	800c736 <Get_Y_Axis_Orientation+0x26>
    {
    	return yDown;
 800c732:	2302      	movs	r3, #2
 800c734:	e000      	b.n	800c738 <Get_Y_Axis_Orientation+0x28>
    }
    return yUndefined;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <Get_XY_Axis_Orientation>:

uint8_t Get_XY_Axis_Orientation(int16_t meanX, int16_t meanY)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	460a      	mov	r2, r1
 800c74e:	80fb      	strh	r3, [r7, #6]
 800c750:	4613      	mov	r3, r2
 800c752:	80bb      	strh	r3, [r7, #4]
	if(meanY > MEAN_LIMIT_FOR_Y_UP && meanX < MEAN_LIMIT_FOR_X_ORIENTATION)
 800c754:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c758:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800c75c:	dd05      	ble.n	800c76a <Get_XY_Axis_Orientation+0x26>
 800c75e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c762:	2b00      	cmp	r3, #0
 800c764:	da01      	bge.n	800c76a <Get_XY_Axis_Orientation+0x26>
	{
		return yUpXForward;
 800c766:	2301      	movs	r3, #1
 800c768:	e021      	b.n	800c7ae <Get_XY_Axis_Orientation+0x6a>
	}
    if(meanY > MEAN_LIMIT_FOR_Y_UP && meanX > MEAN_LIMIT_FOR_X_ORIENTATION)
 800c76a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c76e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800c772:	dd05      	ble.n	800c780 <Get_XY_Axis_Orientation+0x3c>
 800c774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dd01      	ble.n	800c780 <Get_XY_Axis_Orientation+0x3c>
    {
    	return yUpXBackward;
 800c77c:	2302      	movs	r3, #2
 800c77e:	e016      	b.n	800c7ae <Get_XY_Axis_Orientation+0x6a>
    }
    if(meanY < MEAN_LIMIT_FOR_Y_DOWN && meanX < MEAN_LIMIT_FOR_X_ORIENTATION)
 800c780:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c784:	f513 7f48 	cmn.w	r3, #800	@ 0x320
 800c788:	da05      	bge.n	800c796 <Get_XY_Axis_Orientation+0x52>
 800c78a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	da01      	bge.n	800c796 <Get_XY_Axis_Orientation+0x52>
    {
    	return yDownXForward;
 800c792:	2303      	movs	r3, #3
 800c794:	e00b      	b.n	800c7ae <Get_XY_Axis_Orientation+0x6a>
    }
    if(meanY < MEAN_LIMIT_FOR_Y_DOWN && meanX > MEAN_LIMIT_FOR_X_ORIENTATION)
 800c796:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c79a:	f513 7f48 	cmn.w	r3, #800	@ 0x320
 800c79e:	da05      	bge.n	800c7ac <Get_XY_Axis_Orientation+0x68>
 800c7a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dd01      	ble.n	800c7ac <Get_XY_Axis_Orientation+0x68>
    {
    	return yDownXBackward;
 800c7a8:	2304      	movs	r3, #4
 800c7aa:	e000      	b.n	800c7ae <Get_XY_Axis_Orientation+0x6a>
    }
    return xyUndefined;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	370c      	adds	r7, #12
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
	...

0800c7bc <Count_Jumps>:

void Count_Jumps(int16_t accelerationValueY, uint8_t yAxisOrientation)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	460a      	mov	r2, r1
 800c7c6:	80fb      	strh	r3, [r7, #6]
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	717b      	strb	r3, [r7, #5]
	if(yAxisOrientation == yUp)
 800c7cc:	797b      	ldrb	r3, [r7, #5]
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d175      	bne.n	800c8be <Count_Jumps+0x102>
	{
	    if(accelerationValueY > Y_STARTING_RANGE_VALUE_FOR_JUMPS_IF_Y_UP)
 800c7d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7d6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800c7da:	dd02      	ble.n	800c7e2 <Count_Jumps+0x26>
	    {
	        yRange4jumpsReached = True;
 800c7dc:	4b77      	ldr	r3, [pc, #476]	@ (800c9bc <Count_Jumps+0x200>)
 800c7de:	2201      	movs	r2, #1
 800c7e0:	701a      	strb	r2, [r3, #0]
	    }
	    if(yRange4jumpsReached == True)
 800c7e2:	4b76      	ldr	r3, [pc, #472]	@ (800c9bc <Count_Jumps+0x200>)
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d105      	bne.n	800c7f6 <Count_Jumps+0x3a>
	    {
	        counter4valuesInRangeJumps ++;
 800c7ea:	4b75      	ldr	r3, [pc, #468]	@ (800c9c0 <Count_Jumps+0x204>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	4b73      	ldr	r3, [pc, #460]	@ (800c9c0 <Count_Jumps+0x204>)
 800c7f4:	701a      	strb	r2, [r3, #0]
	    }
	    if(yRange4jumpsReached == True && accelerationValueY < Y_VALUE_TO_TERMINATE_JUMPS_IF_Y_UP)
 800c7f6:	4b71      	ldr	r3, [pc, #452]	@ (800c9bc <Count_Jumps+0x200>)
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d12f      	bne.n	800c85e <Count_Jumps+0xa2>
 800c7fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c802:	2b63      	cmp	r3, #99	@ 0x63
 800c804:	dc2b      	bgt.n	800c85e <Count_Jumps+0xa2>
	    {
	        jumps ++;
 800c806:	4b6f      	ldr	r3, [pc, #444]	@ (800c9c4 <Count_Jumps+0x208>)
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	3301      	adds	r3, #1
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	4b6d      	ldr	r3, [pc, #436]	@ (800c9c4 <Count_Jumps+0x208>)
 800c810:	801a      	strh	r2, [r3, #0]
	        printf("jumps = %d\r\n", jumps);
 800c812:	4b6c      	ldr	r3, [pc, #432]	@ (800c9c4 <Count_Jumps+0x208>)
 800c814:	881b      	ldrh	r3, [r3, #0]
 800c816:	4619      	mov	r1, r3
 800c818:	486b      	ldr	r0, [pc, #428]	@ (800c9c8 <Count_Jumps+0x20c>)
 800c81a:	f002 fbc5 	bl	800efa8 <iprintf>
	        yRange4jumpsReached = False;
 800c81e:	4b67      	ldr	r3, [pc, #412]	@ (800c9bc <Count_Jumps+0x200>)
 800c820:	2200      	movs	r2, #0
 800c822:	701a      	strb	r2, [r3, #0]
	        yRange4runsReached = False;
 800c824:	4b69      	ldr	r3, [pc, #420]	@ (800c9cc <Count_Jumps+0x210>)
 800c826:	2200      	movs	r2, #0
 800c828:	701a      	strb	r2, [r3, #0]
	        yRange4walkingStepsReached = False;
 800c82a:	4b69      	ldr	r3, [pc, #420]	@ (800c9d0 <Count_Jumps+0x214>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeJumps = 0;
 800c830:	4b63      	ldr	r3, [pc, #396]	@ (800c9c0 <Count_Jumps+0x204>)
 800c832:	2200      	movs	r2, #0
 800c834:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeRuns = 0;
 800c836:	4b67      	ldr	r3, [pc, #412]	@ (800c9d4 <Count_Jumps+0x218>)
 800c838:	2200      	movs	r2, #0
 800c83a:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeWalkingSteps = 0;
 800c83c:	4b66      	ldr	r3, [pc, #408]	@ (800c9d8 <Count_Jumps+0x21c>)
 800c83e:	2200      	movs	r2, #0
 800c840:	701a      	strb	r2, [r3, #0]

	        // Only if function Count_WalkingSteps_And_Squats used
	        xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800c842:	4b66      	ldr	r3, [pc, #408]	@ (800c9dc <Count_Jumps+0x220>)
 800c844:	2200      	movs	r2, #0
 800c846:	801a      	strh	r2, [r3, #0]
	        xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800c848:	4b65      	ldr	r3, [pc, #404]	@ (800c9e0 <Count_Jumps+0x224>)
 800c84a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c84e:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MAX_IF_X_FORWARD;
 800c850:	4b64      	ldr	r3, [pc, #400]	@ (800c9e4 <Count_Jumps+0x228>)
 800c852:	f64f 42e0 	movw	r2, #64736	@ 0xfce0
 800c856:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800c858:	4b63      	ldr	r3, [pc, #396]	@ (800c9e8 <Count_Jumps+0x22c>)
 800c85a:	2200      	movs	r2, #0
 800c85c:	801a      	strh	r2, [r3, #0]
	    }
	    if(counter4valuesInRangeJumps > MAX_NUMBER_VALUES_TO_DETECT_JUMPS)
 800c85e:	4b58      	ldr	r3, [pc, #352]	@ (800c9c0 <Count_Jumps+0x204>)
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	2b28      	cmp	r3, #40	@ 0x28
 800c864:	d92b      	bls.n	800c8be <Count_Jumps+0x102>
	    {
	        jumps ++;
 800c866:	4b57      	ldr	r3, [pc, #348]	@ (800c9c4 <Count_Jumps+0x208>)
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	3301      	adds	r3, #1
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	4b55      	ldr	r3, [pc, #340]	@ (800c9c4 <Count_Jumps+0x208>)
 800c870:	801a      	strh	r2, [r3, #0]
			printf("jumps = %d\r\n", jumps);
 800c872:	4b54      	ldr	r3, [pc, #336]	@ (800c9c4 <Count_Jumps+0x208>)
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	4619      	mov	r1, r3
 800c878:	4853      	ldr	r0, [pc, #332]	@ (800c9c8 <Count_Jumps+0x20c>)
 800c87a:	f002 fb95 	bl	800efa8 <iprintf>
	        yRange4jumpsReached = False;
 800c87e:	4b4f      	ldr	r3, [pc, #316]	@ (800c9bc <Count_Jumps+0x200>)
 800c880:	2200      	movs	r2, #0
 800c882:	701a      	strb	r2, [r3, #0]
	        yRange4runsReached = False;
 800c884:	4b51      	ldr	r3, [pc, #324]	@ (800c9cc <Count_Jumps+0x210>)
 800c886:	2200      	movs	r2, #0
 800c888:	701a      	strb	r2, [r3, #0]
	        yRange4walkingStepsReached = False;
 800c88a:	4b51      	ldr	r3, [pc, #324]	@ (800c9d0 <Count_Jumps+0x214>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeJumps = 0;
 800c890:	4b4b      	ldr	r3, [pc, #300]	@ (800c9c0 <Count_Jumps+0x204>)
 800c892:	2200      	movs	r2, #0
 800c894:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeRuns = 0;
 800c896:	4b4f      	ldr	r3, [pc, #316]	@ (800c9d4 <Count_Jumps+0x218>)
 800c898:	2200      	movs	r2, #0
 800c89a:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeWalkingSteps = 0;
 800c89c:	4b4e      	ldr	r3, [pc, #312]	@ (800c9d8 <Count_Jumps+0x21c>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	701a      	strb	r2, [r3, #0]

	        // Only if function Count_WalkingSteps_And_Squats used
	        xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800c8a2:	4b4e      	ldr	r3, [pc, #312]	@ (800c9dc <Count_Jumps+0x220>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	801a      	strh	r2, [r3, #0]
	        xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800c8a8:	4b4d      	ldr	r3, [pc, #308]	@ (800c9e0 <Count_Jumps+0x224>)
 800c8aa:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c8ae:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MAX_IF_X_FORWARD;
 800c8b0:	4b4c      	ldr	r3, [pc, #304]	@ (800c9e4 <Count_Jumps+0x228>)
 800c8b2:	f64f 42e0 	movw	r2, #64736	@ 0xfce0
 800c8b6:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800c8b8:	4b4b      	ldr	r3, [pc, #300]	@ (800c9e8 <Count_Jumps+0x22c>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	801a      	strh	r2, [r3, #0]
	    }
	}

	if(yAxisOrientation == yDown)
 800c8be:	797b      	ldrb	r3, [r7, #5]
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d176      	bne.n	800c9b2 <Count_Jumps+0x1f6>
	{
	    if(accelerationValueY < Y_STARTING_RANGE_VALUE_FOR_JUMPS_IF_Y_DOWN)
 800c8c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8c8:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 800c8cc:	da02      	bge.n	800c8d4 <Count_Jumps+0x118>
	    {
	        yRange4jumpsReached = True;
 800c8ce:	4b3b      	ldr	r3, [pc, #236]	@ (800c9bc <Count_Jumps+0x200>)
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	701a      	strb	r2, [r3, #0]
	    }
	    if(yRange4jumpsReached == True)
 800c8d4:	4b39      	ldr	r3, [pc, #228]	@ (800c9bc <Count_Jumps+0x200>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d105      	bne.n	800c8e8 <Count_Jumps+0x12c>
	    {
	        counter4valuesInRangeJumps ++;
 800c8dc:	4b38      	ldr	r3, [pc, #224]	@ (800c9c0 <Count_Jumps+0x204>)
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	4b36      	ldr	r3, [pc, #216]	@ (800c9c0 <Count_Jumps+0x204>)
 800c8e6:	701a      	strb	r2, [r3, #0]
	    }
	    if(yRange4jumpsReached == True && accelerationValueY > Y_VALUE_TO_TERMINATE_JUMPS_AND_RUNS_IF_Y_DOWN)
 800c8e8:	4b34      	ldr	r3, [pc, #208]	@ (800c9bc <Count_Jumps+0x200>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d130      	bne.n	800c952 <Count_Jumps+0x196>
 800c8f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8f4:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 800c8f8:	db2b      	blt.n	800c952 <Count_Jumps+0x196>
	    {
	        jumps ++;
 800c8fa:	4b32      	ldr	r3, [pc, #200]	@ (800c9c4 <Count_Jumps+0x208>)
 800c8fc:	881b      	ldrh	r3, [r3, #0]
 800c8fe:	3301      	adds	r3, #1
 800c900:	b29a      	uxth	r2, r3
 800c902:	4b30      	ldr	r3, [pc, #192]	@ (800c9c4 <Count_Jumps+0x208>)
 800c904:	801a      	strh	r2, [r3, #0]
	        printf("jumps = %d\r\n", jumps);
 800c906:	4b2f      	ldr	r3, [pc, #188]	@ (800c9c4 <Count_Jumps+0x208>)
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	4619      	mov	r1, r3
 800c90c:	482e      	ldr	r0, [pc, #184]	@ (800c9c8 <Count_Jumps+0x20c>)
 800c90e:	f002 fb4b 	bl	800efa8 <iprintf>
	        yRange4jumpsReached = False;
 800c912:	4b2a      	ldr	r3, [pc, #168]	@ (800c9bc <Count_Jumps+0x200>)
 800c914:	2200      	movs	r2, #0
 800c916:	701a      	strb	r2, [r3, #0]
	        yRange4runsReached = False;
 800c918:	4b2c      	ldr	r3, [pc, #176]	@ (800c9cc <Count_Jumps+0x210>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	701a      	strb	r2, [r3, #0]
	        yRange4walkingStepsReached = False;
 800c91e:	4b2c      	ldr	r3, [pc, #176]	@ (800c9d0 <Count_Jumps+0x214>)
 800c920:	2200      	movs	r2, #0
 800c922:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeJumps = 0;
 800c924:	4b26      	ldr	r3, [pc, #152]	@ (800c9c0 <Count_Jumps+0x204>)
 800c926:	2200      	movs	r2, #0
 800c928:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeRuns = 0;
 800c92a:	4b2a      	ldr	r3, [pc, #168]	@ (800c9d4 <Count_Jumps+0x218>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeWalkingSteps = 0;
 800c930:	4b29      	ldr	r3, [pc, #164]	@ (800c9d8 <Count_Jumps+0x21c>)
 800c932:	2200      	movs	r2, #0
 800c934:	701a      	strb	r2, [r3, #0]

	        // Only if function Count_WalkingSteps_And_Squats used
	        xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800c936:	4b29      	ldr	r3, [pc, #164]	@ (800c9dc <Count_Jumps+0x220>)
 800c938:	2200      	movs	r2, #0
 800c93a:	801a      	strh	r2, [r3, #0]
	        xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800c93c:	4b28      	ldr	r3, [pc, #160]	@ (800c9e0 <Count_Jumps+0x224>)
 800c93e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c942:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MAX_IF_X_FORWARD;
 800c944:	4b27      	ldr	r3, [pc, #156]	@ (800c9e4 <Count_Jumps+0x228>)
 800c946:	f64f 42e0 	movw	r2, #64736	@ 0xfce0
 800c94a:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800c94c:	4b26      	ldr	r3, [pc, #152]	@ (800c9e8 <Count_Jumps+0x22c>)
 800c94e:	2200      	movs	r2, #0
 800c950:	801a      	strh	r2, [r3, #0]
	    }
	    if(counter4valuesInRangeJumps > MAX_NUMBER_VALUES_TO_DETECT_JUMPS)
 800c952:	4b1b      	ldr	r3, [pc, #108]	@ (800c9c0 <Count_Jumps+0x204>)
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	2b28      	cmp	r3, #40	@ 0x28
 800c958:	d92b      	bls.n	800c9b2 <Count_Jumps+0x1f6>
	    {
	        jumps ++;
 800c95a:	4b1a      	ldr	r3, [pc, #104]	@ (800c9c4 <Count_Jumps+0x208>)
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	3301      	adds	r3, #1
 800c960:	b29a      	uxth	r2, r3
 800c962:	4b18      	ldr	r3, [pc, #96]	@ (800c9c4 <Count_Jumps+0x208>)
 800c964:	801a      	strh	r2, [r3, #0]
			printf("jumps = %d\r\n", jumps);
 800c966:	4b17      	ldr	r3, [pc, #92]	@ (800c9c4 <Count_Jumps+0x208>)
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	4619      	mov	r1, r3
 800c96c:	4816      	ldr	r0, [pc, #88]	@ (800c9c8 <Count_Jumps+0x20c>)
 800c96e:	f002 fb1b 	bl	800efa8 <iprintf>
	        yRange4jumpsReached = False;
 800c972:	4b12      	ldr	r3, [pc, #72]	@ (800c9bc <Count_Jumps+0x200>)
 800c974:	2200      	movs	r2, #0
 800c976:	701a      	strb	r2, [r3, #0]
	        yRange4runsReached = False;
 800c978:	4b14      	ldr	r3, [pc, #80]	@ (800c9cc <Count_Jumps+0x210>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	701a      	strb	r2, [r3, #0]
	        yRange4walkingStepsReached = False;
 800c97e:	4b14      	ldr	r3, [pc, #80]	@ (800c9d0 <Count_Jumps+0x214>)
 800c980:	2200      	movs	r2, #0
 800c982:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeJumps = 0;
 800c984:	4b0e      	ldr	r3, [pc, #56]	@ (800c9c0 <Count_Jumps+0x204>)
 800c986:	2200      	movs	r2, #0
 800c988:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeRuns = 0;
 800c98a:	4b12      	ldr	r3, [pc, #72]	@ (800c9d4 <Count_Jumps+0x218>)
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
	        counter4valuesInRangeWalkingSteps = 0;
 800c990:	4b11      	ldr	r3, [pc, #68]	@ (800c9d8 <Count_Jumps+0x21c>)
 800c992:	2200      	movs	r2, #0
 800c994:	701a      	strb	r2, [r3, #0]

	        // Only if function Count_WalkingSteps_And_Squats used
	        xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800c996:	4b11      	ldr	r3, [pc, #68]	@ (800c9dc <Count_Jumps+0x220>)
 800c998:	2200      	movs	r2, #0
 800c99a:	801a      	strh	r2, [r3, #0]
	        xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800c99c:	4b10      	ldr	r3, [pc, #64]	@ (800c9e0 <Count_Jumps+0x224>)
 800c99e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c9a2:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MAX_IF_X_FORWARD;
 800c9a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c9e4 <Count_Jumps+0x228>)
 800c9a6:	f64f 42e0 	movw	r2, #64736	@ 0xfce0
 800c9aa:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800c9ac:	4b0e      	ldr	r3, [pc, #56]	@ (800c9e8 <Count_Jumps+0x22c>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	801a      	strh	r2, [r3, #0]
	    }
	}
}
 800c9b2:	bf00      	nop
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	2001b3b8 	.word	0x2001b3b8
 800c9c0:	2001b3bd 	.word	0x2001b3bd
 800c9c4:	2001b3c2 	.word	0x2001b3c2
 800c9c8:	08011d1c 	.word	0x08011d1c
 800c9cc:	2001b3b9 	.word	0x2001b3b9
 800c9d0:	2001b3ba 	.word	0x2001b3ba
 800c9d4:	2001b3be 	.word	0x2001b3be
 800c9d8:	2001b3bf 	.word	0x2001b3bf
 800c9dc:	2001b3ce 	.word	0x2001b3ce
 800c9e0:	2000002e 	.word	0x2000002e
 800c9e4:	20000030 	.word	0x20000030
 800c9e8:	2001b3d0 	.word	0x2001b3d0

0800c9ec <Count_Runs>:

void Count_Runs(int16_t accelerationValueY, uint8_t yAxisOrientation)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	460a      	mov	r2, r1
 800c9f6:	80fb      	strh	r3, [r7, #6]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	717b      	strb	r3, [r7, #5]
    if(yAxisOrientation == yUp)
 800c9fc:	797b      	ldrb	r3, [r7, #5]
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d173      	bne.n	800caea <Count_Runs+0xfe>
    {
        if(accelerationValueY > Y_STARTING_RANGE_VALUE_FOR_RUNS_IF_Y_UP
 800ca02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca06:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	dd07      	ble.n	800ca1e <Count_Runs+0x32>
            && accelerationValueY <= Y_STARTING_RANGE_VALUE_FOR_JUMPS_IF_Y_UP)
 800ca0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca12:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800ca16:	dc02      	bgt.n	800ca1e <Count_Runs+0x32>
        {
            yRange4runsReached = True;
 800ca18:	4b71      	ldr	r3, [pc, #452]	@ (800cbe0 <Count_Runs+0x1f4>)
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	701a      	strb	r2, [r3, #0]
        }
        if(yRange4runsReached == True)
 800ca1e:	4b70      	ldr	r3, [pc, #448]	@ (800cbe0 <Count_Runs+0x1f4>)
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d105      	bne.n	800ca32 <Count_Runs+0x46>
        {
            counter4valuesInRangeRuns ++;
 800ca26:	4b6f      	ldr	r3, [pc, #444]	@ (800cbe4 <Count_Runs+0x1f8>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	4b6d      	ldr	r3, [pc, #436]	@ (800cbe4 <Count_Runs+0x1f8>)
 800ca30:	701a      	strb	r2, [r3, #0]
        }
        if(yRange4runsReached == True && accelerationValueY < Y_VALUE_TO_TERMINATE_RUNS_IF_Y_UP)
 800ca32:	4b6b      	ldr	r3, [pc, #428]	@ (800cbe0 <Count_Runs+0x1f4>)
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d129      	bne.n	800ca8e <Count_Runs+0xa2>
 800ca3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca3e:	2b63      	cmp	r3, #99	@ 0x63
 800ca40:	dc25      	bgt.n	800ca8e <Count_Runs+0xa2>
        {
            runs ++;
 800ca42:	4b69      	ldr	r3, [pc, #420]	@ (800cbe8 <Count_Runs+0x1fc>)
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	3301      	adds	r3, #1
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	4b67      	ldr	r3, [pc, #412]	@ (800cbe8 <Count_Runs+0x1fc>)
 800ca4c:	801a      	strh	r2, [r3, #0]
            printf("runs = %d\r\n", runs);
 800ca4e:	4b66      	ldr	r3, [pc, #408]	@ (800cbe8 <Count_Runs+0x1fc>)
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	4619      	mov	r1, r3
 800ca54:	4865      	ldr	r0, [pc, #404]	@ (800cbec <Count_Runs+0x200>)
 800ca56:	f002 faa7 	bl	800efa8 <iprintf>
            yRange4runsReached = False;
 800ca5a:	4b61      	ldr	r3, [pc, #388]	@ (800cbe0 <Count_Runs+0x1f4>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	701a      	strb	r2, [r3, #0]
            yRange4walkingStepsReached = False;
 800ca60:	4b63      	ldr	r3, [pc, #396]	@ (800cbf0 <Count_Runs+0x204>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeRuns = 0;
 800ca66:	4b5f      	ldr	r3, [pc, #380]	@ (800cbe4 <Count_Runs+0x1f8>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800ca6c:	4b61      	ldr	r3, [pc, #388]	@ (800cbf4 <Count_Runs+0x208>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]

            // Only if function Count_WalkingSteps_And_Squats used
	        xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800ca72:	4b61      	ldr	r3, [pc, #388]	@ (800cbf8 <Count_Runs+0x20c>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	801a      	strh	r2, [r3, #0]
	        xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800ca78:	4b60      	ldr	r3, [pc, #384]	@ (800cbfc <Count_Runs+0x210>)
 800ca7a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ca7e:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MAX_IF_X_FORWARD;
 800ca80:	4b5f      	ldr	r3, [pc, #380]	@ (800cc00 <Count_Runs+0x214>)
 800ca82:	f64f 42e0 	movw	r2, #64736	@ 0xfce0
 800ca86:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800ca88:	4b5e      	ldr	r3, [pc, #376]	@ (800cc04 <Count_Runs+0x218>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	801a      	strh	r2, [r3, #0]
        }
        if(counter4valuesInRangeRuns > MAX_NUMBER_VALUES_TO_DETECT_RUNS && yRange4jumpsReached == False)
 800ca8e:	4b55      	ldr	r3, [pc, #340]	@ (800cbe4 <Count_Runs+0x1f8>)
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b28      	cmp	r3, #40	@ 0x28
 800ca94:	d929      	bls.n	800caea <Count_Runs+0xfe>
 800ca96:	4b5c      	ldr	r3, [pc, #368]	@ (800cc08 <Count_Runs+0x21c>)
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d125      	bne.n	800caea <Count_Runs+0xfe>
        {
            runs ++;
 800ca9e:	4b52      	ldr	r3, [pc, #328]	@ (800cbe8 <Count_Runs+0x1fc>)
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	4b50      	ldr	r3, [pc, #320]	@ (800cbe8 <Count_Runs+0x1fc>)
 800caa8:	801a      	strh	r2, [r3, #0]
			printf("runs = %d\r\n", runs);
 800caaa:	4b4f      	ldr	r3, [pc, #316]	@ (800cbe8 <Count_Runs+0x1fc>)
 800caac:	881b      	ldrh	r3, [r3, #0]
 800caae:	4619      	mov	r1, r3
 800cab0:	484e      	ldr	r0, [pc, #312]	@ (800cbec <Count_Runs+0x200>)
 800cab2:	f002 fa79 	bl	800efa8 <iprintf>
            yRange4runsReached = False;
 800cab6:	4b4a      	ldr	r3, [pc, #296]	@ (800cbe0 <Count_Runs+0x1f4>)
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]
            yRange4walkingStepsReached = False;
 800cabc:	4b4c      	ldr	r3, [pc, #304]	@ (800cbf0 <Count_Runs+0x204>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeRuns = 0;
 800cac2:	4b48      	ldr	r3, [pc, #288]	@ (800cbe4 <Count_Runs+0x1f8>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800cac8:	4b4a      	ldr	r3, [pc, #296]	@ (800cbf4 <Count_Runs+0x208>)
 800caca:	2200      	movs	r2, #0
 800cacc:	701a      	strb	r2, [r3, #0]

            // Only if function Count_WalkingSteps_And_Squats used
	        xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cace:	4b4a      	ldr	r3, [pc, #296]	@ (800cbf8 <Count_Runs+0x20c>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	801a      	strh	r2, [r3, #0]
	        xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800cad4:	4b49      	ldr	r3, [pc, #292]	@ (800cbfc <Count_Runs+0x210>)
 800cad6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800cada:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MAX_IF_X_FORWARD;
 800cadc:	4b48      	ldr	r3, [pc, #288]	@ (800cc00 <Count_Runs+0x214>)
 800cade:	f64f 42e0 	movw	r2, #64736	@ 0xfce0
 800cae2:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800cae4:	4b47      	ldr	r3, [pc, #284]	@ (800cc04 <Count_Runs+0x218>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	801a      	strh	r2, [r3, #0]
        }
    }

    if(yAxisOrientation == yDown)
 800caea:	797b      	ldrb	r3, [r7, #5]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d173      	bne.n	800cbd8 <Count_Runs+0x1ec>
    {
        if(accelerationValueY < Y_STARTING_RANGE_VALUE_FOR_RUNS_IF_Y_DOWN
 800caf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800caf4:	4a45      	ldr	r2, [pc, #276]	@ (800cc0c <Count_Runs+0x220>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	da07      	bge.n	800cb0a <Count_Runs+0x11e>
            && accelerationValueY >= Y_STARTING_RANGE_VALUE_FOR_JUMPS_IF_Y_DOWN)
 800cafa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cafe:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 800cb02:	db02      	blt.n	800cb0a <Count_Runs+0x11e>
        {
            yRange4runsReached = True;
 800cb04:	4b36      	ldr	r3, [pc, #216]	@ (800cbe0 <Count_Runs+0x1f4>)
 800cb06:	2201      	movs	r2, #1
 800cb08:	701a      	strb	r2, [r3, #0]
        }
        if(yRange4runsReached == True)
 800cb0a:	4b35      	ldr	r3, [pc, #212]	@ (800cbe0 <Count_Runs+0x1f4>)
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d105      	bne.n	800cb1e <Count_Runs+0x132>
        {
            counter4valuesInRangeRuns ++;
 800cb12:	4b34      	ldr	r3, [pc, #208]	@ (800cbe4 <Count_Runs+0x1f8>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	3301      	adds	r3, #1
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	4b32      	ldr	r3, [pc, #200]	@ (800cbe4 <Count_Runs+0x1f8>)
 800cb1c:	701a      	strb	r2, [r3, #0]
        }
        if(yRange4runsReached == True && accelerationValueY > Y_VALUE_TO_TERMINATE_JUMPS_AND_RUNS_IF_Y_DOWN)
 800cb1e:	4b30      	ldr	r3, [pc, #192]	@ (800cbe0 <Count_Runs+0x1f4>)
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d12a      	bne.n	800cb7c <Count_Runs+0x190>
 800cb26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb2a:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 800cb2e:	db25      	blt.n	800cb7c <Count_Runs+0x190>
        {
            runs ++;
 800cb30:	4b2d      	ldr	r3, [pc, #180]	@ (800cbe8 <Count_Runs+0x1fc>)
 800cb32:	881b      	ldrh	r3, [r3, #0]
 800cb34:	3301      	adds	r3, #1
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	4b2b      	ldr	r3, [pc, #172]	@ (800cbe8 <Count_Runs+0x1fc>)
 800cb3a:	801a      	strh	r2, [r3, #0]
			printf("runs = %d\r\n", runs);
 800cb3c:	4b2a      	ldr	r3, [pc, #168]	@ (800cbe8 <Count_Runs+0x1fc>)
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	4619      	mov	r1, r3
 800cb42:	482a      	ldr	r0, [pc, #168]	@ (800cbec <Count_Runs+0x200>)
 800cb44:	f002 fa30 	bl	800efa8 <iprintf>
            yRange4runsReached = False;
 800cb48:	4b25      	ldr	r3, [pc, #148]	@ (800cbe0 <Count_Runs+0x1f4>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	701a      	strb	r2, [r3, #0]
            yRange4walkingStepsReached = False;
 800cb4e:	4b28      	ldr	r3, [pc, #160]	@ (800cbf0 <Count_Runs+0x204>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeRuns = 0;
 800cb54:	4b23      	ldr	r3, [pc, #140]	@ (800cbe4 <Count_Runs+0x1f8>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800cb5a:	4b26      	ldr	r3, [pc, #152]	@ (800cbf4 <Count_Runs+0x208>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	701a      	strb	r2, [r3, #0]

            // Only if function Count_WalkingSteps_And_Squats used
	        xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cb60:	4b25      	ldr	r3, [pc, #148]	@ (800cbf8 <Count_Runs+0x20c>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	801a      	strh	r2, [r3, #0]
	        xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800cb66:	4b25      	ldr	r3, [pc, #148]	@ (800cbfc <Count_Runs+0x210>)
 800cb68:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800cb6c:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MAX_IF_X_FORWARD;
 800cb6e:	4b24      	ldr	r3, [pc, #144]	@ (800cc00 <Count_Runs+0x214>)
 800cb70:	f64f 42e0 	movw	r2, #64736	@ 0xfce0
 800cb74:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800cb76:	4b23      	ldr	r3, [pc, #140]	@ (800cc04 <Count_Runs+0x218>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	801a      	strh	r2, [r3, #0]
        }
        if(counter4valuesInRangeRuns > MAX_NUMBER_VALUES_TO_DETECT_RUNS && yRange4jumpsReached == False)
 800cb7c:	4b19      	ldr	r3, [pc, #100]	@ (800cbe4 <Count_Runs+0x1f8>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	2b28      	cmp	r3, #40	@ 0x28
 800cb82:	d929      	bls.n	800cbd8 <Count_Runs+0x1ec>
 800cb84:	4b20      	ldr	r3, [pc, #128]	@ (800cc08 <Count_Runs+0x21c>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d125      	bne.n	800cbd8 <Count_Runs+0x1ec>
        {
            runs ++;
 800cb8c:	4b16      	ldr	r3, [pc, #88]	@ (800cbe8 <Count_Runs+0x1fc>)
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	3301      	adds	r3, #1
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	4b14      	ldr	r3, [pc, #80]	@ (800cbe8 <Count_Runs+0x1fc>)
 800cb96:	801a      	strh	r2, [r3, #0]
			printf("runs = %d\r\n", runs);
 800cb98:	4b13      	ldr	r3, [pc, #76]	@ (800cbe8 <Count_Runs+0x1fc>)
 800cb9a:	881b      	ldrh	r3, [r3, #0]
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	4813      	ldr	r0, [pc, #76]	@ (800cbec <Count_Runs+0x200>)
 800cba0:	f002 fa02 	bl	800efa8 <iprintf>
            yRange4runsReached = False;
 800cba4:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe0 <Count_Runs+0x1f4>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	701a      	strb	r2, [r3, #0]
            yRange4walkingStepsReached = False;
 800cbaa:	4b11      	ldr	r3, [pc, #68]	@ (800cbf0 <Count_Runs+0x204>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeRuns = 0;
 800cbb0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbe4 <Count_Runs+0x1f8>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800cbb6:	4b0f      	ldr	r3, [pc, #60]	@ (800cbf4 <Count_Runs+0x208>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	701a      	strb	r2, [r3, #0]

            // Only if function Count_WalkingSteps_And_Squats used
	        xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cbbc:	4b0e      	ldr	r3, [pc, #56]	@ (800cbf8 <Count_Runs+0x20c>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	801a      	strh	r2, [r3, #0]
	        xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800cbc2:	4b0e      	ldr	r3, [pc, #56]	@ (800cbfc <Count_Runs+0x210>)
 800cbc4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800cbc8:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MAX_IF_X_FORWARD;
 800cbca:	4b0d      	ldr	r3, [pc, #52]	@ (800cc00 <Count_Runs+0x214>)
 800cbcc:	f64f 42e0 	movw	r2, #64736	@ 0xfce0
 800cbd0:	801a      	strh	r2, [r3, #0]
	        xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800cbd2:	4b0c      	ldr	r3, [pc, #48]	@ (800cc04 <Count_Runs+0x218>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	801a      	strh	r2, [r3, #0]
        }
    }
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	2001b3b9 	.word	0x2001b3b9
 800cbe4:	2001b3be 	.word	0x2001b3be
 800cbe8:	2001b3c4 	.word	0x2001b3c4
 800cbec:	08011d2c 	.word	0x08011d2c
 800cbf0:	2001b3ba 	.word	0x2001b3ba
 800cbf4:	2001b3bf 	.word	0x2001b3bf
 800cbf8:	2001b3ce 	.word	0x2001b3ce
 800cbfc:	2000002e 	.word	0x2000002e
 800cc00:	20000030 	.word	0x20000030
 800cc04:	2001b3d0 	.word	0x2001b3d0
 800cc08:	2001b3b8 	.word	0x2001b3b8
 800cc0c:	fffff63c 	.word	0xfffff63c

0800cc10 <Count_WalkingSteps_And_Squats>:
        }
    }
}

void Count_WalkingSteps_And_Squats(int16_t accelerationValueX, int16_t accelerationValueY, uint8_t xyAxisOrientation, uint8_t yAxisOrientation)
{
 800cc10:	b590      	push	{r4, r7, lr}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4604      	mov	r4, r0
 800cc18:	4608      	mov	r0, r1
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4623      	mov	r3, r4
 800cc20:	80fb      	strh	r3, [r7, #6]
 800cc22:	4603      	mov	r3, r0
 800cc24:	80bb      	strh	r3, [r7, #4]
 800cc26:	460b      	mov	r3, r1
 800cc28:	70fb      	strb	r3, [r7, #3]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	70bb      	strb	r3, [r7, #2]
    if(xyAxisOrientation == yUpXForward && yAxisOrientation == yUp)
 800cc2e:	78fb      	ldrb	r3, [r7, #3]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	f040 8087 	bne.w	800cd44 <Count_WalkingSteps_And_Squats+0x134>
 800cc36:	78bb      	ldrb	r3, [r7, #2]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	f040 8083 	bne.w	800cd44 <Count_WalkingSteps_And_Squats+0x134>
    {
        if(accelerationValueY > Y_STARTING_RANGE_VALUE_FOR_WALKINGSTEPS_AND_SQUATS_IF_Y_UP
 800cc3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cc42:	f240 5214 	movw	r2, #1300	@ 0x514
 800cc46:	4293      	cmp	r3, r2
 800cc48:	dd08      	ble.n	800cc5c <Count_WalkingSteps_And_Squats+0x4c>
            && accelerationValueY <= Y_STARTING_RANGE_VALUE_FOR_RUNS_IF_Y_UP)
 800cc4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cc4e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800cc52:	4293      	cmp	r3, r2
 800cc54:	dc02      	bgt.n	800cc5c <Count_WalkingSteps_And_Squats+0x4c>
        {
            yRange4walkingStepsReached = True;
 800cc56:	4b6d      	ldr	r3, [pc, #436]	@ (800ce0c <Count_WalkingSteps_And_Squats+0x1fc>)
 800cc58:	2201      	movs	r2, #1
 800cc5a:	701a      	strb	r2, [r3, #0]
        }
        if(yRange4walkingStepsReached == True)
 800cc5c:	4b6b      	ldr	r3, [pc, #428]	@ (800ce0c <Count_WalkingSteps_And_Squats+0x1fc>)
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d119      	bne.n	800cc98 <Count_WalkingSteps_And_Squats+0x88>
        {
            counter4valuesInRangeWalkingSteps ++;
 800cc64:	4b6a      	ldr	r3, [pc, #424]	@ (800ce10 <Count_WalkingSteps_And_Squats+0x200>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	b2da      	uxtb	r2, r3
 800cc6c:	4b68      	ldr	r3, [pc, #416]	@ (800ce10 <Count_WalkingSteps_And_Squats+0x200>)
 800cc6e:	701a      	strb	r2, [r3, #0]
            if(accelerationValueX < xMinInWalkingStepsAndSquatsIfXForward)
 800cc70:	4b68      	ldr	r3, [pc, #416]	@ (800ce14 <Count_WalkingSteps_And_Squats+0x204>)
 800cc72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	da02      	bge.n	800cc84 <Count_WalkingSteps_And_Squats+0x74>
            {
                xMinInWalkingStepsAndSquatsIfXForward = accelerationValueX;
 800cc7e:	4a65      	ldr	r2, [pc, #404]	@ (800ce14 <Count_WalkingSteps_And_Squats+0x204>)
 800cc80:	88fb      	ldrh	r3, [r7, #6]
 800cc82:	8013      	strh	r3, [r2, #0]
            }
            if(accelerationValueX > xMaxInWalkingStepsAndSquatsIfXForward)
 800cc84:	4b64      	ldr	r3, [pc, #400]	@ (800ce18 <Count_WalkingSteps_And_Squats+0x208>)
 800cc86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	dd02      	ble.n	800cc98 <Count_WalkingSteps_And_Squats+0x88>
            {
                xMaxInWalkingStepsAndSquatsIfXForward = accelerationValueX;
 800cc92:	4a61      	ldr	r2, [pc, #388]	@ (800ce18 <Count_WalkingSteps_And_Squats+0x208>)
 800cc94:	88fb      	ldrh	r3, [r7, #6]
 800cc96:	8013      	strh	r3, [r2, #0]
            }
        }
        if(yRange4walkingStepsReached == True
 800cc98:	4b5c      	ldr	r3, [pc, #368]	@ (800ce0c <Count_WalkingSteps_And_Squats+0x1fc>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d141      	bne.n	800cd24 <Count_WalkingSteps_And_Squats+0x114>
            && accelerationValueY < Y_VALUE_TO_TERMINATE_WALKINGSTEPS_AND_SQUATS_IF_Y_UP
 800cca0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cca4:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800cca8:	da3c      	bge.n	800cd24 <Count_WalkingSteps_And_Squats+0x114>
            && yRange4jumpsReached == False && yRange4runsReached == False)
 800ccaa:	4b5c      	ldr	r3, [pc, #368]	@ (800ce1c <Count_WalkingSteps_And_Squats+0x20c>)
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d138      	bne.n	800cd24 <Count_WalkingSteps_And_Squats+0x114>
 800ccb2:	4b5b      	ldr	r3, [pc, #364]	@ (800ce20 <Count_WalkingSteps_And_Squats+0x210>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d134      	bne.n	800cd24 <Count_WalkingSteps_And_Squats+0x114>
        {
            if(counter4valuesInRangeWalkingSteps > MAX_NUMBER_VALUES_TO_DETECT_WALKINGSTEPS
 800ccba:	4b55      	ldr	r3, [pc, #340]	@ (800ce10 <Count_WalkingSteps_And_Squats+0x200>)
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b19      	cmp	r3, #25
 800ccc0:	d918      	bls.n	800ccf4 <Count_WalkingSteps_And_Squats+0xe4>
                && xMinInWalkingStepsAndSquatsIfXForward > X_MIN_LIMIT_FOR_SQUATS_IF_X_FORWARD
 800ccc2:	4b54      	ldr	r3, [pc, #336]	@ (800ce14 <Count_WalkingSteps_And_Squats+0x204>)
 800ccc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccc8:	f513 7f2f 	cmn.w	r3, #700	@ 0x2bc
 800cccc:	dd12      	ble.n	800ccf4 <Count_WalkingSteps_And_Squats+0xe4>
                && xMaxInWalkingStepsAndSquatsIfXForward < X_MAX_LIMIT_FOR_SQUATS_IF_X_FORWARD)
 800ccce:	4b52      	ldr	r3, [pc, #328]	@ (800ce18 <Count_WalkingSteps_And_Squats+0x208>)
 800ccd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccd4:	f113 0faa 	cmn.w	r3, #170	@ 0xaa
 800ccd8:	da0c      	bge.n	800ccf4 <Count_WalkingSteps_And_Squats+0xe4>
            {
                squats ++;
 800ccda:	4b52      	ldr	r3, [pc, #328]	@ (800ce24 <Count_WalkingSteps_And_Squats+0x214>)
 800ccdc:	881b      	ldrh	r3, [r3, #0]
 800ccde:	3301      	adds	r3, #1
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	4b50      	ldr	r3, [pc, #320]	@ (800ce24 <Count_WalkingSteps_And_Squats+0x214>)
 800cce4:	801a      	strh	r2, [r3, #0]
                printf("squats = %d\r\n", squats);
 800cce6:	4b4f      	ldr	r3, [pc, #316]	@ (800ce24 <Count_WalkingSteps_And_Squats+0x214>)
 800cce8:	881b      	ldrh	r3, [r3, #0]
 800ccea:	4619      	mov	r1, r3
 800ccec:	484e      	ldr	r0, [pc, #312]	@ (800ce28 <Count_WalkingSteps_And_Squats+0x218>)
 800ccee:	f002 f95b 	bl	800efa8 <iprintf>
 800ccf2:	e00b      	b.n	800cd0c <Count_WalkingSteps_And_Squats+0xfc>
            }
            else
            {
                walkingSteps ++;
 800ccf4:	4b4d      	ldr	r3, [pc, #308]	@ (800ce2c <Count_WalkingSteps_And_Squats+0x21c>)
 800ccf6:	881b      	ldrh	r3, [r3, #0]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	4b4b      	ldr	r3, [pc, #300]	@ (800ce2c <Count_WalkingSteps_And_Squats+0x21c>)
 800ccfe:	801a      	strh	r2, [r3, #0]
				printf("walkingSteps = %d\r\n", walkingSteps);
 800cd00:	4b4a      	ldr	r3, [pc, #296]	@ (800ce2c <Count_WalkingSteps_And_Squats+0x21c>)
 800cd02:	881b      	ldrh	r3, [r3, #0]
 800cd04:	4619      	mov	r1, r3
 800cd06:	484a      	ldr	r0, [pc, #296]	@ (800ce30 <Count_WalkingSteps_And_Squats+0x220>)
 800cd08:	f002 f94e 	bl	800efa8 <iprintf>
            }
            yRange4walkingStepsReached = False;
 800cd0c:	4b3f      	ldr	r3, [pc, #252]	@ (800ce0c <Count_WalkingSteps_And_Squats+0x1fc>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800cd12:	4b3f      	ldr	r3, [pc, #252]	@ (800ce10 <Count_WalkingSteps_And_Squats+0x200>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	701a      	strb	r2, [r3, #0]
            xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cd18:	4b3e      	ldr	r3, [pc, #248]	@ (800ce14 <Count_WalkingSteps_And_Squats+0x204>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	801a      	strh	r2, [r3, #0]
            xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cd1e:	4b3e      	ldr	r3, [pc, #248]	@ (800ce18 <Count_WalkingSteps_And_Squats+0x208>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	801a      	strh	r2, [r3, #0]
        }
        if(counter4valuesInRangeWalkingSteps > MAX_NUMBER_VALUES_TO_DETECT_SQUATS)
 800cd24:	4b3a      	ldr	r3, [pc, #232]	@ (800ce10 <Count_WalkingSteps_And_Squats+0x200>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	2b3c      	cmp	r3, #60	@ 0x3c
 800cd2a:	d90b      	bls.n	800cd44 <Count_WalkingSteps_And_Squats+0x134>
        {
            yRange4walkingStepsReached = False;
 800cd2c:	4b37      	ldr	r3, [pc, #220]	@ (800ce0c <Count_WalkingSteps_And_Squats+0x1fc>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800cd32:	4b37      	ldr	r3, [pc, #220]	@ (800ce10 <Count_WalkingSteps_And_Squats+0x200>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	701a      	strb	r2, [r3, #0]
            xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cd38:	4b36      	ldr	r3, [pc, #216]	@ (800ce14 <Count_WalkingSteps_And_Squats+0x204>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	801a      	strh	r2, [r3, #0]
            xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cd3e:	4b36      	ldr	r3, [pc, #216]	@ (800ce18 <Count_WalkingSteps_And_Squats+0x208>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	801a      	strh	r2, [r3, #0]
        }
    }

    if (xyAxisOrientation == yUpXBackward && yAxisOrientation == yUp)
 800cd44:	78fb      	ldrb	r3, [r7, #3]
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	f040 80a2 	bne.w	800ce90 <Count_WalkingSteps_And_Squats+0x280>
 800cd4c:	78bb      	ldrb	r3, [r7, #2]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	f040 809e 	bne.w	800ce90 <Count_WalkingSteps_And_Squats+0x280>
    {
        if(accelerationValueY > Y_STARTING_RANGE_VALUE_FOR_WALKINGSTEPS_AND_SQUATS_IF_Y_UP
 800cd54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cd58:	f240 5214 	movw	r2, #1300	@ 0x514
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	dd08      	ble.n	800cd72 <Count_WalkingSteps_And_Squats+0x162>
            && accelerationValueY <= Y_STARTING_RANGE_VALUE_FOR_RUNS_IF_Y_UP)
 800cd60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cd64:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	dc02      	bgt.n	800cd72 <Count_WalkingSteps_And_Squats+0x162>
        {
            yRange4walkingStepsReached = True;
 800cd6c:	4b27      	ldr	r3, [pc, #156]	@ (800ce0c <Count_WalkingSteps_And_Squats+0x1fc>)
 800cd6e:	2201      	movs	r2, #1
 800cd70:	701a      	strb	r2, [r3, #0]
        }
        if(yRange4walkingStepsReached == True)
 800cd72:	4b26      	ldr	r3, [pc, #152]	@ (800ce0c <Count_WalkingSteps_And_Squats+0x1fc>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d119      	bne.n	800cdae <Count_WalkingSteps_And_Squats+0x19e>
        {
            counter4valuesInRangeWalkingSteps ++;
 800cd7a:	4b25      	ldr	r3, [pc, #148]	@ (800ce10 <Count_WalkingSteps_And_Squats+0x200>)
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	4b23      	ldr	r3, [pc, #140]	@ (800ce10 <Count_WalkingSteps_And_Squats+0x200>)
 800cd84:	701a      	strb	r2, [r3, #0]
            if(accelerationValueX < xMinInWalkingStepsAndSquatsIfXBackward)
 800cd86:	4b2b      	ldr	r3, [pc, #172]	@ (800ce34 <Count_WalkingSteps_And_Squats+0x224>)
 800cd88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	da02      	bge.n	800cd9a <Count_WalkingSteps_And_Squats+0x18a>
            {
                xMinInWalkingStepsAndSquatsIfXBackward = accelerationValueX;
 800cd94:	4a27      	ldr	r2, [pc, #156]	@ (800ce34 <Count_WalkingSteps_And_Squats+0x224>)
 800cd96:	88fb      	ldrh	r3, [r7, #6]
 800cd98:	8013      	strh	r3, [r2, #0]
            }
            if(accelerationValueX > xMaxInWalkingStepsAndSquatsIfXBackward)
 800cd9a:	4b27      	ldr	r3, [pc, #156]	@ (800ce38 <Count_WalkingSteps_And_Squats+0x228>)
 800cd9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cda0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	dd02      	ble.n	800cdae <Count_WalkingSteps_And_Squats+0x19e>
            {
                xMaxInWalkingStepsAndSquatsIfXBackward = accelerationValueX;
 800cda8:	4a23      	ldr	r2, [pc, #140]	@ (800ce38 <Count_WalkingSteps_And_Squats+0x228>)
 800cdaa:	88fb      	ldrh	r3, [r7, #6]
 800cdac:	8013      	strh	r3, [r2, #0]
            }
        }
        if(yRange4walkingStepsReached == True
 800cdae:	4b17      	ldr	r3, [pc, #92]	@ (800ce0c <Count_WalkingSteps_And_Squats+0x1fc>)
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d15b      	bne.n	800ce6e <Count_WalkingSteps_And_Squats+0x25e>
            && accelerationValueY < Y_VALUE_TO_TERMINATE_WALKINGSTEPS_AND_SQUATS_IF_Y_UP
 800cdb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cdba:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800cdbe:	da56      	bge.n	800ce6e <Count_WalkingSteps_And_Squats+0x25e>
            && yRange4jumpsReached == False && yRange4runsReached == False)
 800cdc0:	4b16      	ldr	r3, [pc, #88]	@ (800ce1c <Count_WalkingSteps_And_Squats+0x20c>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d152      	bne.n	800ce6e <Count_WalkingSteps_And_Squats+0x25e>
 800cdc8:	4b15      	ldr	r3, [pc, #84]	@ (800ce20 <Count_WalkingSteps_And_Squats+0x210>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d14e      	bne.n	800ce6e <Count_WalkingSteps_And_Squats+0x25e>
        {
            if(counter4valuesInRangeWalkingSteps > MAX_NUMBER_VALUES_TO_DETECT_WALKINGSTEPS
 800cdd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ce10 <Count_WalkingSteps_And_Squats+0x200>)
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b19      	cmp	r3, #25
 800cdd6:	d931      	bls.n	800ce3c <Count_WalkingSteps_And_Squats+0x22c>
                && xMinInWalkingStepsAndSquatsIfXBackward > X_MIN_LIMIT_FOR_SQUATS_IF_X_BACKWARD
 800cdd8:	4b16      	ldr	r3, [pc, #88]	@ (800ce34 <Count_WalkingSteps_And_Squats+0x224>)
 800cdda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdde:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cde2:	dd2b      	ble.n	800ce3c <Count_WalkingSteps_And_Squats+0x22c>
                && xMaxInWalkingStepsAndSquatsIfXBackward < X_MAX_LIMIT_FOR_SQUATS_IF_X_BACKWARD)
 800cde4:	4b14      	ldr	r3, [pc, #80]	@ (800ce38 <Count_WalkingSteps_And_Squats+0x228>)
 800cde6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdea:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800cdee:	da25      	bge.n	800ce3c <Count_WalkingSteps_And_Squats+0x22c>
            {
                squats ++;
 800cdf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ce24 <Count_WalkingSteps_And_Squats+0x214>)
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ce24 <Count_WalkingSteps_And_Squats+0x214>)
 800cdfa:	801a      	strh	r2, [r3, #0]
				printf("squats = %d\r\n", squats);
 800cdfc:	4b09      	ldr	r3, [pc, #36]	@ (800ce24 <Count_WalkingSteps_And_Squats+0x214>)
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	4619      	mov	r1, r3
 800ce02:	4809      	ldr	r0, [pc, #36]	@ (800ce28 <Count_WalkingSteps_And_Squats+0x218>)
 800ce04:	f002 f8d0 	bl	800efa8 <iprintf>
 800ce08:	e024      	b.n	800ce54 <Count_WalkingSteps_And_Squats+0x244>
 800ce0a:	bf00      	nop
 800ce0c:	2001b3ba 	.word	0x2001b3ba
 800ce10:	2001b3bf 	.word	0x2001b3bf
 800ce14:	2001b3ce 	.word	0x2001b3ce
 800ce18:	20000030 	.word	0x20000030
 800ce1c:	2001b3b8 	.word	0x2001b3b8
 800ce20:	2001b3b9 	.word	0x2001b3b9
 800ce24:	2001b3cc 	.word	0x2001b3cc
 800ce28:	08011d4c 	.word	0x08011d4c
 800ce2c:	2001b3c6 	.word	0x2001b3c6
 800ce30:	08011d38 	.word	0x08011d38
 800ce34:	2000002e 	.word	0x2000002e
 800ce38:	2001b3d0 	.word	0x2001b3d0
            }
            else
            {
                walkingSteps ++;
 800ce3c:	4b89      	ldr	r3, [pc, #548]	@ (800d064 <Count_WalkingSteps_And_Squats+0x454>)
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	3301      	adds	r3, #1
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	4b87      	ldr	r3, [pc, #540]	@ (800d064 <Count_WalkingSteps_And_Squats+0x454>)
 800ce46:	801a      	strh	r2, [r3, #0]
				printf("walkingSteps = %d\r\n", walkingSteps);
 800ce48:	4b86      	ldr	r3, [pc, #536]	@ (800d064 <Count_WalkingSteps_And_Squats+0x454>)
 800ce4a:	881b      	ldrh	r3, [r3, #0]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4886      	ldr	r0, [pc, #536]	@ (800d068 <Count_WalkingSteps_And_Squats+0x458>)
 800ce50:	f002 f8aa 	bl	800efa8 <iprintf>
            }
            yRange4walkingStepsReached = False;
 800ce54:	4b85      	ldr	r3, [pc, #532]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800ce5a:	4b85      	ldr	r3, [pc, #532]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	701a      	strb	r2, [r3, #0]
            xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800ce60:	4b84      	ldr	r3, [pc, #528]	@ (800d074 <Count_WalkingSteps_And_Squats+0x464>)
 800ce62:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ce66:	801a      	strh	r2, [r3, #0]
            xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800ce68:	4b83      	ldr	r3, [pc, #524]	@ (800d078 <Count_WalkingSteps_And_Squats+0x468>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	801a      	strh	r2, [r3, #0]
        }
        if(counter4valuesInRangeWalkingSteps > MAX_NUMBER_VALUES_TO_DETECT_SQUATS)
 800ce6e:	4b80      	ldr	r3, [pc, #512]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b3c      	cmp	r3, #60	@ 0x3c
 800ce74:	d90c      	bls.n	800ce90 <Count_WalkingSteps_And_Squats+0x280>
        {
            yRange4walkingStepsReached = False;
 800ce76:	4b7d      	ldr	r3, [pc, #500]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800ce7c:	4b7c      	ldr	r3, [pc, #496]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	701a      	strb	r2, [r3, #0]
            xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800ce82:	4b7c      	ldr	r3, [pc, #496]	@ (800d074 <Count_WalkingSteps_And_Squats+0x464>)
 800ce84:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ce88:	801a      	strh	r2, [r3, #0]
            xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800ce8a:	4b7b      	ldr	r3, [pc, #492]	@ (800d078 <Count_WalkingSteps_And_Squats+0x468>)
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	801a      	strh	r2, [r3, #0]
        }
    }

    if(xyAxisOrientation == yDownXForward && yAxisOrientation == yDown)
 800ce90:	78fb      	ldrb	r3, [r7, #3]
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	f040 8085 	bne.w	800cfa2 <Count_WalkingSteps_And_Squats+0x392>
 800ce98:	78bb      	ldrb	r3, [r7, #2]
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	f040 8081 	bne.w	800cfa2 <Count_WalkingSteps_And_Squats+0x392>
    {
        if(accelerationValueY < Y_STARTING_RANGE_VALUE_FOR_WALKINGSTEPS_AND_SQUATS_IF_Y_DOWN
 800cea0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cea4:	4a75      	ldr	r2, [pc, #468]	@ (800d07c <Count_WalkingSteps_And_Squats+0x46c>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	da07      	bge.n	800ceba <Count_WalkingSteps_And_Squats+0x2aa>
            && accelerationValueY >= Y_STARTING_RANGE_VALUE_FOR_RUNS_IF_Y_DOWN)
 800ceaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ceae:	4a74      	ldr	r2, [pc, #464]	@ (800d080 <Count_WalkingSteps_And_Squats+0x470>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	db02      	blt.n	800ceba <Count_WalkingSteps_And_Squats+0x2aa>
        {
            yRange4walkingStepsReached = True;
 800ceb4:	4b6d      	ldr	r3, [pc, #436]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	701a      	strb	r2, [r3, #0]
        }
        if(yRange4walkingStepsReached == True)
 800ceba:	4b6c      	ldr	r3, [pc, #432]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d119      	bne.n	800cef6 <Count_WalkingSteps_And_Squats+0x2e6>
        {
            counter4valuesInRangeWalkingSteps ++;
 800cec2:	4b6b      	ldr	r3, [pc, #428]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	3301      	adds	r3, #1
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	4b69      	ldr	r3, [pc, #420]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800cecc:	701a      	strb	r2, [r3, #0]
            if(accelerationValueX < xMinInWalkingStepsAndSquatsIfXForward)
 800cece:	4b6d      	ldr	r3, [pc, #436]	@ (800d084 <Count_WalkingSteps_And_Squats+0x474>)
 800ced0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ced4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	da02      	bge.n	800cee2 <Count_WalkingSteps_And_Squats+0x2d2>
            {
                xMinInWalkingStepsAndSquatsIfXForward = accelerationValueX;
 800cedc:	4a69      	ldr	r2, [pc, #420]	@ (800d084 <Count_WalkingSteps_And_Squats+0x474>)
 800cede:	88fb      	ldrh	r3, [r7, #6]
 800cee0:	8013      	strh	r3, [r2, #0]
            }
            if(accelerationValueX > xMaxInWalkingStepsAndSquatsIfXForward)
 800cee2:	4b69      	ldr	r3, [pc, #420]	@ (800d088 <Count_WalkingSteps_And_Squats+0x478>)
 800cee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cee8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	dd02      	ble.n	800cef6 <Count_WalkingSteps_And_Squats+0x2e6>
            {
                xMaxInWalkingStepsAndSquatsIfXForward = accelerationValueX;
 800cef0:	4a65      	ldr	r2, [pc, #404]	@ (800d088 <Count_WalkingSteps_And_Squats+0x478>)
 800cef2:	88fb      	ldrh	r3, [r7, #6]
 800cef4:	8013      	strh	r3, [r2, #0]
            }
        }
        if(yRange4walkingStepsReached == True
 800cef6:	4b5d      	ldr	r3, [pc, #372]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d141      	bne.n	800cf82 <Count_WalkingSteps_And_Squats+0x372>
            && accelerationValueY > Y_VALUE_TO_TERMINATE_WALKINGSTEPS_AND_SQUATS_IF_Y_DOWN
 800cefe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cf02:	f513 7f48 	cmn.w	r3, #800	@ 0x320
 800cf06:	dd3c      	ble.n	800cf82 <Count_WalkingSteps_And_Squats+0x372>
            && yRange4jumpsReached == False && yRange4runsReached == False)
 800cf08:	4b60      	ldr	r3, [pc, #384]	@ (800d08c <Count_WalkingSteps_And_Squats+0x47c>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d138      	bne.n	800cf82 <Count_WalkingSteps_And_Squats+0x372>
 800cf10:	4b5f      	ldr	r3, [pc, #380]	@ (800d090 <Count_WalkingSteps_And_Squats+0x480>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d134      	bne.n	800cf82 <Count_WalkingSteps_And_Squats+0x372>
        {
            if(counter4valuesInRangeWalkingSteps > MAX_NUMBER_VALUES_TO_DETECT_WALKINGSTEPS
 800cf18:	4b55      	ldr	r3, [pc, #340]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	2b19      	cmp	r3, #25
 800cf1e:	d918      	bls.n	800cf52 <Count_WalkingSteps_And_Squats+0x342>
                && xMinInWalkingStepsAndSquatsIfXForward > X_MIN_LIMIT_FOR_SQUATS_IF_X_FORWARD
 800cf20:	4b58      	ldr	r3, [pc, #352]	@ (800d084 <Count_WalkingSteps_And_Squats+0x474>)
 800cf22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf26:	f513 7f2f 	cmn.w	r3, #700	@ 0x2bc
 800cf2a:	dd12      	ble.n	800cf52 <Count_WalkingSteps_And_Squats+0x342>
                && xMaxInWalkingStepsAndSquatsIfXForward < X_MAX_LIMIT_FOR_SQUATS_IF_X_FORWARD)
 800cf2c:	4b56      	ldr	r3, [pc, #344]	@ (800d088 <Count_WalkingSteps_And_Squats+0x478>)
 800cf2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf32:	f113 0faa 	cmn.w	r3, #170	@ 0xaa
 800cf36:	da0c      	bge.n	800cf52 <Count_WalkingSteps_And_Squats+0x342>
            {
                squats ++;
 800cf38:	4b56      	ldr	r3, [pc, #344]	@ (800d094 <Count_WalkingSteps_And_Squats+0x484>)
 800cf3a:	881b      	ldrh	r3, [r3, #0]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	4b54      	ldr	r3, [pc, #336]	@ (800d094 <Count_WalkingSteps_And_Squats+0x484>)
 800cf42:	801a      	strh	r2, [r3, #0]
				printf("squats = %d\r\n", squats);
 800cf44:	4b53      	ldr	r3, [pc, #332]	@ (800d094 <Count_WalkingSteps_And_Squats+0x484>)
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4853      	ldr	r0, [pc, #332]	@ (800d098 <Count_WalkingSteps_And_Squats+0x488>)
 800cf4c:	f002 f82c 	bl	800efa8 <iprintf>
 800cf50:	e00b      	b.n	800cf6a <Count_WalkingSteps_And_Squats+0x35a>
            }
            else
            {
                walkingSteps ++;
 800cf52:	4b44      	ldr	r3, [pc, #272]	@ (800d064 <Count_WalkingSteps_And_Squats+0x454>)
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	3301      	adds	r3, #1
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	4b42      	ldr	r3, [pc, #264]	@ (800d064 <Count_WalkingSteps_And_Squats+0x454>)
 800cf5c:	801a      	strh	r2, [r3, #0]
				printf("walkingSteps = %d\r\n", walkingSteps);
 800cf5e:	4b41      	ldr	r3, [pc, #260]	@ (800d064 <Count_WalkingSteps_And_Squats+0x454>)
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	4619      	mov	r1, r3
 800cf64:	4840      	ldr	r0, [pc, #256]	@ (800d068 <Count_WalkingSteps_And_Squats+0x458>)
 800cf66:	f002 f81f 	bl	800efa8 <iprintf>
            }
            yRange4walkingStepsReached = False;
 800cf6a:	4b40      	ldr	r3, [pc, #256]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800cf70:	4b3f      	ldr	r3, [pc, #252]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	701a      	strb	r2, [r3, #0]
            xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cf76:	4b43      	ldr	r3, [pc, #268]	@ (800d084 <Count_WalkingSteps_And_Squats+0x474>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	801a      	strh	r2, [r3, #0]
            xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cf7c:	4b42      	ldr	r3, [pc, #264]	@ (800d088 <Count_WalkingSteps_And_Squats+0x478>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	801a      	strh	r2, [r3, #0]
        }
        if(counter4valuesInRangeWalkingSteps > MAX_NUMBER_VALUES_TO_DETECT_SQUATS)
 800cf82:	4b3b      	ldr	r3, [pc, #236]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b3c      	cmp	r3, #60	@ 0x3c
 800cf88:	d90b      	bls.n	800cfa2 <Count_WalkingSteps_And_Squats+0x392>
        {
            yRange4walkingStepsReached = False;
 800cf8a:	4b38      	ldr	r3, [pc, #224]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800cf90:	4b37      	ldr	r3, [pc, #220]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	701a      	strb	r2, [r3, #0]
            xMinInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cf96:	4b3b      	ldr	r3, [pc, #236]	@ (800d084 <Count_WalkingSteps_And_Squats+0x474>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	801a      	strh	r2, [r3, #0]
            xMaxInWalkingStepsAndSquatsIfXForward = RESET_VALUE_X_MIN_IF_X_FORWARD;
 800cf9c:	4b3a      	ldr	r3, [pc, #232]	@ (800d088 <Count_WalkingSteps_And_Squats+0x478>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	801a      	strh	r2, [r3, #0]
        }
    }

    if(xyAxisOrientation == yDownXBackward && yAxisOrientation == yDown)
 800cfa2:	78fb      	ldrb	r3, [r7, #3]
 800cfa4:	2b04      	cmp	r3, #4
 800cfa6:	f040 80a3 	bne.w	800d0f0 <Count_WalkingSteps_And_Squats+0x4e0>
 800cfaa:	78bb      	ldrb	r3, [r7, #2]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	f040 809f 	bne.w	800d0f0 <Count_WalkingSteps_And_Squats+0x4e0>
    {
        if(accelerationValueY < Y_STARTING_RANGE_VALUE_FOR_WALKINGSTEPS_AND_SQUATS_IF_Y_DOWN
 800cfb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cfb6:	4a31      	ldr	r2, [pc, #196]	@ (800d07c <Count_WalkingSteps_And_Squats+0x46c>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	da07      	bge.n	800cfcc <Count_WalkingSteps_And_Squats+0x3bc>
            && accelerationValueY >= Y_STARTING_RANGE_VALUE_FOR_RUNS_IF_Y_DOWN)
 800cfbc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cfc0:	4a2f      	ldr	r2, [pc, #188]	@ (800d080 <Count_WalkingSteps_And_Squats+0x470>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	db02      	blt.n	800cfcc <Count_WalkingSteps_And_Squats+0x3bc>
        {
            yRange4walkingStepsReached = True;
 800cfc6:	4b29      	ldr	r3, [pc, #164]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800cfc8:	2201      	movs	r2, #1
 800cfca:	701a      	strb	r2, [r3, #0]
        }
        if(yRange4walkingStepsReached == True)
 800cfcc:	4b27      	ldr	r3, [pc, #156]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d105      	bne.n	800cfe0 <Count_WalkingSteps_And_Squats+0x3d0>
        {
            counter4valuesInRangeWalkingSteps ++;
 800cfd4:	4b26      	ldr	r3, [pc, #152]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	4b24      	ldr	r3, [pc, #144]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800cfde:	701a      	strb	r2, [r3, #0]
        }
            if(accelerationValueX < xMinInWalkingStepsAndSquatsIfXBackward)
 800cfe0:	4b24      	ldr	r3, [pc, #144]	@ (800d074 <Count_WalkingSteps_And_Squats+0x464>)
 800cfe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	da02      	bge.n	800cff4 <Count_WalkingSteps_And_Squats+0x3e4>
            {
                xMinInWalkingStepsAndSquatsIfXBackward = accelerationValueX;
 800cfee:	4a21      	ldr	r2, [pc, #132]	@ (800d074 <Count_WalkingSteps_And_Squats+0x464>)
 800cff0:	88fb      	ldrh	r3, [r7, #6]
 800cff2:	8013      	strh	r3, [r2, #0]
            }
            if(accelerationValueX > xMaxInWalkingStepsAndSquatsIfXBackward)
 800cff4:	4b20      	ldr	r3, [pc, #128]	@ (800d078 <Count_WalkingSteps_And_Squats+0x468>)
 800cff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cffa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cffe:	429a      	cmp	r2, r3
 800d000:	dd02      	ble.n	800d008 <Count_WalkingSteps_And_Squats+0x3f8>
            {
                xMaxInWalkingStepsAndSquatsIfXBackward = accelerationValueX;
 800d002:	4a1d      	ldr	r2, [pc, #116]	@ (800d078 <Count_WalkingSteps_And_Squats+0x468>)
 800d004:	88fb      	ldrh	r3, [r7, #6]
 800d006:	8013      	strh	r3, [r2, #0]
            }
        if(yRange4walkingStepsReached == True
 800d008:	4b18      	ldr	r3, [pc, #96]	@ (800d06c <Count_WalkingSteps_And_Squats+0x45c>)
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d15e      	bne.n	800d0ce <Count_WalkingSteps_And_Squats+0x4be>
            && accelerationValueY > Y_VALUE_TO_TERMINATE_WALKINGSTEPS_AND_SQUATS_IF_Y_DOWN
 800d010:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d014:	f513 7f48 	cmn.w	r3, #800	@ 0x320
 800d018:	dd59      	ble.n	800d0ce <Count_WalkingSteps_And_Squats+0x4be>
            && yRange4jumpsReached == False && yRange4runsReached == False)
 800d01a:	4b1c      	ldr	r3, [pc, #112]	@ (800d08c <Count_WalkingSteps_And_Squats+0x47c>)
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d155      	bne.n	800d0ce <Count_WalkingSteps_And_Squats+0x4be>
 800d022:	4b1b      	ldr	r3, [pc, #108]	@ (800d090 <Count_WalkingSteps_And_Squats+0x480>)
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d151      	bne.n	800d0ce <Count_WalkingSteps_And_Squats+0x4be>
        {
            if(counter4valuesInRangeWalkingSteps > MAX_NUMBER_VALUES_TO_DETECT_WALKINGSTEPS
 800d02a:	4b11      	ldr	r3, [pc, #68]	@ (800d070 <Count_WalkingSteps_And_Squats+0x460>)
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	2b19      	cmp	r3, #25
 800d030:	d934      	bls.n	800d09c <Count_WalkingSteps_And_Squats+0x48c>
                && xMinInWalkingStepsAndSquatsIfXBackward > X_MIN_LIMIT_FOR_SQUATS_IF_X_BACKWARD
 800d032:	4b10      	ldr	r3, [pc, #64]	@ (800d074 <Count_WalkingSteps_And_Squats+0x464>)
 800d034:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d038:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d03c:	dd2e      	ble.n	800d09c <Count_WalkingSteps_And_Squats+0x48c>
                && xMaxInWalkingStepsAndSquatsIfXBackward < X_MAX_LIMIT_FOR_SQUATS_IF_X_BACKWARD)
 800d03e:	4b0e      	ldr	r3, [pc, #56]	@ (800d078 <Count_WalkingSteps_And_Squats+0x468>)
 800d040:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d044:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800d048:	da28      	bge.n	800d09c <Count_WalkingSteps_And_Squats+0x48c>
            {
                squats ++;
 800d04a:	4b12      	ldr	r3, [pc, #72]	@ (800d094 <Count_WalkingSteps_And_Squats+0x484>)
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	3301      	adds	r3, #1
 800d050:	b29a      	uxth	r2, r3
 800d052:	4b10      	ldr	r3, [pc, #64]	@ (800d094 <Count_WalkingSteps_And_Squats+0x484>)
 800d054:	801a      	strh	r2, [r3, #0]
				printf("squats = %d\r\n", squats);
 800d056:	4b0f      	ldr	r3, [pc, #60]	@ (800d094 <Count_WalkingSteps_And_Squats+0x484>)
 800d058:	881b      	ldrh	r3, [r3, #0]
 800d05a:	4619      	mov	r1, r3
 800d05c:	480e      	ldr	r0, [pc, #56]	@ (800d098 <Count_WalkingSteps_And_Squats+0x488>)
 800d05e:	f001 ffa3 	bl	800efa8 <iprintf>
 800d062:	e027      	b.n	800d0b4 <Count_WalkingSteps_And_Squats+0x4a4>
 800d064:	2001b3c6 	.word	0x2001b3c6
 800d068:	08011d38 	.word	0x08011d38
 800d06c:	2001b3ba 	.word	0x2001b3ba
 800d070:	2001b3bf 	.word	0x2001b3bf
 800d074:	2000002e 	.word	0x2000002e
 800d078:	2001b3d0 	.word	0x2001b3d0
 800d07c:	fffffaec 	.word	0xfffffaec
 800d080:	fffff63c 	.word	0xfffff63c
 800d084:	2001b3ce 	.word	0x2001b3ce
 800d088:	20000030 	.word	0x20000030
 800d08c:	2001b3b8 	.word	0x2001b3b8
 800d090:	2001b3b9 	.word	0x2001b3b9
 800d094:	2001b3cc 	.word	0x2001b3cc
 800d098:	08011d4c 	.word	0x08011d4c
            }
            else
            {
                walkingSteps ++;
 800d09c:	4b16      	ldr	r3, [pc, #88]	@ (800d0f8 <Count_WalkingSteps_And_Squats+0x4e8>)
 800d09e:	881b      	ldrh	r3, [r3, #0]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	4b14      	ldr	r3, [pc, #80]	@ (800d0f8 <Count_WalkingSteps_And_Squats+0x4e8>)
 800d0a6:	801a      	strh	r2, [r3, #0]
				printf("walkingSteps = %d\r\n", walkingSteps);
 800d0a8:	4b13      	ldr	r3, [pc, #76]	@ (800d0f8 <Count_WalkingSteps_And_Squats+0x4e8>)
 800d0aa:	881b      	ldrh	r3, [r3, #0]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4813      	ldr	r0, [pc, #76]	@ (800d0fc <Count_WalkingSteps_And_Squats+0x4ec>)
 800d0b0:	f001 ff7a 	bl	800efa8 <iprintf>
            }
            yRange4walkingStepsReached = False;
 800d0b4:	4b12      	ldr	r3, [pc, #72]	@ (800d100 <Count_WalkingSteps_And_Squats+0x4f0>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800d0ba:	4b12      	ldr	r3, [pc, #72]	@ (800d104 <Count_WalkingSteps_And_Squats+0x4f4>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	701a      	strb	r2, [r3, #0]
            xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800d0c0:	4b11      	ldr	r3, [pc, #68]	@ (800d108 <Count_WalkingSteps_And_Squats+0x4f8>)
 800d0c2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d0c6:	801a      	strh	r2, [r3, #0]
            xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800d0c8:	4b10      	ldr	r3, [pc, #64]	@ (800d10c <Count_WalkingSteps_And_Squats+0x4fc>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	801a      	strh	r2, [r3, #0]
        }
        if(counter4valuesInRangeWalkingSteps > MAX_NUMBER_VALUES_TO_DETECT_SQUATS)
 800d0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d104 <Count_WalkingSteps_And_Squats+0x4f4>)
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	2b3c      	cmp	r3, #60	@ 0x3c
 800d0d4:	d90c      	bls.n	800d0f0 <Count_WalkingSteps_And_Squats+0x4e0>
        {
            yRange4walkingStepsReached = False;
 800d0d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d100 <Count_WalkingSteps_And_Squats+0x4f0>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangeWalkingSteps = 0;
 800d0dc:	4b09      	ldr	r3, [pc, #36]	@ (800d104 <Count_WalkingSteps_And_Squats+0x4f4>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	701a      	strb	r2, [r3, #0]
            xMinInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MIN_IF_X_BACKWARD;
 800d0e2:	4b09      	ldr	r3, [pc, #36]	@ (800d108 <Count_WalkingSteps_And_Squats+0x4f8>)
 800d0e4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d0e8:	801a      	strh	r2, [r3, #0]
            xMaxInWalkingStepsAndSquatsIfXBackward = RESET_VALUE_X_MAX_IF_X_BACKWARD;
 800d0ea:	4b08      	ldr	r3, [pc, #32]	@ (800d10c <Count_WalkingSteps_And_Squats+0x4fc>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	801a      	strh	r2, [r3, #0]
        }
    }
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd90      	pop	{r4, r7, pc}
 800d0f8:	2001b3c6 	.word	0x2001b3c6
 800d0fc:	08011d38 	.word	0x08011d38
 800d100:	2001b3ba 	.word	0x2001b3ba
 800d104:	2001b3bf 	.word	0x2001b3bf
 800d108:	2000002e 	.word	0x2000002e
 800d10c:	2001b3d0 	.word	0x2001b3d0

0800d110 <Count_Situps>:

void Count_Situps(int16_t accelerationValueX, int16_t accelerationValueY, uint8_t xyAxisOrientation, uint8_t yAxisOrientation)
{
 800d110:	b590      	push	{r4, r7, lr}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	4604      	mov	r4, r0
 800d118:	4608      	mov	r0, r1
 800d11a:	4611      	mov	r1, r2
 800d11c:	461a      	mov	r2, r3
 800d11e:	4623      	mov	r3, r4
 800d120:	80fb      	strh	r3, [r7, #6]
 800d122:	4603      	mov	r3, r0
 800d124:	80bb      	strh	r3, [r7, #4]
 800d126:	460b      	mov	r3, r1
 800d128:	70fb      	strb	r3, [r7, #3]
 800d12a:	4613      	mov	r3, r2
 800d12c:	70bb      	strb	r3, [r7, #2]
    if(yAxisOrientation == yUndefined)
 800d12e:	78bb      	ldrb	r3, [r7, #2]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d179      	bne.n	800d228 <Count_Situps+0x118>
    {
        if(xyAxisOrientation == yUpXForward)
 800d134:	78fb      	ldrb	r3, [r7, #3]
 800d136:	2b01      	cmp	r3, #1
 800d138:	d10b      	bne.n	800d152 <Count_Situps+0x42>
        {
            if(accelerationValueX > X_STARTING_RANGE_VALUE_FOR_SITUPS_IF_X_FORWARD
 800d13a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d13e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d142:	dd06      	ble.n	800d152 <Count_Situps+0x42>
                && accelerationValueY < Y_LIMIT_FOR_SITUPS_IF_Y_UP)
 800d144:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d148:	2b63      	cmp	r3, #99	@ 0x63
 800d14a:	dc02      	bgt.n	800d152 <Count_Situps+0x42>
            {
                situpStart = True;
 800d14c:	4b38      	ldr	r3, [pc, #224]	@ (800d230 <Count_Situps+0x120>)
 800d14e:	2201      	movs	r2, #1
 800d150:	701a      	strb	r2, [r3, #0]
            }
        }

        if(xyAxisOrientation == yUpXBackward)
 800d152:	78fb      	ldrb	r3, [r7, #3]
 800d154:	2b02      	cmp	r3, #2
 800d156:	d10b      	bne.n	800d170 <Count_Situps+0x60>
        {
            if(accelerationValueX < X_STARTING_RANGE_VALUE_FOR_SITUPS_IF_X_BACKWARD
 800d158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d15c:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d160:	da06      	bge.n	800d170 <Count_Situps+0x60>
                && accelerationValueY < Y_LIMIT_FOR_SITUPS_IF_Y_UP)
 800d162:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d166:	2b63      	cmp	r3, #99	@ 0x63
 800d168:	dc02      	bgt.n	800d170 <Count_Situps+0x60>
            {
                situpStart = True;
 800d16a:	4b31      	ldr	r3, [pc, #196]	@ (800d230 <Count_Situps+0x120>)
 800d16c:	2201      	movs	r2, #1
 800d16e:	701a      	strb	r2, [r3, #0]
            }
        }

        if(xyAxisOrientation == yDownXForward)
 800d170:	78fb      	ldrb	r3, [r7, #3]
 800d172:	2b03      	cmp	r3, #3
 800d174:	d10c      	bne.n	800d190 <Count_Situps+0x80>
        {
            if(accelerationValueX > X_STARTING_RANGE_VALUE_FOR_SITUPS_IF_X_FORWARD
 800d176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d17a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d17e:	dd07      	ble.n	800d190 <Count_Situps+0x80>
                && accelerationValueY > Y_LIMIT_FOR_SITUPS_IF_Y_DOWN)
 800d180:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d184:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 800d188:	db02      	blt.n	800d190 <Count_Situps+0x80>
            {
                situpStart = True;
 800d18a:	4b29      	ldr	r3, [pc, #164]	@ (800d230 <Count_Situps+0x120>)
 800d18c:	2201      	movs	r2, #1
 800d18e:	701a      	strb	r2, [r3, #0]
            }
        }

        if(xyAxisOrientation == yDownXBackward)
 800d190:	78fb      	ldrb	r3, [r7, #3]
 800d192:	2b04      	cmp	r3, #4
 800d194:	d10c      	bne.n	800d1b0 <Count_Situps+0xa0>
        {
            if(accelerationValueX < X_STARTING_RANGE_VALUE_FOR_SITUPS_IF_X_BACKWARD
 800d196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d19a:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d19e:	da07      	bge.n	800d1b0 <Count_Situps+0xa0>
                && accelerationValueY > Y_LIMIT_FOR_SITUPS_IF_Y_DOWN)
 800d1a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d1a4:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 800d1a8:	db02      	blt.n	800d1b0 <Count_Situps+0xa0>
            {
                situpStart = True;
 800d1aa:	4b21      	ldr	r3, [pc, #132]	@ (800d230 <Count_Situps+0x120>)
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	701a      	strb	r2, [r3, #0]
            }
        }


        if(xyAxisOrientation == yUpXForward || xyAxisOrientation == yDownXForward)
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d002      	beq.n	800d1bc <Count_Situps+0xac>
 800d1b6:	78fb      	ldrb	r3, [r7, #3]
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d117      	bne.n	800d1ec <Count_Situps+0xdc>
        {
            if(situpStart == True
 800d1bc:	4b1c      	ldr	r3, [pc, #112]	@ (800d230 <Count_Situps+0x120>)
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d113      	bne.n	800d1ec <Count_Situps+0xdc>
                && accelerationValueX < X_VALUE_TO_TERMINATE_SITUPS_IF_X_FORWARD)
 800d1c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1c8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d1cc:	da0e      	bge.n	800d1ec <Count_Situps+0xdc>
            {
                situps ++;
 800d1ce:	4b19      	ldr	r3, [pc, #100]	@ (800d234 <Count_Situps+0x124>)
 800d1d0:	881b      	ldrh	r3, [r3, #0]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	b29a      	uxth	r2, r3
 800d1d6:	4b17      	ldr	r3, [pc, #92]	@ (800d234 <Count_Situps+0x124>)
 800d1d8:	801a      	strh	r2, [r3, #0]
                situpStart = False;
 800d1da:	4b15      	ldr	r3, [pc, #84]	@ (800d230 <Count_Situps+0x120>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	701a      	strb	r2, [r3, #0]
				printf("situps = %d\r\n", situps);
 800d1e0:	4b14      	ldr	r3, [pc, #80]	@ (800d234 <Count_Situps+0x124>)
 800d1e2:	881b      	ldrh	r3, [r3, #0]
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	4814      	ldr	r0, [pc, #80]	@ (800d238 <Count_Situps+0x128>)
 800d1e8:	f001 fede 	bl	800efa8 <iprintf>
            }
        }

        if(xyAxisOrientation == yUpXBackward || xyAxisOrientation == yDownXBackward)
 800d1ec:	78fb      	ldrb	r3, [r7, #3]
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d002      	beq.n	800d1f8 <Count_Situps+0xe8>
 800d1f2:	78fb      	ldrb	r3, [r7, #3]
 800d1f4:	2b04      	cmp	r3, #4
 800d1f6:	d117      	bne.n	800d228 <Count_Situps+0x118>
        {
            if(situpStart == True
 800d1f8:	4b0d      	ldr	r3, [pc, #52]	@ (800d230 <Count_Situps+0x120>)
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d113      	bne.n	800d228 <Count_Situps+0x118>
                && accelerationValueX > X_VALUE_TO_TERMINATE_SITUPS_IF_X_BACKWARD)
 800d200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d204:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 800d208:	dd0e      	ble.n	800d228 <Count_Situps+0x118>
            {
                situps ++;
 800d20a:	4b0a      	ldr	r3, [pc, #40]	@ (800d234 <Count_Situps+0x124>)
 800d20c:	881b      	ldrh	r3, [r3, #0]
 800d20e:	3301      	adds	r3, #1
 800d210:	b29a      	uxth	r2, r3
 800d212:	4b08      	ldr	r3, [pc, #32]	@ (800d234 <Count_Situps+0x124>)
 800d214:	801a      	strh	r2, [r3, #0]
                situpStart = False;
 800d216:	4b06      	ldr	r3, [pc, #24]	@ (800d230 <Count_Situps+0x120>)
 800d218:	2200      	movs	r2, #0
 800d21a:	701a      	strb	r2, [r3, #0]
				printf("situps = %d\r\n", situps);
 800d21c:	4b05      	ldr	r3, [pc, #20]	@ (800d234 <Count_Situps+0x124>)
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	4619      	mov	r1, r3
 800d222:	4805      	ldr	r0, [pc, #20]	@ (800d238 <Count_Situps+0x128>)
 800d224:	f001 fec0 	bl	800efa8 <iprintf>
            }
        }
    }
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd90      	pop	{r4, r7, pc}
 800d230:	2001b3bb 	.word	0x2001b3bb
 800d234:	2001b3c8 	.word	0x2001b3c8
 800d238:	08011d5c 	.word	0x08011d5c

0800d23c <Count_Pushups>:

void Count_Pushups(int16_t accelerationValueX, int16_t accelerationValueY, int16_t accelerationValueZ, uint8_t xyAxisOrientation)
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	4604      	mov	r4, r0
 800d244:	4608      	mov	r0, r1
 800d246:	4611      	mov	r1, r2
 800d248:	461a      	mov	r2, r3
 800d24a:	4623      	mov	r3, r4
 800d24c:	80fb      	strh	r3, [r7, #6]
 800d24e:	4603      	mov	r3, r0
 800d250:	80bb      	strh	r3, [r7, #4]
 800d252:	460b      	mov	r3, r1
 800d254:	807b      	strh	r3, [r7, #2]
 800d256:	4613      	mov	r3, r2
 800d258:	707b      	strb	r3, [r7, #1]
    if(xyAxisOrientation == yUpXForward || xyAxisOrientation == yDownXForward)
 800d25a:	787b      	ldrb	r3, [r7, #1]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d002      	beq.n	800d266 <Count_Pushups+0x2a>
 800d260:	787b      	ldrb	r3, [r7, #1]
 800d262:	2b03      	cmp	r3, #3
 800d264:	d116      	bne.n	800d294 <Count_Pushups+0x58>
    {
        if(accelerationValueX < X_LIMIT_FOR_PUSHUPS_IF_X_FORWARD
 800d266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d26a:	f513 7f2f 	cmn.w	r3, #700	@ 0x2bc
 800d26e:	da11      	bge.n	800d294 <Count_Pushups+0x58>
            && accelerationValueY < Y_LIMIT_FOR_PUSHUPS_IF_Y_UP
 800d270:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d274:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d278:	da0c      	bge.n	800d294 <Count_Pushups+0x58>
            && accelerationValueY > Y_LIMIT_FOR_PUSHUPS_IF_Y_DOWN
 800d27a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d27e:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d282:	dd07      	ble.n	800d294 <Count_Pushups+0x58>
            && accelerationValueZ > Z_LIMIT_FOR_PUSHUPS)
 800d284:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d288:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800d28c:	dd02      	ble.n	800d294 <Count_Pushups+0x58>
        {
            pushupStart = True;
 800d28e:	4b2b      	ldr	r3, [pc, #172]	@ (800d33c <Count_Pushups+0x100>)
 800d290:	2201      	movs	r2, #1
 800d292:	701a      	strb	r2, [r3, #0]
        }
    }

    if(xyAxisOrientation == yUpXBackward || xyAxisOrientation == yDownXBackward)
 800d294:	787b      	ldrb	r3, [r7, #1]
 800d296:	2b02      	cmp	r3, #2
 800d298:	d002      	beq.n	800d2a0 <Count_Pushups+0x64>
 800d29a:	787b      	ldrb	r3, [r7, #1]
 800d29c:	2b04      	cmp	r3, #4
 800d29e:	d116      	bne.n	800d2ce <Count_Pushups+0x92>
    {
        if(accelerationValueX > X_LIMIT_FOR_PUSHUPS_IF_X_BACKWARD
 800d2a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2a4:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800d2a8:	dd11      	ble.n	800d2ce <Count_Pushups+0x92>
            && accelerationValueY < Y_LIMIT_FOR_PUSHUPS_IF_Y_UP
 800d2aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d2ae:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d2b2:	da0c      	bge.n	800d2ce <Count_Pushups+0x92>
            && accelerationValueY > Y_LIMIT_FOR_PUSHUPS_IF_Y_DOWN
 800d2b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d2b8:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d2bc:	dd07      	ble.n	800d2ce <Count_Pushups+0x92>
            && accelerationValueZ > Z_LIMIT_FOR_PUSHUPS)
 800d2be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2c2:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800d2c6:	dd02      	ble.n	800d2ce <Count_Pushups+0x92>
        {
            pushupStart = True;
 800d2c8:	4b1c      	ldr	r3, [pc, #112]	@ (800d33c <Count_Pushups+0x100>)
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	701a      	strb	r2, [r3, #0]
        }
    }

    if(pushupStart == True)
 800d2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800d33c <Count_Pushups+0x100>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d10f      	bne.n	800d2f6 <Count_Pushups+0xba>
    {
        counter4valuesInRangePushups ++;
 800d2d6:	4b1a      	ldr	r3, [pc, #104]	@ (800d340 <Count_Pushups+0x104>)
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	4b18      	ldr	r3, [pc, #96]	@ (800d340 <Count_Pushups+0x104>)
 800d2e0:	701a      	strb	r2, [r3, #0]
        if(counter4valuesInRangePushups > MAX_NUMBER_VALUES_TO_DETECT_PUSHUPS)
 800d2e2:	4b17      	ldr	r3, [pc, #92]	@ (800d340 <Count_Pushups+0x104>)
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2b5a      	cmp	r3, #90	@ 0x5a
 800d2e8:	d905      	bls.n	800d2f6 <Count_Pushups+0xba>
        {
            pushupStart = False;
 800d2ea:	4b14      	ldr	r3, [pc, #80]	@ (800d33c <Count_Pushups+0x100>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	701a      	strb	r2, [r3, #0]
            counter4valuesInRangePushups = 0;
 800d2f0:	4b13      	ldr	r3, [pc, #76]	@ (800d340 <Count_Pushups+0x104>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	701a      	strb	r2, [r3, #0]
        }
    }
    if(pushupStart == True && accelerationValueZ < Z_VALUE_TO_TERMINATE_PUSHUPS)
 800d2f6:	4b11      	ldr	r3, [pc, #68]	@ (800d33c <Count_Pushups+0x100>)
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d11a      	bne.n	800d334 <Count_Pushups+0xf8>
 800d2fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d302:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800d306:	da15      	bge.n	800d334 <Count_Pushups+0xf8>
    {
        if(counter4valuesInRangePushups > MIN_NUMBER_VALUES_TO_DETECT_PUSHUPS)
 800d308:	4b0d      	ldr	r3, [pc, #52]	@ (800d340 <Count_Pushups+0x104>)
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	2b1e      	cmp	r3, #30
 800d30e:	d90b      	bls.n	800d328 <Count_Pushups+0xec>
        {
            pushups ++;
 800d310:	4b0c      	ldr	r3, [pc, #48]	@ (800d344 <Count_Pushups+0x108>)
 800d312:	881b      	ldrh	r3, [r3, #0]
 800d314:	3301      	adds	r3, #1
 800d316:	b29a      	uxth	r2, r3
 800d318:	4b0a      	ldr	r3, [pc, #40]	@ (800d344 <Count_Pushups+0x108>)
 800d31a:	801a      	strh	r2, [r3, #0]
            printf("pushups = %d\r\n", pushups);
 800d31c:	4b09      	ldr	r3, [pc, #36]	@ (800d344 <Count_Pushups+0x108>)
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	4619      	mov	r1, r3
 800d322:	4809      	ldr	r0, [pc, #36]	@ (800d348 <Count_Pushups+0x10c>)
 800d324:	f001 fe40 	bl	800efa8 <iprintf>
        }
        pushupStart = False;
 800d328:	4b04      	ldr	r3, [pc, #16]	@ (800d33c <Count_Pushups+0x100>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	701a      	strb	r2, [r3, #0]
        counter4valuesInRangePushups = 0;
 800d32e:	4b04      	ldr	r3, [pc, #16]	@ (800d340 <Count_Pushups+0x104>)
 800d330:	2200      	movs	r2, #0
 800d332:	701a      	strb	r2, [r3, #0]
    }
}
 800d334:	bf00      	nop
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd90      	pop	{r4, r7, pc}
 800d33c:	2001b3bc 	.word	0x2001b3bc
 800d340:	2001b3c0 	.word	0x2001b3c0
 800d344:	2001b3ca 	.word	0x2001b3ca
 800d348:	08011d6c 	.word	0x08011d6c

0800d34c <Get_Posture>:
    }
}


uint8_t Get_Posture(int16_t meanX, int16_t meanY, int16_t meanZ, uint8_t xyAxisOrientation)
{
 800d34c:	b490      	push	{r4, r7}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	4604      	mov	r4, r0
 800d354:	4608      	mov	r0, r1
 800d356:	4611      	mov	r1, r2
 800d358:	461a      	mov	r2, r3
 800d35a:	4623      	mov	r3, r4
 800d35c:	80fb      	strh	r3, [r7, #6]
 800d35e:	4603      	mov	r3, r0
 800d360:	80bb      	strh	r3, [r7, #4]
 800d362:	460b      	mov	r3, r1
 800d364:	807b      	strh	r3, [r7, #2]
 800d366:	4613      	mov	r3, r2
 800d368:	707b      	strb	r3, [r7, #1]
    if(meanY >= MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP || meanY <= MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN)
 800d36a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d36e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d372:	da04      	bge.n	800d37e <Get_Posture+0x32>
 800d374:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d378:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d37c:	dc01      	bgt.n	800d382 <Get_Posture+0x36>
    {
    	return postureUpright;
 800d37e:	2302      	movs	r3, #2
 800d380:	e113      	b.n	800d5aa <Get_Posture+0x25e>
    }

    if(xyAxisOrientation == xyUndefined)
 800d382:	787b      	ldrb	r3, [r7, #1]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10b      	bne.n	800d3a0 <Get_Posture+0x54>
    {
        if(meanY < MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP && meanY > MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN)
 800d388:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d38c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d390:	da06      	bge.n	800d3a0 <Get_Posture+0x54>
 800d392:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d396:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d39a:	dd01      	ble.n	800d3a0 <Get_Posture+0x54>
        {
        	return postureLying;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e104      	b.n	800d5aa <Get_Posture+0x25e>
        }
    }

    if(xyAxisOrientation == yUpXForward)
 800d3a0:	787b      	ldrb	r3, [r7, #1]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d13d      	bne.n	800d422 <Get_Posture+0xd6>
    {
        if(meanX > MEAN_X_LIMIT_FOR_POSTURES && meanY < MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP && meanZ < MEAN_Z_LIMIT_FOR_POSTURES)
 800d3a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	dd0a      	ble.n	800d3c4 <Get_Posture+0x78>
 800d3ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d3b2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d3b6:	da05      	bge.n	800d3c4 <Get_Posture+0x78>
 800d3b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	da01      	bge.n	800d3c4 <Get_Posture+0x78>
        {
        	return postureLyingOnBack;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e0f2      	b.n	800d5aa <Get_Posture+0x25e>
        }
        if(meanX < MEAN_X_LIMIT_FOR_POSTURES && meanY < MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP && meanZ > MEAN_Z_LIMIT_FOR_POSTURES)
 800d3c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	da0a      	bge.n	800d3e2 <Get_Posture+0x96>
 800d3cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d3d0:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d3d4:	da05      	bge.n	800d3e2 <Get_Posture+0x96>
 800d3d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	dd01      	ble.n	800d3e2 <Get_Posture+0x96>
		{
			return postureLyingOnFront;
 800d3de:	2304      	movs	r3, #4
 800d3e0:	e0e3      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX < MEAN_X_LIMIT_FOR_POSTURES && meanY < MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP && meanZ < MEAN_Z_LIMIT_FOR_POSTURES)
 800d3e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	da0a      	bge.n	800d400 <Get_Posture+0xb4>
 800d3ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d3ee:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d3f2:	da05      	bge.n	800d400 <Get_Posture+0xb4>
 800d3f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	da01      	bge.n	800d400 <Get_Posture+0xb4>
		{
			return postureLyingOnRightSide;
 800d3fc:	2305      	movs	r3, #5
 800d3fe:	e0d4      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX > MEAN_X_LIMIT_FOR_POSTURES && meanY < MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP && meanZ > MEAN_Z_LIMIT_FOR_POSTURES)
 800d400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d404:	2b00      	cmp	r3, #0
 800d406:	dd0a      	ble.n	800d41e <Get_Posture+0xd2>
 800d408:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d40c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d410:	da05      	bge.n	800d41e <Get_Posture+0xd2>
 800d412:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d416:	2b00      	cmp	r3, #0
 800d418:	dd01      	ble.n	800d41e <Get_Posture+0xd2>
		{
			return postureLyingOnLeftSide;
 800d41a:	2306      	movs	r3, #6
 800d41c:	e0c5      	b.n	800d5aa <Get_Posture+0x25e>
		}
        return postureLying;
 800d41e:	2301      	movs	r3, #1
 800d420:	e0c3      	b.n	800d5aa <Get_Posture+0x25e>
    }

    if(xyAxisOrientation == yUpXBackward)
 800d422:	787b      	ldrb	r3, [r7, #1]
 800d424:	2b02      	cmp	r3, #2
 800d426:	d13d      	bne.n	800d4a4 <Get_Posture+0x158>
    {
        if(meanX < MEAN_X_LIMIT_FOR_POSTURES && meanY < MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP && meanZ < MEAN_Z_LIMIT_FOR_POSTURES)
 800d428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	da0a      	bge.n	800d446 <Get_Posture+0xfa>
 800d430:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d434:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d438:	da05      	bge.n	800d446 <Get_Posture+0xfa>
 800d43a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	da01      	bge.n	800d446 <Get_Posture+0xfa>
		{
			return postureLyingOnBack;
 800d442:	2303      	movs	r3, #3
 800d444:	e0b1      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX > MEAN_X_LIMIT_FOR_POSTURES && meanY < MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP && meanZ > MEAN_Z_LIMIT_FOR_POSTURES)
 800d446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	dd0a      	ble.n	800d464 <Get_Posture+0x118>
 800d44e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d452:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d456:	da05      	bge.n	800d464 <Get_Posture+0x118>
 800d458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	dd01      	ble.n	800d464 <Get_Posture+0x118>
		{
			return postureLyingOnFront;
 800d460:	2304      	movs	r3, #4
 800d462:	e0a2      	b.n	800d5aa <Get_Posture+0x25e>
		}

        if(meanX < MEAN_X_LIMIT_FOR_POSTURES && meanY < MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP && meanZ > MEAN_Z_LIMIT_FOR_POSTURES)
 800d464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	da0a      	bge.n	800d482 <Get_Posture+0x136>
 800d46c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d470:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d474:	da05      	bge.n	800d482 <Get_Posture+0x136>
 800d476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	dd01      	ble.n	800d482 <Get_Posture+0x136>
		{
			return postureLyingOnRightSide;
 800d47e:	2305      	movs	r3, #5
 800d480:	e093      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX > MEAN_X_LIMIT_FOR_POSTURES && meanY < MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_UP && meanZ < MEAN_Z_LIMIT_FOR_POSTURES)
 800d482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d486:	2b00      	cmp	r3, #0
 800d488:	dd0a      	ble.n	800d4a0 <Get_Posture+0x154>
 800d48a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d48e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800d492:	da05      	bge.n	800d4a0 <Get_Posture+0x154>
 800d494:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	da01      	bge.n	800d4a0 <Get_Posture+0x154>
		{
			return postureLyingOnLeftSide;
 800d49c:	2306      	movs	r3, #6
 800d49e:	e084      	b.n	800d5aa <Get_Posture+0x25e>
		}
        return postureLying;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e082      	b.n	800d5aa <Get_Posture+0x25e>
    }

    if(xyAxisOrientation == yDownXForward)
 800d4a4:	787b      	ldrb	r3, [r7, #1]
 800d4a6:	2b03      	cmp	r3, #3
 800d4a8:	d13d      	bne.n	800d526 <Get_Posture+0x1da>
    {
        if(meanX > MEAN_X_LIMIT_FOR_POSTURES && meanY > MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN && meanZ < MEAN_Z_LIMIT_FOR_POSTURES)
 800d4aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	dd0a      	ble.n	800d4c8 <Get_Posture+0x17c>
 800d4b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d4b6:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d4ba:	dd05      	ble.n	800d4c8 <Get_Posture+0x17c>
 800d4bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	da01      	bge.n	800d4c8 <Get_Posture+0x17c>
		{
			return postureLyingOnBack;
 800d4c4:	2303      	movs	r3, #3
 800d4c6:	e070      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX < MEAN_X_LIMIT_FOR_POSTURES && meanY > MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN && meanZ > MEAN_Z_LIMIT_FOR_POSTURES)
 800d4c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	da0a      	bge.n	800d4e6 <Get_Posture+0x19a>
 800d4d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d4d4:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d4d8:	dd05      	ble.n	800d4e6 <Get_Posture+0x19a>
 800d4da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	dd01      	ble.n	800d4e6 <Get_Posture+0x19a>
		{
			return postureLyingOnFront;
 800d4e2:	2304      	movs	r3, #4
 800d4e4:	e061      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX > MEAN_X_LIMIT_FOR_POSTURES && meanY > MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN && meanZ > MEAN_Z_LIMIT_FOR_POSTURES)
 800d4e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	dd0a      	ble.n	800d504 <Get_Posture+0x1b8>
 800d4ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d4f2:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d4f6:	dd05      	ble.n	800d504 <Get_Posture+0x1b8>
 800d4f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	dd01      	ble.n	800d504 <Get_Posture+0x1b8>
		{
			return postureLyingOnRightSide;
 800d500:	2305      	movs	r3, #5
 800d502:	e052      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX < MEAN_X_LIMIT_FOR_POSTURES && meanY > MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN && meanZ < MEAN_Z_LIMIT_FOR_POSTURES)
 800d504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	da0a      	bge.n	800d522 <Get_Posture+0x1d6>
 800d50c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d510:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d514:	dd05      	ble.n	800d522 <Get_Posture+0x1d6>
 800d516:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	da01      	bge.n	800d522 <Get_Posture+0x1d6>
		{
			return postureLyingOnLeftSide;
 800d51e:	2306      	movs	r3, #6
 800d520:	e043      	b.n	800d5aa <Get_Posture+0x25e>
		}
        return postureLying;
 800d522:	2301      	movs	r3, #1
 800d524:	e041      	b.n	800d5aa <Get_Posture+0x25e>
    }

    if(xyAxisOrientation == yDownXBackward)
 800d526:	787b      	ldrb	r3, [r7, #1]
 800d528:	2b04      	cmp	r3, #4
 800d52a:	d13d      	bne.n	800d5a8 <Get_Posture+0x25c>
    {
        if(meanX < MEAN_X_LIMIT_FOR_POSTURES && meanY > MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN && meanZ < MEAN_Z_LIMIT_FOR_POSTURES)
 800d52c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d530:	2b00      	cmp	r3, #0
 800d532:	da0a      	bge.n	800d54a <Get_Posture+0x1fe>
 800d534:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d538:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d53c:	dd05      	ble.n	800d54a <Get_Posture+0x1fe>
 800d53e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d542:	2b00      	cmp	r3, #0
 800d544:	da01      	bge.n	800d54a <Get_Posture+0x1fe>
		{
			return postureLyingOnBack;
 800d546:	2303      	movs	r3, #3
 800d548:	e02f      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX > MEAN_X_LIMIT_FOR_POSTURES && meanY > MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN && meanZ > MEAN_Z_LIMIT_FOR_POSTURES)
 800d54a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	dd0a      	ble.n	800d568 <Get_Posture+0x21c>
 800d552:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d556:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d55a:	dd05      	ble.n	800d568 <Get_Posture+0x21c>
 800d55c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d560:	2b00      	cmp	r3, #0
 800d562:	dd01      	ble.n	800d568 <Get_Posture+0x21c>
		{
			return postureLyingOnFront;
 800d564:	2304      	movs	r3, #4
 800d566:	e020      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX > MEAN_X_LIMIT_FOR_POSTURES && meanY > MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN && meanZ < MEAN_Z_LIMIT_FOR_POSTURES)
 800d568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	dd0a      	ble.n	800d586 <Get_Posture+0x23a>
 800d570:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d574:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d578:	dd05      	ble.n	800d586 <Get_Posture+0x23a>
 800d57a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	da01      	bge.n	800d586 <Get_Posture+0x23a>
		{
			return postureLyingOnRightSide;
 800d582:	2305      	movs	r3, #5
 800d584:	e011      	b.n	800d5aa <Get_Posture+0x25e>
		}
        if(meanX < MEAN_X_LIMIT_FOR_POSTURES && meanY > MEAN_Y_LIMIT_FOR_POSTURE_UPRIGHT_Y_DOWN && meanZ > MEAN_Z_LIMIT_FOR_POSTURES)
 800d586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	da0a      	bge.n	800d5a4 <Get_Posture+0x258>
 800d58e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d592:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800d596:	dd05      	ble.n	800d5a4 <Get_Posture+0x258>
 800d598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	dd01      	ble.n	800d5a4 <Get_Posture+0x258>
		{
			return postureLyingOnLeftSide;
 800d5a0:	2306      	movs	r3, #6
 800d5a2:	e002      	b.n	800d5aa <Get_Posture+0x25e>
		}
        return postureLying;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	e000      	b.n	800d5aa <Get_Posture+0x25e>
    }
    return postureUndefined;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bc90      	pop	{r4, r7}
 800d5b2:	4770      	bx	lr

0800d5b4 <Get_Short_Term_Activity_Level>:

uint8_t Get_Short_Term_Activity_Level()
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	af00      	add	r7, sp, #0
	if(maxAbsoluteOverallAcceleration <= 1)
 800d5b8:	4b34      	ldr	r3, [pc, #208]	@ (800d68c <Get_Short_Term_Activity_Level+0xd8>)
 800d5ba:	edd3 7a00 	vldr	s15, [r3]
 800d5be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d5c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ca:	d801      	bhi.n	800d5d0 <Get_Short_Term_Activity_Level+0x1c>
	{
		return activityLevelZero;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	e058      	b.n	800d682 <Get_Short_Term_Activity_Level+0xce>
	}

	if(maxAbsoluteOverallAcceleration > 1 && maxAbsoluteOverallAcceleration <= 3)
 800d5d0:	4b2e      	ldr	r3, [pc, #184]	@ (800d68c <Get_Short_Term_Activity_Level+0xd8>)
 800d5d2:	edd3 7a00 	vldr	s15, [r3]
 800d5d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d5da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e2:	dd0b      	ble.n	800d5fc <Get_Short_Term_Activity_Level+0x48>
 800d5e4:	4b29      	ldr	r3, [pc, #164]	@ (800d68c <Get_Short_Term_Activity_Level+0xd8>)
 800d5e6:	edd3 7a00 	vldr	s15, [r3]
 800d5ea:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800d5ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f6:	d801      	bhi.n	800d5fc <Get_Short_Term_Activity_Level+0x48>
	{
		return activityLevelVeryLow;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e042      	b.n	800d682 <Get_Short_Term_Activity_Level+0xce>
	}

	if(maxAbsoluteOverallAcceleration > 3 && maxAbsoluteOverallAcceleration <= 5)
 800d5fc:	4b23      	ldr	r3, [pc, #140]	@ (800d68c <Get_Short_Term_Activity_Level+0xd8>)
 800d5fe:	edd3 7a00 	vldr	s15, [r3]
 800d602:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800d606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60e:	dd0b      	ble.n	800d628 <Get_Short_Term_Activity_Level+0x74>
 800d610:	4b1e      	ldr	r3, [pc, #120]	@ (800d68c <Get_Short_Term_Activity_Level+0xd8>)
 800d612:	edd3 7a00 	vldr	s15, [r3]
 800d616:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d61a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d622:	d801      	bhi.n	800d628 <Get_Short_Term_Activity_Level+0x74>
	{
		return activityLevelLow;
 800d624:	2302      	movs	r3, #2
 800d626:	e02c      	b.n	800d682 <Get_Short_Term_Activity_Level+0xce>
	}

	if(maxAbsoluteOverallAcceleration > 5 && maxAbsoluteOverallAcceleration <= 10)
 800d628:	4b18      	ldr	r3, [pc, #96]	@ (800d68c <Get_Short_Term_Activity_Level+0xd8>)
 800d62a:	edd3 7a00 	vldr	s15, [r3]
 800d62e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d632:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d63a:	dd0b      	ble.n	800d654 <Get_Short_Term_Activity_Level+0xa0>
 800d63c:	4b13      	ldr	r3, [pc, #76]	@ (800d68c <Get_Short_Term_Activity_Level+0xd8>)
 800d63e:	edd3 7a00 	vldr	s15, [r3]
 800d642:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800d646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64e:	d801      	bhi.n	800d654 <Get_Short_Term_Activity_Level+0xa0>
	{
		return activityLevelMedium;
 800d650:	2303      	movs	r3, #3
 800d652:	e016      	b.n	800d682 <Get_Short_Term_Activity_Level+0xce>
	}

	if(maxAbsoluteOverallAcceleration > 10 && maxAbsoluteOverallAcceleration <= 30)
 800d654:	4b0d      	ldr	r3, [pc, #52]	@ (800d68c <Get_Short_Term_Activity_Level+0xd8>)
 800d656:	edd3 7a00 	vldr	s15, [r3]
 800d65a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800d65e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d666:	dd0b      	ble.n	800d680 <Get_Short_Term_Activity_Level+0xcc>
 800d668:	4b08      	ldr	r3, [pc, #32]	@ (800d68c <Get_Short_Term_Activity_Level+0xd8>)
 800d66a:	edd3 7a00 	vldr	s15, [r3]
 800d66e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800d672:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67a:	d801      	bhi.n	800d680 <Get_Short_Term_Activity_Level+0xcc>
	{
		return activityLevelHigh;
 800d67c:	2304      	movs	r3, #4
 800d67e:	e000      	b.n	800d682 <Get_Short_Term_Activity_Level+0xce>
	}

	// if(maxAbsoluteOverallAcceleration > 30)
	return activityLevelVeryHigh;
 800d680:	2305      	movs	r3, #5
}
 800d682:	4618      	mov	r0, r3
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	2001b39c 	.word	0x2001b39c

0800d690 <Get_Long_Term_Activity_Level>:


uint8_t Get_Long_Term_Activity_Level()
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
	float averageMeanAcceleration = 0.0;
 800d696:	f04f 0300 	mov.w	r3, #0
 800d69a:	607b      	str	r3, [r7, #4]
	averageMeanAcceleration = sumMeanAbsoluteOverallAcceleration / receivedSignalsCounter;
 800d69c:	4b3e      	ldr	r3, [pc, #248]	@ (800d798 <Get_Long_Term_Activity_Level+0x108>)
 800d69e:	edd3 6a00 	vldr	s13, [r3]
 800d6a2:	4b3e      	ldr	r3, [pc, #248]	@ (800d79c <Get_Long_Term_Activity_Level+0x10c>)
 800d6a4:	881b      	ldrh	r3, [r3, #0]
 800d6a6:	ee07 3a90 	vmov	s15, r3
 800d6aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d6ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6b2:	edc7 7a01 	vstr	s15, [r7, #4]

	if(averageMeanAcceleration <= 0.3)
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7f2 ff1e 	bl	80004f8 <__aeabi_f2d>
 800d6bc:	a332      	add	r3, pc, #200	@ (adr r3, 800d788 <Get_Long_Term_Activity_Level+0xf8>)
 800d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c2:	f7f3 f9ed 	bl	8000aa0 <__aeabi_dcmple>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <Get_Long_Term_Activity_Level+0x40>
	{
		return activityLevelZero;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	e056      	b.n	800d77e <Get_Long_Term_Activity_Level+0xee>
	}

	if(averageMeanAcceleration > 0.3 && averageMeanAcceleration <= 0.6)
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7f2 ff11 	bl	80004f8 <__aeabi_f2d>
 800d6d6:	a32c      	add	r3, pc, #176	@ (adr r3, 800d788 <Get_Long_Term_Activity_Level+0xf8>)
 800d6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6dc:	f7f3 f9f4 	bl	8000ac8 <__aeabi_dcmpgt>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00c      	beq.n	800d700 <Get_Long_Term_Activity_Level+0x70>
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7f2 ff06 	bl	80004f8 <__aeabi_f2d>
 800d6ec:	a328      	add	r3, pc, #160	@ (adr r3, 800d790 <Get_Long_Term_Activity_Level+0x100>)
 800d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f2:	f7f3 f9d5 	bl	8000aa0 <__aeabi_dcmple>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d001      	beq.n	800d700 <Get_Long_Term_Activity_Level+0x70>
	{
		return activityLevelVeryLow;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e03e      	b.n	800d77e <Get_Long_Term_Activity_Level+0xee>
	}

	if(averageMeanAcceleration > 0.6 && averageMeanAcceleration <= 1)
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7f2 fef9 	bl	80004f8 <__aeabi_f2d>
 800d706:	a322      	add	r3, pc, #136	@ (adr r3, 800d790 <Get_Long_Term_Activity_Level+0x100>)
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	f7f3 f9dc 	bl	8000ac8 <__aeabi_dcmpgt>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00a      	beq.n	800d72c <Get_Long_Term_Activity_Level+0x9c>
 800d716:	edd7 7a01 	vldr	s15, [r7, #4]
 800d71a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d71e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d726:	d801      	bhi.n	800d72c <Get_Long_Term_Activity_Level+0x9c>
	{
		return activityLevelLow;
 800d728:	2302      	movs	r3, #2
 800d72a:	e028      	b.n	800d77e <Get_Long_Term_Activity_Level+0xee>
	}

	if(averageMeanAcceleration > 1 && averageMeanAcceleration <= 2)
 800d72c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d730:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d734:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73c:	dd0a      	ble.n	800d754 <Get_Long_Term_Activity_Level+0xc4>
 800d73e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d742:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800d746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74e:	d801      	bhi.n	800d754 <Get_Long_Term_Activity_Level+0xc4>
	{
		return activityLevelMedium;
 800d750:	2303      	movs	r3, #3
 800d752:	e014      	b.n	800d77e <Get_Long_Term_Activity_Level+0xee>
	}

	if(averageMeanAcceleration > 2 && averageMeanAcceleration <= 7)
 800d754:	edd7 7a01 	vldr	s15, [r7, #4]
 800d758:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800d75c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d764:	dd0a      	ble.n	800d77c <Get_Long_Term_Activity_Level+0xec>
 800d766:	edd7 7a01 	vldr	s15, [r7, #4]
 800d76a:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800d76e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d776:	d801      	bhi.n	800d77c <Get_Long_Term_Activity_Level+0xec>
	{
		return activityLevelHigh;
 800d778:	2304      	movs	r3, #4
 800d77a:	e000      	b.n	800d77e <Get_Long_Term_Activity_Level+0xee>
	}

	// if(averageMeanAcceleration > 7)
	return activityLevelVeryHigh;
 800d77c:	2305      	movs	r3, #5
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	33333333 	.word	0x33333333
 800d78c:	3fd33333 	.word	0x3fd33333
 800d790:	33333333 	.word	0x33333333
 800d794:	3fe33333 	.word	0x3fe33333
 800d798:	2001b3a0 	.word	0x2001b3a0
 800d79c:	2001ad8a 	.word	0x2001ad8a

0800d7a0 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration>:

void Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration(int16_t meanX, int16_t meanY, int16_t meanZ)
{
 800d7a0:	b5b0      	push	{r4, r5, r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	80fb      	strh	r3, [r7, #6]
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	80bb      	strh	r3, [r7, #4]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	807b      	strh	r3, [r7, #2]
	float absoluteOverallAcceleration = 0.0;
 800d7b2:	f04f 0300 	mov.w	r3, #0
 800d7b6:	60fb      	str	r3, [r7, #12]
	float sumAbsoluteOverallAccelerations = 0.0;
 800d7b8:	f04f 0300 	mov.w	r3, #0
 800d7bc:	617b      	str	r3, [r7, #20]
//	float vectorY = 0.0;
//	float vectorZ = 0.0;
//	float totalVectorLength = 0.0;


	for(uint16_t i = 0; i < ACCELEROMETER_VALUES_PER_SIGNAL; i++)
 800d7be:	2300      	movs	r3, #0
 800d7c0:	827b      	strh	r3, [r7, #18]
 800d7c2:	e08d      	b.n	800d8e0 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x140>
	{
		// Next line is replaced by following 5 lines
		absoluteOverallAcceleration = sqrt(pow(abs(accX[i] - meanX), 2) + pow(abs(accY[i] - meanY), 2) + pow(abs(accZ[i] - meanZ), 2)) * 9.81 / 1000;
 800d7c4:	8a7b      	ldrh	r3, [r7, #18]
 800d7c6:	4a56      	ldr	r2, [pc, #344]	@ (800d920 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x180>)
 800d7c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	bfb8      	it	lt
 800d7d8:	425b      	neglt	r3, r3
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f2 fe7a 	bl	80004d4 <__aeabi_i2d>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	ed9f 1b4a 	vldr	d1, [pc, #296]	@ 800d910 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x170>
 800d7e8:	ec43 2b10 	vmov	d0, r2, r3
 800d7ec:	f002 fab4 	bl	800fd58 <pow>
 800d7f0:	ec55 4b10 	vmov	r4, r5, d0
 800d7f4:	8a7b      	ldrh	r3, [r7, #18]
 800d7f6:	4a4b      	ldr	r2, [pc, #300]	@ (800d924 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x184>)
 800d7f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d802:	1ad3      	subs	r3, r2, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	bfb8      	it	lt
 800d808:	425b      	neglt	r3, r3
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7f2 fe62 	bl	80004d4 <__aeabi_i2d>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 800d910 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x170>
 800d818:	ec43 2b10 	vmov	d0, r2, r3
 800d81c:	f002 fa9c 	bl	800fd58 <pow>
 800d820:	ec53 2b10 	vmov	r2, r3, d0
 800d824:	4620      	mov	r0, r4
 800d826:	4629      	mov	r1, r5
 800d828:	f7f2 fd08 	bl	800023c <__adddf3>
 800d82c:	4602      	mov	r2, r0
 800d82e:	460b      	mov	r3, r1
 800d830:	4614      	mov	r4, r2
 800d832:	461d      	mov	r5, r3
 800d834:	8a7b      	ldrh	r3, [r7, #18]
 800d836:	4a3c      	ldr	r2, [pc, #240]	@ (800d928 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x188>)
 800d838:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d83c:	461a      	mov	r2, r3
 800d83e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d842:	1ad3      	subs	r3, r2, r3
 800d844:	2b00      	cmp	r3, #0
 800d846:	bfb8      	it	lt
 800d848:	425b      	neglt	r3, r3
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7f2 fe42 	bl	80004d4 <__aeabi_i2d>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 800d910 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x170>
 800d858:	ec43 2b10 	vmov	d0, r2, r3
 800d85c:	f002 fa7c 	bl	800fd58 <pow>
 800d860:	ec53 2b10 	vmov	r2, r3, d0
 800d864:	4620      	mov	r0, r4
 800d866:	4629      	mov	r1, r5
 800d868:	f7f2 fce8 	bl	800023c <__adddf3>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	ec43 2b17 	vmov	d7, r2, r3
 800d874:	eeb0 0a47 	vmov.f32	s0, s14
 800d878:	eef0 0a67 	vmov.f32	s1, s15
 800d87c:	f002 fadc 	bl	800fe38 <sqrt>
 800d880:	ec51 0b10 	vmov	r0, r1, d0
 800d884:	a324      	add	r3, pc, #144	@ (adr r3, 800d918 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x178>)
 800d886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88a:	f7f2 fe8d 	bl	80005a8 <__aeabi_dmul>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4610      	mov	r0, r2
 800d894:	4619      	mov	r1, r3
 800d896:	f04f 0200 	mov.w	r2, #0
 800d89a:	4b24      	ldr	r3, [pc, #144]	@ (800d92c <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x18c>)
 800d89c:	f7f2 ffae 	bl	80007fc <__aeabi_ddiv>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	f7f3 f92e 	bl	8000b08 <__aeabi_d2f>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	60fb      	str	r3, [r7, #12]
//		vectorY = abs(accY[i] - meanY);
//		vectorZ = abs(accZ[i] - meanZ);
//		totalVectorLength = sqrt(vectorX * vectorX + vectorY * vectorY + vectorZ * vectorZ);
//		absoluteOverallAcceleration = totalVectorLength * 9.81 / 1000;

		if(maxAbsoluteOverallAcceleration < absoluteOverallAcceleration)
 800d8b0:	4b1f      	ldr	r3, [pc, #124]	@ (800d930 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x190>)
 800d8b2:	edd3 7a00 	vldr	s15, [r3]
 800d8b6:	ed97 7a03 	vldr	s14, [r7, #12]
 800d8ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c2:	dd02      	ble.n	800d8ca <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x12a>
		{
			maxAbsoluteOverallAcceleration = absoluteOverallAcceleration;
 800d8c4:	4a1a      	ldr	r2, [pc, #104]	@ (800d930 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x190>)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6013      	str	r3, [r2, #0]
		}

		sumAbsoluteOverallAccelerations += absoluteOverallAcceleration;
 800d8ca:	ed97 7a05 	vldr	s14, [r7, #20]
 800d8ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8d6:	edc7 7a05 	vstr	s15, [r7, #20]
	for(uint16_t i = 0; i < ACCELEROMETER_VALUES_PER_SIGNAL; i++)
 800d8da:	8a7b      	ldrh	r3, [r7, #18]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	827b      	strh	r3, [r7, #18]
 800d8e0:	8a7b      	ldrh	r3, [r7, #18]
 800d8e2:	2bff      	cmp	r3, #255	@ 0xff
 800d8e4:	f67f af6e 	bls.w	800d7c4 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x24>

	}

	sumMeanAbsoluteOverallAcceleration += (sumAbsoluteOverallAccelerations / ACCELEROMETER_VALUES_PER_SIGNAL);
 800d8e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800d8ec:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800d934 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x194>
 800d8f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d8f4:	4b10      	ldr	r3, [pc, #64]	@ (800d938 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x198>)
 800d8f6:	edd3 7a00 	vldr	s15, [r3]
 800d8fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d938 <Get_maxAbsoluteOverallAcceleration_And_sumMeanAbsoluteOverallAcceleration+0x198>)
 800d900:	edc3 7a00 	vstr	s15, [r3]
}
 800d904:	bf00      	nop
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bdb0      	pop	{r4, r5, r7, pc}
 800d90c:	f3af 8000 	nop.w
 800d910:	00000000 	.word	0x00000000
 800d914:	40000000 	.word	0x40000000
 800d918:	51eb851f 	.word	0x51eb851f
 800d91c:	40239eb8 	.word	0x40239eb8
 800d920:	2001ad90 	.word	0x2001ad90
 800d924:	2001af90 	.word	0x2001af90
 800d928:	2001b190 	.word	0x2001b190
 800d92c:	408f4000 	.word	0x408f4000
 800d930:	2001b39c 	.word	0x2001b39c
 800d934:	43800000 	.word	0x43800000
 800d938:	2001b3a0 	.word	0x2001b3a0

0800d93c <Get_Average_Speed>:

void Get_Average_Speed()
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
	float averageMeanAcceleration = 0.0;
 800d942:	f04f 0300 	mov.w	r3, #0
 800d946:	607b      	str	r3, [r7, #4]
	float transmissionUnitTime = 0.0;
 800d948:	f04f 0300 	mov.w	r3, #0
 800d94c:	603b      	str	r3, [r7, #0]

	averageMeanAcceleration = sumMeanAbsoluteOverallAcceleration / receivedSignalsCounter;
 800d94e:	4b19      	ldr	r3, [pc, #100]	@ (800d9b4 <Get_Average_Speed+0x78>)
 800d950:	edd3 6a00 	vldr	s13, [r3]
 800d954:	4b18      	ldr	r3, [pc, #96]	@ (800d9b8 <Get_Average_Speed+0x7c>)
 800d956:	881b      	ldrh	r3, [r3, #0]
 800d958:	ee07 3a90 	vmov	s15, r3
 800d95c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d964:	edc7 7a01 	vstr	s15, [r7, #4]
	transmissionUnitTime = receivedSignalsCounter * 256 / 50;
 800d968:	4b13      	ldr	r3, [pc, #76]	@ (800d9b8 <Get_Average_Speed+0x7c>)
 800d96a:	881b      	ldrh	r3, [r3, #0]
 800d96c:	021b      	lsls	r3, r3, #8
 800d96e:	4a13      	ldr	r2, [pc, #76]	@ (800d9bc <Get_Average_Speed+0x80>)
 800d970:	fb82 1203 	smull	r1, r2, r2, r3
 800d974:	1112      	asrs	r2, r2, #4
 800d976:	17db      	asrs	r3, r3, #31
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	ee07 3a90 	vmov	s15, r3
 800d97e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d982:	edc7 7a00 	vstr	s15, [r7]
	averageSpeed = (uint32_t) averageMeanAcceleration * transmissionUnitTime;
 800d986:	edd7 7a01 	vldr	s15, [r7, #4]
 800d98a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d98e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d992:	edd7 7a00 	vldr	s15, [r7]
 800d996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d99a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d99e:	ee17 2a90 	vmov	r2, s15
 800d9a2:	4b07      	ldr	r3, [pc, #28]	@ (800d9c0 <Get_Average_Speed+0x84>)
 800d9a4:	601a      	str	r2, [r3, #0]
}
 800d9a6:	bf00      	nop
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	2001b3a0 	.word	0x2001b3a0
 800d9b8:	2001ad8a 	.word	0x2001ad8a
 800d9bc:	51eb851f 	.word	0x51eb851f
 800d9c0:	2001b3a4 	.word	0x2001b3a4

0800d9c4 <Save_Data>:

void Save_Data(uint8_t shortTermActivityLevel, uint8_t longTermActivityLevel) {
 800d9c4:	b590      	push	{r4, r7, lr}
 800d9c6:	b08d      	sub	sp, #52	@ 0x34
 800d9c8:	af02      	add	r7, sp, #8
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	460a      	mov	r2, r1
 800d9ce:	71fb      	strb	r3, [r7, #7]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	71bb      	strb	r3, [r7, #6]
	uint32_t stepCounterRead = 0;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	627b      	str	r3, [r7, #36]	@ 0x24
	RTC_TimeTypeDef rtcTime;
	RTC_DateTypeDef rtcDate;

	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800d9d8:	f107 0310 	add.w	r3, r7, #16
 800d9dc:	2200      	movs	r2, #0
 800d9de:	4619      	mov	r1, r3
 800d9e0:	48b8      	ldr	r0, [pc, #736]	@ (800dcc4 <Save_Data+0x300>)
 800d9e2:	f7fa f93f 	bl	8007c64 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800d9e6:	f107 030c 	add.w	r3, r7, #12
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	48b5      	ldr	r0, [pc, #724]	@ (800dcc4 <Save_Data+0x300>)
 800d9f0:	f7fa fa42 	bl	8007e78 <HAL_RTC_GetDate>

	printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds, 1000* (rtcTime.SecondFraction - rtcTime.SubSeconds) /
 800d9f4:	7c3b      	ldrb	r3, [r7, #16]
	printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
 800d9f6:	4619      	mov	r1, r3
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds, 1000* (rtcTime.SecondFraction - rtcTime.SubSeconds) /
 800d9f8:	7c7b      	ldrb	r3, [r7, #17]
	printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
 800d9fa:	4618      	mov	r0, r3
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds, 1000* (rtcTime.SecondFraction - rtcTime.SubSeconds) /
 800d9fc:	7cbb      	ldrb	r3, [r7, #18]
	printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
 800d9fe:	461c      	mov	r4, r3
			rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds, 1000* (rtcTime.SecondFraction - rtcTime.SubSeconds) /
 800da00:	69ba      	ldr	r2, [r7, #24]
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800da0a:	fb03 f202 	mul.w	r2, r3, r2
			(rtcTime.SecondFraction +1));
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	3301      	adds	r3, #1
	printf("\r\n%d:%d:%d:%lu eigen_activities.c accel counter start time\r\n",
 800da12:	fbb2 f3f3 	udiv	r3, r2, r3
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	4623      	mov	r3, r4
 800da1a:	4602      	mov	r2, r0
 800da1c:	48aa      	ldr	r0, [pc, #680]	@ (800dcc8 <Save_Data+0x304>)
 800da1e:	f001 fac3 	bl	800efa8 <iprintf>
	printf("%d:%d:%d eigen_activities.c accel counter start date\r\n",
			rtcDate.Year, rtcDate.Month, rtcDate.Date);
 800da22:	7bfb      	ldrb	r3, [r7, #15]
	printf("%d:%d:%d eigen_activities.c accel counter start date\r\n",
 800da24:	4619      	mov	r1, r3
			rtcDate.Year, rtcDate.Month, rtcDate.Date);
 800da26:	7b7b      	ldrb	r3, [r7, #13]
	printf("%d:%d:%d eigen_activities.c accel counter start date\r\n",
 800da28:	461a      	mov	r2, r3
			rtcDate.Year, rtcDate.Month, rtcDate.Date);
 800da2a:	7bbb      	ldrb	r3, [r7, #14]
	printf("%d:%d:%d eigen_activities.c accel counter start date\r\n",
 800da2c:	48a7      	ldr	r0, [pc, #668]	@ (800dccc <Save_Data+0x308>)
 800da2e:	f001 fabb 	bl	800efa8 <iprintf>
	printf("Got datetimeEnd. \r\n\r\n");
 800da32:	48a7      	ldr	r0, [pc, #668]	@ (800dcd0 <Save_Data+0x30c>)
 800da34:	f001 fb20 	bl	800f078 <puts>

	datetimeEnd.Year = rtcDate.Year;
 800da38:	7bfa      	ldrb	r2, [r7, #15]
 800da3a:	4ba6      	ldr	r3, [pc, #664]	@ (800dcd4 <Save_Data+0x310>)
 800da3c:	701a      	strb	r2, [r3, #0]
	datetimeEnd.Month = rtcDate.Month;
 800da3e:	7b7a      	ldrb	r2, [r7, #13]
 800da40:	4ba4      	ldr	r3, [pc, #656]	@ (800dcd4 <Save_Data+0x310>)
 800da42:	705a      	strb	r2, [r3, #1]
	datetimeEnd.Date = rtcDate.Date;
 800da44:	7bba      	ldrb	r2, [r7, #14]
 800da46:	4ba3      	ldr	r3, [pc, #652]	@ (800dcd4 <Save_Data+0x310>)
 800da48:	709a      	strb	r2, [r3, #2]
	datetimeEnd.Hours = rtcTime.Hours;
 800da4a:	7c3a      	ldrb	r2, [r7, #16]
 800da4c:	4ba1      	ldr	r3, [pc, #644]	@ (800dcd4 <Save_Data+0x310>)
 800da4e:	70da      	strb	r2, [r3, #3]
	datetimeEnd.Minutes = rtcTime.Minutes;
 800da50:	7c7a      	ldrb	r2, [r7, #17]
 800da52:	4ba0      	ldr	r3, [pc, #640]	@ (800dcd4 <Save_Data+0x310>)
 800da54:	711a      	strb	r2, [r3, #4]
	datetimeEnd.Seconds = rtcTime.Seconds;
 800da56:	7cba      	ldrb	r2, [r7, #18]
 800da58:	4b9e      	ldr	r3, [pc, #632]	@ (800dcd4 <Save_Data+0x310>)
 800da5a:	715a      	strb	r2, [r3, #5]

	stepCounterRead = Read_Step_Counter();
 800da5c:	f7fc fe24 	bl	800a6a8 <Read_Step_Counter>
 800da60:	6278      	str	r0, [r7, #36]	@ 0x24

	savedData[nextIn][0] = datetimeStart.Year;
 800da62:	4b9d      	ldr	r3, [pc, #628]	@ (800dcd8 <Save_Data+0x314>)
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	4619      	mov	r1, r3
 800da68:	4b9c      	ldr	r3, [pc, #624]	@ (800dcdc <Save_Data+0x318>)
 800da6a:	7818      	ldrb	r0, [r3, #0]
 800da6c:	4a9c      	ldr	r2, [pc, #624]	@ (800dce0 <Save_Data+0x31c>)
 800da6e:	460b      	mov	r3, r1
 800da70:	00db      	lsls	r3, r3, #3
 800da72:	440b      	add	r3, r1
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	4413      	add	r3, r2
 800da78:	4602      	mov	r2, r0
 800da7a:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][1] = datetimeStart.Month;
 800da7c:	4b96      	ldr	r3, [pc, #600]	@ (800dcd8 <Save_Data+0x314>)
 800da7e:	881b      	ldrh	r3, [r3, #0]
 800da80:	4619      	mov	r1, r3
 800da82:	4b96      	ldr	r3, [pc, #600]	@ (800dcdc <Save_Data+0x318>)
 800da84:	7858      	ldrb	r0, [r3, #1]
 800da86:	4a96      	ldr	r2, [pc, #600]	@ (800dce0 <Save_Data+0x31c>)
 800da88:	460b      	mov	r3, r1
 800da8a:	00db      	lsls	r3, r3, #3
 800da8c:	440b      	add	r3, r1
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	4413      	add	r3, r2
 800da92:	3301      	adds	r3, #1
 800da94:	4602      	mov	r2, r0
 800da96:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][2] = datetimeStart.Date;
 800da98:	4b8f      	ldr	r3, [pc, #572]	@ (800dcd8 <Save_Data+0x314>)
 800da9a:	881b      	ldrh	r3, [r3, #0]
 800da9c:	4619      	mov	r1, r3
 800da9e:	4b8f      	ldr	r3, [pc, #572]	@ (800dcdc <Save_Data+0x318>)
 800daa0:	7898      	ldrb	r0, [r3, #2]
 800daa2:	4a8f      	ldr	r2, [pc, #572]	@ (800dce0 <Save_Data+0x31c>)
 800daa4:	460b      	mov	r3, r1
 800daa6:	00db      	lsls	r3, r3, #3
 800daa8:	440b      	add	r3, r1
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4413      	add	r3, r2
 800daae:	3302      	adds	r3, #2
 800dab0:	4602      	mov	r2, r0
 800dab2:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][3] = datetimeStart.Hours;
 800dab4:	4b88      	ldr	r3, [pc, #544]	@ (800dcd8 <Save_Data+0x314>)
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	4619      	mov	r1, r3
 800daba:	4b88      	ldr	r3, [pc, #544]	@ (800dcdc <Save_Data+0x318>)
 800dabc:	78d8      	ldrb	r0, [r3, #3]
 800dabe:	4a88      	ldr	r2, [pc, #544]	@ (800dce0 <Save_Data+0x31c>)
 800dac0:	460b      	mov	r3, r1
 800dac2:	00db      	lsls	r3, r3, #3
 800dac4:	440b      	add	r3, r1
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	3303      	adds	r3, #3
 800dacc:	4602      	mov	r2, r0
 800dace:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][4] = datetimeStart.Minutes;
 800dad0:	4b81      	ldr	r3, [pc, #516]	@ (800dcd8 <Save_Data+0x314>)
 800dad2:	881b      	ldrh	r3, [r3, #0]
 800dad4:	4619      	mov	r1, r3
 800dad6:	4b81      	ldr	r3, [pc, #516]	@ (800dcdc <Save_Data+0x318>)
 800dad8:	7918      	ldrb	r0, [r3, #4]
 800dada:	4a81      	ldr	r2, [pc, #516]	@ (800dce0 <Save_Data+0x31c>)
 800dadc:	460b      	mov	r3, r1
 800dade:	00db      	lsls	r3, r3, #3
 800dae0:	440b      	add	r3, r1
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	3304      	adds	r3, #4
 800dae8:	4602      	mov	r2, r0
 800daea:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][5] = datetimeStart.Seconds;
 800daec:	4b7a      	ldr	r3, [pc, #488]	@ (800dcd8 <Save_Data+0x314>)
 800daee:	881b      	ldrh	r3, [r3, #0]
 800daf0:	4619      	mov	r1, r3
 800daf2:	4b7a      	ldr	r3, [pc, #488]	@ (800dcdc <Save_Data+0x318>)
 800daf4:	7958      	ldrb	r0, [r3, #5]
 800daf6:	4a7a      	ldr	r2, [pc, #488]	@ (800dce0 <Save_Data+0x31c>)
 800daf8:	460b      	mov	r3, r1
 800dafa:	00db      	lsls	r3, r3, #3
 800dafc:	440b      	add	r3, r1
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4413      	add	r3, r2
 800db02:	3305      	adds	r3, #5
 800db04:	4602      	mov	r2, r0
 800db06:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][6] = datetimeEnd.Year;
 800db08:	4b73      	ldr	r3, [pc, #460]	@ (800dcd8 <Save_Data+0x314>)
 800db0a:	881b      	ldrh	r3, [r3, #0]
 800db0c:	4619      	mov	r1, r3
 800db0e:	4b71      	ldr	r3, [pc, #452]	@ (800dcd4 <Save_Data+0x310>)
 800db10:	7818      	ldrb	r0, [r3, #0]
 800db12:	4a73      	ldr	r2, [pc, #460]	@ (800dce0 <Save_Data+0x31c>)
 800db14:	460b      	mov	r3, r1
 800db16:	00db      	lsls	r3, r3, #3
 800db18:	440b      	add	r3, r1
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	4413      	add	r3, r2
 800db1e:	3306      	adds	r3, #6
 800db20:	4602      	mov	r2, r0
 800db22:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][7] = datetimeEnd.Month;
 800db24:	4b6c      	ldr	r3, [pc, #432]	@ (800dcd8 <Save_Data+0x314>)
 800db26:	881b      	ldrh	r3, [r3, #0]
 800db28:	4619      	mov	r1, r3
 800db2a:	4b6a      	ldr	r3, [pc, #424]	@ (800dcd4 <Save_Data+0x310>)
 800db2c:	7858      	ldrb	r0, [r3, #1]
 800db2e:	4a6c      	ldr	r2, [pc, #432]	@ (800dce0 <Save_Data+0x31c>)
 800db30:	460b      	mov	r3, r1
 800db32:	00db      	lsls	r3, r3, #3
 800db34:	440b      	add	r3, r1
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4413      	add	r3, r2
 800db3a:	3307      	adds	r3, #7
 800db3c:	4602      	mov	r2, r0
 800db3e:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][8] = datetimeEnd.Date;
 800db40:	4b65      	ldr	r3, [pc, #404]	@ (800dcd8 <Save_Data+0x314>)
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	4619      	mov	r1, r3
 800db46:	4b63      	ldr	r3, [pc, #396]	@ (800dcd4 <Save_Data+0x310>)
 800db48:	7898      	ldrb	r0, [r3, #2]
 800db4a:	4a65      	ldr	r2, [pc, #404]	@ (800dce0 <Save_Data+0x31c>)
 800db4c:	460b      	mov	r3, r1
 800db4e:	00db      	lsls	r3, r3, #3
 800db50:	440b      	add	r3, r1
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	4413      	add	r3, r2
 800db56:	3308      	adds	r3, #8
 800db58:	4602      	mov	r2, r0
 800db5a:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][9] = datetimeEnd.Hours;
 800db5c:	4b5e      	ldr	r3, [pc, #376]	@ (800dcd8 <Save_Data+0x314>)
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	4619      	mov	r1, r3
 800db62:	4b5c      	ldr	r3, [pc, #368]	@ (800dcd4 <Save_Data+0x310>)
 800db64:	78d8      	ldrb	r0, [r3, #3]
 800db66:	4a5e      	ldr	r2, [pc, #376]	@ (800dce0 <Save_Data+0x31c>)
 800db68:	460b      	mov	r3, r1
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	440b      	add	r3, r1
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	4413      	add	r3, r2
 800db72:	3309      	adds	r3, #9
 800db74:	4602      	mov	r2, r0
 800db76:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][10] = datetimeEnd.Minutes;
 800db78:	4b57      	ldr	r3, [pc, #348]	@ (800dcd8 <Save_Data+0x314>)
 800db7a:	881b      	ldrh	r3, [r3, #0]
 800db7c:	4619      	mov	r1, r3
 800db7e:	4b55      	ldr	r3, [pc, #340]	@ (800dcd4 <Save_Data+0x310>)
 800db80:	7918      	ldrb	r0, [r3, #4]
 800db82:	4a57      	ldr	r2, [pc, #348]	@ (800dce0 <Save_Data+0x31c>)
 800db84:	460b      	mov	r3, r1
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	440b      	add	r3, r1
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	4413      	add	r3, r2
 800db8e:	330a      	adds	r3, #10
 800db90:	4602      	mov	r2, r0
 800db92:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][11] = datetimeEnd.Seconds;
 800db94:	4b50      	ldr	r3, [pc, #320]	@ (800dcd8 <Save_Data+0x314>)
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	4619      	mov	r1, r3
 800db9a:	4b4e      	ldr	r3, [pc, #312]	@ (800dcd4 <Save_Data+0x310>)
 800db9c:	7958      	ldrb	r0, [r3, #5]
 800db9e:	4a50      	ldr	r2, [pc, #320]	@ (800dce0 <Save_Data+0x31c>)
 800dba0:	460b      	mov	r3, r1
 800dba2:	00db      	lsls	r3, r3, #3
 800dba4:	440b      	add	r3, r1
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	4413      	add	r3, r2
 800dbaa:	330b      	adds	r3, #11
 800dbac:	4602      	mov	r2, r0
 800dbae:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][12] = postureOld;
 800dbb0:	4b49      	ldr	r3, [pc, #292]	@ (800dcd8 <Save_Data+0x314>)
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	4b4b      	ldr	r3, [pc, #300]	@ (800dce4 <Save_Data+0x320>)
 800dbb8:	7818      	ldrb	r0, [r3, #0]
 800dbba:	4a49      	ldr	r2, [pc, #292]	@ (800dce0 <Save_Data+0x31c>)
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	00db      	lsls	r3, r3, #3
 800dbc0:	440b      	add	r3, r1
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	4413      	add	r3, r2
 800dbc6:	330c      	adds	r3, #12
 800dbc8:	4602      	mov	r2, r0
 800dbca:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][13] = shortTermActivityLevel;
 800dbcc:	4b42      	ldr	r3, [pc, #264]	@ (800dcd8 <Save_Data+0x314>)
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4a43      	ldr	r2, [pc, #268]	@ (800dce0 <Save_Data+0x31c>)
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	00db      	lsls	r3, r3, #3
 800dbd8:	440b      	add	r3, r1
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	4413      	add	r3, r2
 800dbde:	330d      	adds	r3, #13
 800dbe0:	79fa      	ldrb	r2, [r7, #7]
 800dbe2:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][14] = longTermActivityLevel;
 800dbe4:	4b3c      	ldr	r3, [pc, #240]	@ (800dcd8 <Save_Data+0x314>)
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4a3d      	ldr	r2, [pc, #244]	@ (800dce0 <Save_Data+0x31c>)
 800dbec:	460b      	mov	r3, r1
 800dbee:	00db      	lsls	r3, r3, #3
 800dbf0:	440b      	add	r3, r1
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	330e      	adds	r3, #14
 800dbf8:	79ba      	ldrb	r2, [r7, #6]
 800dbfa:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][15] = stepCounterRead >> 24;
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfe:	0e1a      	lsrs	r2, r3, #24
 800dc00:	4b35      	ldr	r3, [pc, #212]	@ (800dcd8 <Save_Data+0x314>)
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	4619      	mov	r1, r3
 800dc06:	b2d0      	uxtb	r0, r2
 800dc08:	4a35      	ldr	r2, [pc, #212]	@ (800dce0 <Save_Data+0x31c>)
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	00db      	lsls	r3, r3, #3
 800dc0e:	440b      	add	r3, r1
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	330f      	adds	r3, #15
 800dc16:	4602      	mov	r2, r0
 800dc18:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][16] = stepCounterRead >> 16;
 800dc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc1c:	0c1a      	lsrs	r2, r3, #16
 800dc1e:	4b2e      	ldr	r3, [pc, #184]	@ (800dcd8 <Save_Data+0x314>)
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	4619      	mov	r1, r3
 800dc24:	b2d0      	uxtb	r0, r2
 800dc26:	4a2e      	ldr	r2, [pc, #184]	@ (800dce0 <Save_Data+0x31c>)
 800dc28:	460b      	mov	r3, r1
 800dc2a:	00db      	lsls	r3, r3, #3
 800dc2c:	440b      	add	r3, r1
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	3310      	adds	r3, #16
 800dc34:	4602      	mov	r2, r0
 800dc36:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][17] = stepCounterRead >> 8;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3a:	0a1a      	lsrs	r2, r3, #8
 800dc3c:	4b26      	ldr	r3, [pc, #152]	@ (800dcd8 <Save_Data+0x314>)
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	4619      	mov	r1, r3
 800dc42:	b2d0      	uxtb	r0, r2
 800dc44:	4a26      	ldr	r2, [pc, #152]	@ (800dce0 <Save_Data+0x31c>)
 800dc46:	460b      	mov	r3, r1
 800dc48:	00db      	lsls	r3, r3, #3
 800dc4a:	440b      	add	r3, r1
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	4413      	add	r3, r2
 800dc50:	3311      	adds	r3, #17
 800dc52:	4602      	mov	r2, r0
 800dc54:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][18] = stepCounterRead;
 800dc56:	4b20      	ldr	r3, [pc, #128]	@ (800dcd8 <Save_Data+0x314>)
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5e:	b2d8      	uxtb	r0, r3
 800dc60:	4a1f      	ldr	r2, [pc, #124]	@ (800dce0 <Save_Data+0x31c>)
 800dc62:	460b      	mov	r3, r1
 800dc64:	00db      	lsls	r3, r3, #3
 800dc66:	440b      	add	r3, r1
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	4413      	add	r3, r2
 800dc6c:	3312      	adds	r3, #18
 800dc6e:	4602      	mov	r2, r0
 800dc70:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][19] = jumps >> 8;
 800dc72:	4b1d      	ldr	r3, [pc, #116]	@ (800dce8 <Save_Data+0x324>)
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	0a1b      	lsrs	r3, r3, #8
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	4b17      	ldr	r3, [pc, #92]	@ (800dcd8 <Save_Data+0x314>)
 800dc7c:	881b      	ldrh	r3, [r3, #0]
 800dc7e:	4619      	mov	r1, r3
 800dc80:	b2d0      	uxtb	r0, r2
 800dc82:	4a17      	ldr	r2, [pc, #92]	@ (800dce0 <Save_Data+0x31c>)
 800dc84:	460b      	mov	r3, r1
 800dc86:	00db      	lsls	r3, r3, #3
 800dc88:	440b      	add	r3, r1
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	4413      	add	r3, r2
 800dc8e:	3313      	adds	r3, #19
 800dc90:	4602      	mov	r2, r0
 800dc92:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][20] = jumps;
 800dc94:	4b14      	ldr	r3, [pc, #80]	@ (800dce8 <Save_Data+0x324>)
 800dc96:	881a      	ldrh	r2, [r3, #0]
 800dc98:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd8 <Save_Data+0x314>)
 800dc9a:	881b      	ldrh	r3, [r3, #0]
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	b2d0      	uxtb	r0, r2
 800dca0:	4a0f      	ldr	r2, [pc, #60]	@ (800dce0 <Save_Data+0x31c>)
 800dca2:	460b      	mov	r3, r1
 800dca4:	00db      	lsls	r3, r3, #3
 800dca6:	440b      	add	r3, r1
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4413      	add	r3, r2
 800dcac:	3314      	adds	r3, #20
 800dcae:	4602      	mov	r2, r0
 800dcb0:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][21] = runs >> 8;
 800dcb2:	4b0e      	ldr	r3, [pc, #56]	@ (800dcec <Save_Data+0x328>)
 800dcb4:	881b      	ldrh	r3, [r3, #0]
 800dcb6:	0a1b      	lsrs	r3, r3, #8
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	4b07      	ldr	r3, [pc, #28]	@ (800dcd8 <Save_Data+0x314>)
 800dcbc:	881b      	ldrh	r3, [r3, #0]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	b2d0      	uxtb	r0, r2
 800dcc2:	e015      	b.n	800dcf0 <Save_Data+0x32c>
 800dcc4:	20000318 	.word	0x20000318
 800dcc8:	08011c1c 	.word	0x08011c1c
 800dccc:	08011c5c 	.word	0x08011c5c
 800dcd0:	08011dbc 	.word	0x08011dbc
 800dcd4:	2001b3b0 	.word	0x2001b3b0
 800dcd8:	2001aa80 	.word	0x2001aa80
 800dcdc:	2001b3a8 	.word	0x2001b3a8
 800dce0:	200004a0 	.word	0x200004a0
 800dce4:	2001ad86 	.word	0x2001ad86
 800dce8:	2001b3c2 	.word	0x2001b3c2
 800dcec:	2001b3c4 	.word	0x2001b3c4
 800dcf0:	4a84      	ldr	r2, [pc, #528]	@ (800df04 <Save_Data+0x540>)
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	00db      	lsls	r3, r3, #3
 800dcf6:	440b      	add	r3, r1
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	4413      	add	r3, r2
 800dcfc:	3315      	adds	r3, #21
 800dcfe:	4602      	mov	r2, r0
 800dd00:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][22] = runs;
 800dd02:	4b81      	ldr	r3, [pc, #516]	@ (800df08 <Save_Data+0x544>)
 800dd04:	881a      	ldrh	r2, [r3, #0]
 800dd06:	4b81      	ldr	r3, [pc, #516]	@ (800df0c <Save_Data+0x548>)
 800dd08:	881b      	ldrh	r3, [r3, #0]
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	b2d0      	uxtb	r0, r2
 800dd0e:	4a7d      	ldr	r2, [pc, #500]	@ (800df04 <Save_Data+0x540>)
 800dd10:	460b      	mov	r3, r1
 800dd12:	00db      	lsls	r3, r3, #3
 800dd14:	440b      	add	r3, r1
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	3316      	adds	r3, #22
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][23] = walkingSteps >> 8;
 800dd20:	4b7b      	ldr	r3, [pc, #492]	@ (800df10 <Save_Data+0x54c>)
 800dd22:	881b      	ldrh	r3, [r3, #0]
 800dd24:	0a1b      	lsrs	r3, r3, #8
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	4b78      	ldr	r3, [pc, #480]	@ (800df0c <Save_Data+0x548>)
 800dd2a:	881b      	ldrh	r3, [r3, #0]
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	b2d0      	uxtb	r0, r2
 800dd30:	4a74      	ldr	r2, [pc, #464]	@ (800df04 <Save_Data+0x540>)
 800dd32:	460b      	mov	r3, r1
 800dd34:	00db      	lsls	r3, r3, #3
 800dd36:	440b      	add	r3, r1
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4413      	add	r3, r2
 800dd3c:	3317      	adds	r3, #23
 800dd3e:	4602      	mov	r2, r0
 800dd40:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][24] = walkingSteps;
 800dd42:	4b73      	ldr	r3, [pc, #460]	@ (800df10 <Save_Data+0x54c>)
 800dd44:	881a      	ldrh	r2, [r3, #0]
 800dd46:	4b71      	ldr	r3, [pc, #452]	@ (800df0c <Save_Data+0x548>)
 800dd48:	881b      	ldrh	r3, [r3, #0]
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	b2d0      	uxtb	r0, r2
 800dd4e:	4a6d      	ldr	r2, [pc, #436]	@ (800df04 <Save_Data+0x540>)
 800dd50:	460b      	mov	r3, r1
 800dd52:	00db      	lsls	r3, r3, #3
 800dd54:	440b      	add	r3, r1
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	3318      	adds	r3, #24
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][25] = situps >> 8;
 800dd60:	4b6c      	ldr	r3, [pc, #432]	@ (800df14 <Save_Data+0x550>)
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	0a1b      	lsrs	r3, r3, #8
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	4b68      	ldr	r3, [pc, #416]	@ (800df0c <Save_Data+0x548>)
 800dd6a:	881b      	ldrh	r3, [r3, #0]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	b2d0      	uxtb	r0, r2
 800dd70:	4a64      	ldr	r2, [pc, #400]	@ (800df04 <Save_Data+0x540>)
 800dd72:	460b      	mov	r3, r1
 800dd74:	00db      	lsls	r3, r3, #3
 800dd76:	440b      	add	r3, r1
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	4413      	add	r3, r2
 800dd7c:	3319      	adds	r3, #25
 800dd7e:	4602      	mov	r2, r0
 800dd80:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][26] = situps;
 800dd82:	4b64      	ldr	r3, [pc, #400]	@ (800df14 <Save_Data+0x550>)
 800dd84:	881a      	ldrh	r2, [r3, #0]
 800dd86:	4b61      	ldr	r3, [pc, #388]	@ (800df0c <Save_Data+0x548>)
 800dd88:	881b      	ldrh	r3, [r3, #0]
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	b2d0      	uxtb	r0, r2
 800dd8e:	4a5d      	ldr	r2, [pc, #372]	@ (800df04 <Save_Data+0x540>)
 800dd90:	460b      	mov	r3, r1
 800dd92:	00db      	lsls	r3, r3, #3
 800dd94:	440b      	add	r3, r1
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	331a      	adds	r3, #26
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][27] = squats >> 8;
 800dda0:	4b5d      	ldr	r3, [pc, #372]	@ (800df18 <Save_Data+0x554>)
 800dda2:	881b      	ldrh	r3, [r3, #0]
 800dda4:	0a1b      	lsrs	r3, r3, #8
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	4b58      	ldr	r3, [pc, #352]	@ (800df0c <Save_Data+0x548>)
 800ddaa:	881b      	ldrh	r3, [r3, #0]
 800ddac:	4619      	mov	r1, r3
 800ddae:	b2d0      	uxtb	r0, r2
 800ddb0:	4a54      	ldr	r2, [pc, #336]	@ (800df04 <Save_Data+0x540>)
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	00db      	lsls	r3, r3, #3
 800ddb6:	440b      	add	r3, r1
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	331b      	adds	r3, #27
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][28] = squats;
 800ddc2:	4b55      	ldr	r3, [pc, #340]	@ (800df18 <Save_Data+0x554>)
 800ddc4:	881a      	ldrh	r2, [r3, #0]
 800ddc6:	4b51      	ldr	r3, [pc, #324]	@ (800df0c <Save_Data+0x548>)
 800ddc8:	881b      	ldrh	r3, [r3, #0]
 800ddca:	4619      	mov	r1, r3
 800ddcc:	b2d0      	uxtb	r0, r2
 800ddce:	4a4d      	ldr	r2, [pc, #308]	@ (800df04 <Save_Data+0x540>)
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	00db      	lsls	r3, r3, #3
 800ddd4:	440b      	add	r3, r1
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	4413      	add	r3, r2
 800ddda:	331c      	adds	r3, #28
 800dddc:	4602      	mov	r2, r0
 800ddde:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][29] = pushups >> 8;
 800dde0:	4b4e      	ldr	r3, [pc, #312]	@ (800df1c <Save_Data+0x558>)
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	0a1b      	lsrs	r3, r3, #8
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	4b48      	ldr	r3, [pc, #288]	@ (800df0c <Save_Data+0x548>)
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	4619      	mov	r1, r3
 800ddee:	b2d0      	uxtb	r0, r2
 800ddf0:	4a44      	ldr	r2, [pc, #272]	@ (800df04 <Save_Data+0x540>)
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	00db      	lsls	r3, r3, #3
 800ddf6:	440b      	add	r3, r1
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4413      	add	r3, r2
 800ddfc:	331d      	adds	r3, #29
 800ddfe:	4602      	mov	r2, r0
 800de00:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][30] = pushups;
 800de02:	4b46      	ldr	r3, [pc, #280]	@ (800df1c <Save_Data+0x558>)
 800de04:	881a      	ldrh	r2, [r3, #0]
 800de06:	4b41      	ldr	r3, [pc, #260]	@ (800df0c <Save_Data+0x548>)
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	4619      	mov	r1, r3
 800de0c:	b2d0      	uxtb	r0, r2
 800de0e:	4a3d      	ldr	r2, [pc, #244]	@ (800df04 <Save_Data+0x540>)
 800de10:	460b      	mov	r3, r1
 800de12:	00db      	lsls	r3, r3, #3
 800de14:	440b      	add	r3, r1
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4413      	add	r3, r2
 800de1a:	331e      	adds	r3, #30
 800de1c:	4602      	mov	r2, r0
 800de1e:	701a      	strb	r2, [r3, #0]

	savedData[nextIn][31] = averageSpeed >> 24;
 800de20:	4b3f      	ldr	r3, [pc, #252]	@ (800df20 <Save_Data+0x55c>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	0e1a      	lsrs	r2, r3, #24
 800de26:	4b39      	ldr	r3, [pc, #228]	@ (800df0c <Save_Data+0x548>)
 800de28:	881b      	ldrh	r3, [r3, #0]
 800de2a:	4619      	mov	r1, r3
 800de2c:	b2d0      	uxtb	r0, r2
 800de2e:	4a35      	ldr	r2, [pc, #212]	@ (800df04 <Save_Data+0x540>)
 800de30:	460b      	mov	r3, r1
 800de32:	00db      	lsls	r3, r3, #3
 800de34:	440b      	add	r3, r1
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4413      	add	r3, r2
 800de3a:	331f      	adds	r3, #31
 800de3c:	4602      	mov	r2, r0
 800de3e:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][32] = averageSpeed >> 16;
 800de40:	4b37      	ldr	r3, [pc, #220]	@ (800df20 <Save_Data+0x55c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	0c1a      	lsrs	r2, r3, #16
 800de46:	4b31      	ldr	r3, [pc, #196]	@ (800df0c <Save_Data+0x548>)
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	4619      	mov	r1, r3
 800de4c:	b2d0      	uxtb	r0, r2
 800de4e:	4a2d      	ldr	r2, [pc, #180]	@ (800df04 <Save_Data+0x540>)
 800de50:	460b      	mov	r3, r1
 800de52:	00db      	lsls	r3, r3, #3
 800de54:	440b      	add	r3, r1
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	3320      	adds	r3, #32
 800de5c:	4602      	mov	r2, r0
 800de5e:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][33] = averageSpeed >> 8;
 800de60:	4b2f      	ldr	r3, [pc, #188]	@ (800df20 <Save_Data+0x55c>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	0a1a      	lsrs	r2, r3, #8
 800de66:	4b29      	ldr	r3, [pc, #164]	@ (800df0c <Save_Data+0x548>)
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	4619      	mov	r1, r3
 800de6c:	b2d0      	uxtb	r0, r2
 800de6e:	4a25      	ldr	r2, [pc, #148]	@ (800df04 <Save_Data+0x540>)
 800de70:	460b      	mov	r3, r1
 800de72:	00db      	lsls	r3, r3, #3
 800de74:	440b      	add	r3, r1
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	4413      	add	r3, r2
 800de7a:	3321      	adds	r3, #33	@ 0x21
 800de7c:	4602      	mov	r2, r0
 800de7e:	701a      	strb	r2, [r3, #0]
	savedData[nextIn][34] = averageSpeed;
 800de80:	4b27      	ldr	r3, [pc, #156]	@ (800df20 <Save_Data+0x55c>)
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	4b21      	ldr	r3, [pc, #132]	@ (800df0c <Save_Data+0x548>)
 800de86:	881b      	ldrh	r3, [r3, #0]
 800de88:	4619      	mov	r1, r3
 800de8a:	b2d0      	uxtb	r0, r2
 800de8c:	4a1d      	ldr	r2, [pc, #116]	@ (800df04 <Save_Data+0x540>)
 800de8e:	460b      	mov	r3, r1
 800de90:	00db      	lsls	r3, r3, #3
 800de92:	440b      	add	r3, r1
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	3322      	adds	r3, #34	@ 0x22
 800de9a:	4602      	mov	r2, r0
 800de9c:	701a      	strb	r2, [r3, #0]

	jumps = 0;
 800de9e:	4b21      	ldr	r3, [pc, #132]	@ (800df24 <Save_Data+0x560>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	801a      	strh	r2, [r3, #0]
	runs = 0;
 800dea4:	4b18      	ldr	r3, [pc, #96]	@ (800df08 <Save_Data+0x544>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	801a      	strh	r2, [r3, #0]
	walkingSteps = 0;
 800deaa:	4b19      	ldr	r3, [pc, #100]	@ (800df10 <Save_Data+0x54c>)
 800deac:	2200      	movs	r2, #0
 800deae:	801a      	strh	r2, [r3, #0]
	squats = 0;
 800deb0:	4b19      	ldr	r3, [pc, #100]	@ (800df18 <Save_Data+0x554>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	801a      	strh	r2, [r3, #0]
	situps = 0;
 800deb6:	4b17      	ldr	r3, [pc, #92]	@ (800df14 <Save_Data+0x550>)
 800deb8:	2200      	movs	r2, #0
 800deba:	801a      	strh	r2, [r3, #0]
	pushups = 0;
 800debc:	4b17      	ldr	r3, [pc, #92]	@ (800df1c <Save_Data+0x558>)
 800debe:	2200      	movs	r2, #0
 800dec0:	801a      	strh	r2, [r3, #0]
	maxAbsoluteOverallAcceleration = 0.0;
 800dec2:	4b19      	ldr	r3, [pc, #100]	@ (800df28 <Save_Data+0x564>)
 800dec4:	f04f 0200 	mov.w	r2, #0
 800dec8:	601a      	str	r2, [r3, #0]
	sumMeanAbsoluteOverallAcceleration = 0.0;
 800deca:	4b18      	ldr	r3, [pc, #96]	@ (800df2c <Save_Data+0x568>)
 800decc:	f04f 0200 	mov.w	r2, #0
 800ded0:	601a      	str	r2, [r3, #0]
	averageSpeed = 0.0;
 800ded2:	4b13      	ldr	r3, [pc, #76]	@ (800df20 <Save_Data+0x55c>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	601a      	str	r2, [r3, #0]

// reset step counter
// Clear_Step_Counter_Reg()

	printf("\r\nold nextIn = %d\r\n", nextIn);
 800ded8:	4b0c      	ldr	r3, [pc, #48]	@ (800df0c <Save_Data+0x548>)
 800deda:	881b      	ldrh	r3, [r3, #0]
 800dedc:	4619      	mov	r1, r3
 800dede:	4814      	ldr	r0, [pc, #80]	@ (800df30 <Save_Data+0x56c>)
 800dee0:	f001 f862 	bl	800efa8 <iprintf>

	// If memory full, move nextOut to next element. So nextIn will never be equal nextOut.
	// Max number to read is NUMBER_OF_MAX_SAVED_DATA -1, one element is lost.
	if(Get_Number_Saved_Data() >= (NUMBER_OF_MAX_SAVED_DATA - 1))
 800dee4:	f000 f826 	bl	800df34 <Get_Number_Saved_Data>
 800dee8:	4603      	mov	r3, r0
 800deea:	461a      	mov	r2, r3
 800deec:	f640 33b6 	movw	r3, #2998	@ 0xbb6
 800def0:	429a      	cmp	r2, r3
 800def2:	d901      	bls.n	800def8 <Save_Data+0x534>
	{
		Move_NextOut();
 800def4:	f000 f840 	bl	800df78 <Move_NextOut>
	}
	Move_NextIn();
 800def8:	f000 f862 	bl	800dfc0 <Move_NextIn>
}
 800defc:	bf00      	nop
 800defe:	372c      	adds	r7, #44	@ 0x2c
 800df00:	46bd      	mov	sp, r7
 800df02:	bd90      	pop	{r4, r7, pc}
 800df04:	200004a0 	.word	0x200004a0
 800df08:	2001b3c4 	.word	0x2001b3c4
 800df0c:	2001aa80 	.word	0x2001aa80
 800df10:	2001b3c6 	.word	0x2001b3c6
 800df14:	2001b3c8 	.word	0x2001b3c8
 800df18:	2001b3cc 	.word	0x2001b3cc
 800df1c:	2001b3ca 	.word	0x2001b3ca
 800df20:	2001b3a4 	.word	0x2001b3a4
 800df24:	2001b3c2 	.word	0x2001b3c2
 800df28:	2001b39c 	.word	0x2001b39c
 800df2c:	2001b3a0 	.word	0x2001b3a0
 800df30:	08011dd4 	.word	0x08011dd4

0800df34 <Get_Number_Saved_Data>:

uint16_t Get_Number_Saved_Data()
{
 800df34:	b480      	push	{r7}
 800df36:	af00      	add	r7, sp, #0
	if(nextIn >= nextOut)
 800df38:	4b0d      	ldr	r3, [pc, #52]	@ (800df70 <Get_Number_Saved_Data+0x3c>)
 800df3a:	881a      	ldrh	r2, [r3, #0]
 800df3c:	4b0d      	ldr	r3, [pc, #52]	@ (800df74 <Get_Number_Saved_Data+0x40>)
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d306      	bcc.n	800df52 <Get_Number_Saved_Data+0x1e>
	{
		return nextIn - nextOut;
 800df44:	4b0a      	ldr	r3, [pc, #40]	@ (800df70 <Get_Number_Saved_Data+0x3c>)
 800df46:	881a      	ldrh	r2, [r3, #0]
 800df48:	4b0a      	ldr	r3, [pc, #40]	@ (800df74 <Get_Number_Saved_Data+0x40>)
 800df4a:	881b      	ldrh	r3, [r3, #0]
 800df4c:	1ad3      	subs	r3, r2, r3
 800df4e:	b29b      	uxth	r3, r3
 800df50:	e008      	b.n	800df64 <Get_Number_Saved_Data+0x30>
	}
	else
	{
		return NUMBER_OF_MAX_SAVED_DATA - nextOut + nextIn;
 800df52:	4b07      	ldr	r3, [pc, #28]	@ (800df70 <Get_Number_Saved_Data+0x3c>)
 800df54:	881a      	ldrh	r2, [r3, #0]
 800df56:	4b07      	ldr	r3, [pc, #28]	@ (800df74 <Get_Number_Saved_Data+0x40>)
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 800df62:	b29b      	uxth	r3, r3
	}
}
 800df64:	4618      	mov	r0, r3
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	2001aa80 	.word	0x2001aa80
 800df74:	2001aa82 	.word	0x2001aa82

0800df78 <Move_NextOut>:

void Move_NextOut()
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	af00      	add	r7, sp, #0
	if(nextOut < (NUMBER_OF_MAX_SAVED_DATA - 1))
 800df7c:	4b0e      	ldr	r3, [pc, #56]	@ (800dfb8 <Move_NextOut+0x40>)
 800df7e:	881b      	ldrh	r3, [r3, #0]
 800df80:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 800df84:	4293      	cmp	r3, r2
 800df86:	d806      	bhi.n	800df96 <Move_NextOut+0x1e>
	{
		nextOut ++;
 800df88:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb8 <Move_NextOut+0x40>)
 800df8a:	881b      	ldrh	r3, [r3, #0]
 800df8c:	3301      	adds	r3, #1
 800df8e:	b29a      	uxth	r2, r3
 800df90:	4b09      	ldr	r3, [pc, #36]	@ (800dfb8 <Move_NextOut+0x40>)
 800df92:	801a      	strh	r2, [r3, #0]
 800df94:	e002      	b.n	800df9c <Move_NextOut+0x24>
	}
	else
	{
		nextOut = 0;
 800df96:	4b08      	ldr	r3, [pc, #32]	@ (800dfb8 <Move_NextOut+0x40>)
 800df98:	2200      	movs	r2, #0
 800df9a:	801a      	strh	r2, [r3, #0]
	}
	printf("\r\nnextOut = %d\r\n", nextOut);
 800df9c:	4b06      	ldr	r3, [pc, #24]	@ (800dfb8 <Move_NextOut+0x40>)
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	4806      	ldr	r0, [pc, #24]	@ (800dfbc <Move_NextOut+0x44>)
 800dfa4:	f001 f800 	bl	800efa8 <iprintf>
	Update_Number_Of_Activity_Data(Get_Number_Saved_Data());
 800dfa8:	f7ff ffc4 	bl	800df34 <Get_Number_Saved_Data>
 800dfac:	4603      	mov	r3, r0
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fd fd50 	bl	800ba54 <Update_Number_Of_Activity_Data>
}
 800dfb4:	bf00      	nop
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	2001aa82 	.word	0x2001aa82
 800dfbc:	08011de8 	.word	0x08011de8

0800dfc0 <Move_NextIn>:

void Move_NextIn()
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	af00      	add	r7, sp, #0
	if(nextIn < (NUMBER_OF_MAX_SAVED_DATA - 1))
 800dfc4:	4b0e      	ldr	r3, [pc, #56]	@ (800e000 <Move_NextIn+0x40>)
 800dfc6:	881b      	ldrh	r3, [r3, #0]
 800dfc8:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d806      	bhi.n	800dfde <Move_NextIn+0x1e>
	{
		nextIn ++;
 800dfd0:	4b0b      	ldr	r3, [pc, #44]	@ (800e000 <Move_NextIn+0x40>)
 800dfd2:	881b      	ldrh	r3, [r3, #0]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	4b09      	ldr	r3, [pc, #36]	@ (800e000 <Move_NextIn+0x40>)
 800dfda:	801a      	strh	r2, [r3, #0]
 800dfdc:	e002      	b.n	800dfe4 <Move_NextIn+0x24>
	}
	else
	{
		nextIn = 0;
 800dfde:	4b08      	ldr	r3, [pc, #32]	@ (800e000 <Move_NextIn+0x40>)
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	801a      	strh	r2, [r3, #0]
	}
	printf("new nextIn = %d\r\n", nextIn);
 800dfe4:	4b06      	ldr	r3, [pc, #24]	@ (800e000 <Move_NextIn+0x40>)
 800dfe6:	881b      	ldrh	r3, [r3, #0]
 800dfe8:	4619      	mov	r1, r3
 800dfea:	4806      	ldr	r0, [pc, #24]	@ (800e004 <Move_NextIn+0x44>)
 800dfec:	f000 ffdc 	bl	800efa8 <iprintf>
	Update_Number_Of_Activity_Data(Get_Number_Saved_Data());
 800dff0:	f7ff ffa0 	bl	800df34 <Get_Number_Saved_Data>
 800dff4:	4603      	mov	r3, r0
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fd fd2c 	bl	800ba54 <Update_Number_Of_Activity_Data>
}
 800dffc:	bf00      	nop
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	2001aa80 	.word	0x2001aa80
 800e004:	08011dfc 	.word	0x08011dfc

0800e008 <Adc_Measure_Battery_Voltage>:
uint8_t turnOffVoltageCounter = 0;

ADC_ChannelConfTypeDef sConfig = {0};

void Adc_Measure_Battery_Voltage(void)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	71fb      	strb	r3, [r7, #7]

	if(adcStatus == ready)
 800e012:	4b20      	ldr	r3, [pc, #128]	@ (800e094 <Adc_Measure_Battery_Voltage+0x8c>)
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d137      	bne.n	800e08a <Adc_Measure_Battery_Voltage+0x82>
	{
		adcStatus = measuringBattery;
 800e01a:	4b1e      	ldr	r3, [pc, #120]	@ (800e094 <Adc_Measure_Battery_Voltage+0x8c>)
 800e01c:	2201      	movs	r2, #1
 800e01e:	701a      	strb	r2, [r3, #0]

		sConfig.Channel = ADC_CHANNEL_13;
 800e020:	4b1d      	ldr	r3, [pc, #116]	@ (800e098 <Adc_Measure_Battery_Voltage+0x90>)
 800e022:	4a1e      	ldr	r2, [pc, #120]	@ (800e09c <Adc_Measure_Battery_Voltage+0x94>)
 800e024:	601a      	str	r2, [r3, #0]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800e026:	4b1c      	ldr	r3, [pc, #112]	@ (800e098 <Adc_Measure_Battery_Voltage+0x90>)
 800e028:	2206      	movs	r2, #6
 800e02a:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800e02c:	4b1a      	ldr	r3, [pc, #104]	@ (800e098 <Adc_Measure_Battery_Voltage+0x90>)
 800e02e:	2207      	movs	r2, #7
 800e030:	609a      	str	r2, [r3, #8]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e032:	4b19      	ldr	r3, [pc, #100]	@ (800e098 <Adc_Measure_Battery_Voltage+0x90>)
 800e034:	227f      	movs	r2, #127	@ 0x7f
 800e036:	60da      	str	r2, [r3, #12]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e038:	4b17      	ldr	r3, [pc, #92]	@ (800e098 <Adc_Measure_Battery_Voltage+0x90>)
 800e03a:	2204      	movs	r2, #4
 800e03c:	611a      	str	r2, [r3, #16]
		sConfig.Offset = 0;
 800e03e:	4b16      	ldr	r3, [pc, #88]	@ (800e098 <Adc_Measure_Battery_Voltage+0x90>)
 800e040:	2200      	movs	r2, #0
 800e042:	615a      	str	r2, [r3, #20]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800e044:	4914      	ldr	r1, [pc, #80]	@ (800e098 <Adc_Measure_Battery_Voltage+0x90>)
 800e046:	4816      	ldr	r0, [pc, #88]	@ (800e0a0 <Adc_Measure_Battery_Voltage+0x98>)
 800e048:	f7f5 fdcc 	bl	8003be4 <HAL_ADC_ConfigChannel>

		HAL_GPIO_WritePin(CHARGE_ENABLE_GPIO_Port,CHARGE_ENABLE_Pin, 1); // Batterielade-IC deaktivieren, sonst wird die Lade- und nicht die Batteriespannung gemessen
 800e04c:	2201      	movs	r2, #1
 800e04e:	2101      	movs	r1, #1
 800e050:	4814      	ldr	r0, [pc, #80]	@ (800e0a4 <Adc_Measure_Battery_Voltage+0x9c>)
 800e052:	f7f6 ffa9 	bl	8004fa8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VBAT_ADC_ENABLE_GPIO_Port, VBAT_ADC_ENABLE_Pin, 0); // Spannungsteiler aktivieren
 800e056:	2200      	movs	r2, #0
 800e058:	2110      	movs	r1, #16
 800e05a:	4813      	ldr	r0, [pc, #76]	@ (800e0a8 <Adc_Measure_Battery_Voltage+0xa0>)
 800e05c:	f7f6 ffa4 	bl	8004fa8 <HAL_GPIO_WritePin>

		HAL_Delay(100); // zwischen ADC_BAT_ENABLE und der ADC-Messung muss unbedingt eine Pause sein, sonst zeigt der Mikrocontroller merkwürdiges Verhalten:
 800e060:	2064      	movs	r0, #100	@ 0x64
 800e062:	f7f3 f812 	bl	800108a <HAL_Delay>
		// keine Ahnung, wie der Mikrocontroller die 3,3 V generiert, er selbst wird lediglich mit 3,0 V versorgt
		// die Register vom VREFBUF sagen VREFBUF ist ready, also keine Auffälligkeiten
		// die Messung ist dann entsprechend falsch (mit 3,3 V Referenzspannung)
		// wenn man diese Pause einbaut, besteht der Fehler nicht

		HAL_ADC_Stop_IT(&hadc1); // MUSS UNBEDINGT HIER STEHEN, sonst liefert der ADC im Schlaf-Modus, wenn der Debugger nicht angeschlossen ist
 800e066:	480e      	ldr	r0, [pc, #56]	@ (800e0a0 <Adc_Measure_Battery_Voltage+0x98>)
 800e068:	f7f5 fbb3 	bl	80037d2 <HAL_ADC_Stop_IT>
								// manchmal den Wert 0
		ret=HAL_ADC_Start_IT(&hadc1);
 800e06c:	480c      	ldr	r0, [pc, #48]	@ (800e0a0 <Adc_Measure_Battery_Voltage+0x98>)
 800e06e:	f7f5 fb33 	bl	80036d8 <HAL_ADC_Start_IT>
 800e072:	4603      	mov	r3, r0
 800e074:	71fb      	strb	r3, [r7, #7]

		if(ret != HAL_OK)
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d003      	beq.n	800e084 <Adc_Measure_Battery_Voltage+0x7c>
		{
			printf("error starting battery voltage measurement\r\n");
 800e07c:	480b      	ldr	r0, [pc, #44]	@ (800e0ac <Adc_Measure_Battery_Voltage+0xa4>)
 800e07e:	f000 fffb 	bl	800f078 <puts>
		{
			printf("started battery voltage measurement\r\n");
		}
	}

}
 800e082:	e002      	b.n	800e08a <Adc_Measure_Battery_Voltage+0x82>
			printf("started battery voltage measurement\r\n");
 800e084:	480a      	ldr	r0, [pc, #40]	@ (800e0b0 <Adc_Measure_Battery_Voltage+0xa8>)
 800e086:	f000 fff7 	bl	800f078 <puts>
}
 800e08a:	bf00      	nop
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	2001b3d2 	.word	0x2001b3d2
 800e098:	2001b3d4 	.word	0x2001b3d4
 800e09c:	36902000 	.word	0x36902000
 800e0a0:	20000214 	.word	0x20000214
 800e0a4:	48000c00 	.word	0x48000c00
 800e0a8:	48000400 	.word	0x48000400
 800e0ac:	08011e10 	.word	0x08011e10
 800e0b0:	08011e3c 	.word	0x08011e3c

0800e0b4 <HAL_ADC_ErrorCallback>:


void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
	deviceData.batteryVoltage = 1;
 800e0bc:	4b05      	ldr	r3, [pc, #20]	@ (800e0d4 <HAL_ADC_ErrorCallback+0x20>)
 800e0be:	2201      	movs	r2, #1
 800e0c0:	705a      	strb	r2, [r3, #1]
	UTIL_SEQ_SetTask(1<<CFG_TASK_BATTERY_VOLTAGE_CALLBACK_ID, 1);
 800e0c2:	2101      	movs	r1, #1
 800e0c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e0c8:	f000 fd90 	bl	800ebec <UTIL_SEQ_SetTask>
}
 800e0cc:	bf00      	nop
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	20000478 	.word	0x20000478

0800e0d8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
	uint32_t adcResult = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	617b      	str	r3, [r7, #20]
	if(adcStatus == measuringBattery)
 800e0e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e15c <HAL_ADC_ConvCpltCallback+0x84>)
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d132      	bne.n	800e152 <HAL_ADC_ConvCpltCallback+0x7a>
	{
		// ################### Battery

		Battery_Voltage_Result_t result;

		HAL_GPIO_WritePin(CHARGE_ENABLE_GPIO_Port,CHARGE_ENABLE_Pin, 0); // Laden wieder aktivieren
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	2101      	movs	r1, #1
 800e0f0:	481b      	ldr	r0, [pc, #108]	@ (800e160 <HAL_ADC_ConvCpltCallback+0x88>)
 800e0f2:	f7f6 ff59 	bl	8004fa8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VBAT_ADC_ENABLE_GPIO_Port, VBAT_ADC_ENABLE_Pin, 1); // Spannungsteiler deaktivieren
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	2110      	movs	r1, #16
 800e0fa:	481a      	ldr	r0, [pc, #104]	@ (800e164 <HAL_ADC_ConvCpltCallback+0x8c>)
 800e0fc:	f7f6 ff54 	bl	8004fa8 <HAL_GPIO_WritePin>
		result.status = measurementComplete;
 800e100:	2300      	movs	r3, #0
 800e102:	733b      	strb	r3, [r7, #12]

		adcResult = HAL_ADC_GetValue(&hadc1);
 800e104:	4818      	ldr	r0, [pc, #96]	@ (800e168 <HAL_ADC_ConvCpltCallback+0x90>)
 800e106:	f7f5 fb9f 	bl	8003848 <HAL_ADC_GetValue>
 800e10a:	6178      	str	r0, [r7, #20]
		printf("eigen_adc_control.c adc value is %lu\r\n", adcResult);
 800e10c:	6979      	ldr	r1, [r7, #20]
 800e10e:	4817      	ldr	r0, [pc, #92]	@ (800e16c <HAL_ADC_ConvCpltCallback+0x94>)
 800e110:	f000 ff4a 	bl	800efa8 <iprintf>
		result.voltage = adcResult*2*REFERENCE_VOLTAGE/255;
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	f641 12c8 	movw	r2, #6600	@ 0x19c8
 800e11a:	fb02 f303 	mul.w	r3, r2, r3
 800e11e:	4a14      	ldr	r2, [pc, #80]	@ (800e170 <HAL_ADC_ConvCpltCallback+0x98>)
 800e120:	fba2 2303 	umull	r2, r3, r2, r3
 800e124:	09db      	lsrs	r3, r3, #7
 800e126:	613b      	str	r3, [r7, #16]

		printf("eigen_adc_control.c Battery Voltage is %lu\r\n", result.voltage);
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	4619      	mov	r1, r3
 800e12c:	4811      	ldr	r0, [pc, #68]	@ (800e174 <HAL_ADC_ConvCpltCallback+0x9c>)
 800e12e:	f000 ff3b 	bl	800efa8 <iprintf>

		deviceData.batteryVoltage = result.voltage/100; // 8 bit for advertising (immer abgerundet auf Zehntel)
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	4a10      	ldr	r2, [pc, #64]	@ (800e178 <HAL_ADC_ConvCpltCallback+0xa0>)
 800e136:	fba2 2303 	umull	r2, r3, r2, r3
 800e13a:	095b      	lsrs	r3, r3, #5
 800e13c:	b2da      	uxtb	r2, r3
 800e13e:	4b0f      	ldr	r3, [pc, #60]	@ (800e17c <HAL_ADC_ConvCpltCallback+0xa4>)
 800e140:	705a      	strb	r2, [r3, #1]

		UTIL_SEQ_SetTask(1<<CFG_TASK_BATTERY_VOLTAGE_CALLBACK_ID, 1);
 800e142:	2101      	movs	r1, #1
 800e144:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e148:	f000 fd50 	bl	800ebec <UTIL_SEQ_SetTask>

		adcStatus = ready;
 800e14c:	4b03      	ldr	r3, [pc, #12]	@ (800e15c <HAL_ADC_ConvCpltCallback+0x84>)
 800e14e:	2200      	movs	r2, #0
 800e150:	701a      	strb	r2, [r3, #0]


	}

}
 800e152:	bf00      	nop
 800e154:	3718      	adds	r7, #24
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	2001b3d2 	.word	0x2001b3d2
 800e160:	48000c00 	.word	0x48000c00
 800e164:	48000400 	.word	0x48000400
 800e168:	20000214 	.word	0x20000214
 800e16c:	08011e64 	.word	0x08011e64
 800e170:	80808081 	.word	0x80808081
 800e174:	08011e8c 	.word	0x08011e8c
 800e178:	51eb851f 	.word	0x51eb851f
 800e17c:	20000478 	.word	0x20000478

0800e180 <Ble_Connected_To_Client>:
extern RTC_TimeTypeDef rtcTime;
extern RTC_HandleTypeDef hrtc;
extern uint8_t waitForRessourcesToNotify;

void Ble_Connected_To_Client(void)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	af00      	add	r7, sp, #0
	printf("eigen_ble.c Ble_Connected_To_Client\r\n");
 800e184:	4803      	ldr	r0, [pc, #12]	@ (800e194 <Ble_Connected_To_Client+0x14>)
 800e186:	f000 ff77 	bl	800f078 <puts>
	// this function is used to handle the connection event in the ST library
	deviceData.bluetoothStatus = connected; // automatically stops advertising after connect
 800e18a:	4b03      	ldr	r3, [pc, #12]	@ (800e198 <Ble_Connected_To_Client+0x18>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	709a      	strb	r2, [r3, #2]
}
 800e190:	bf00      	nop
 800e192:	bd80      	pop	{r7, pc}
 800e194:	08011ebc 	.word	0x08011ebc
 800e198:	20000478 	.word	0x20000478

0800e19c <Ble_Disconnected_From_Client>:

void Ble_Disconnected_From_Client(void)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	af00      	add	r7, sp, #0
	printf("eigen_ble.c Ble_Disconnected_From_Client\r\n");
 800e1a0:	4804      	ldr	r0, [pc, #16]	@ (800e1b4 <Ble_Disconnected_From_Client+0x18>)
 800e1a2:	f000 ff69 	bl	800f078 <puts>
	// this function is used to handle the disconnection event in the ST library
	deviceData.bluetoothStatus = advertisingFast; // automatically starts fast advertising after disconnect
 800e1a6:	4b04      	ldr	r3, [pc, #16]	@ (800e1b8 <Ble_Disconnected_From_Client+0x1c>)
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	709a      	strb	r2, [r3, #2]
	Ble_Update_Advertising_Data(); // ist notwendig, damit die eigene Advertising-Data verwendet wird
 800e1ac:	f000 f8c8 	bl	800e340 <Ble_Update_Advertising_Data>
	// sonst würde die im Cube generierte Advertising-Data angezeigt werden

}
 800e1b0:	bf00      	nop
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	08011ee4 	.word	0x08011ee4
 800e1b8:	20000478 	.word	0x20000478

0800e1bc <Ble_Start_Advertising>:
	} else {
		printf("not disconnecting\r\n");
	}
}

void Ble_Start_Advertising(uint8_t typeOfAdvertising){
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08c      	sub	sp, #48	@ 0x30
 800e1c0:	af08      	add	r7, sp, #32
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	71fb      	strb	r3, [r7, #7]
	printf("eigen_ble.c Ble_Start_Advertising\r\n");
 800e1c6:	4837      	ldr	r0, [pc, #220]	@ (800e2a4 <Ble_Start_Advertising+0xe8>)
 800e1c8:	f000 ff56 	bl	800f078 <puts>

	// this function can also be used to restart advertising
	uint8_t ret = 0;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	73fb      	strb	r3, [r7, #15]
	if(deviceData.bluetoothStatus != connected) {
 800e1d0:	4b35      	ldr	r3, [pc, #212]	@ (800e2a8 <Ble_Start_Advertising+0xec>)
 800e1d2:	789b      	ldrb	r3, [r3, #2]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d061      	beq.n	800e29c <Ble_Start_Advertising+0xe0>
		if(deviceData.bluetoothStatus == advertisingFast || deviceData.bluetoothStatus == advertisingSlow)
 800e1d8:	4b33      	ldr	r3, [pc, #204]	@ (800e2a8 <Ble_Start_Advertising+0xec>)
 800e1da:	789b      	ldrb	r3, [r3, #2]
 800e1dc:	2b02      	cmp	r3, #2
 800e1de:	d003      	beq.n	800e1e8 <Ble_Start_Advertising+0x2c>
 800e1e0:	4b31      	ldr	r3, [pc, #196]	@ (800e2a8 <Ble_Start_Advertising+0xec>)
 800e1e2:	789b      	ldrb	r3, [r3, #2]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d101      	bne.n	800e1ec <Ble_Start_Advertising+0x30>
		{
			Ble_Stop_Advertising(); // stop before restart
 800e1e8:	f000 f86a 	bl	800e2c0 <Ble_Stop_Advertising>
		}

		if(typeOfAdvertising==SLOW_ADVERTISING)
 800e1ec:	79fb      	ldrb	r3, [r7, #7]
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d12a      	bne.n	800e248 <Ble_Start_Advertising+0x8c>
		{
			ret = aci_gap_set_discoverable(ADV_TYPE,
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9306      	str	r3, [sp, #24]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	9305      	str	r3, [sp, #20]
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	9304      	str	r3, [sp, #16]
 800e1fe:	2300      	movs	r3, #0
 800e200:	9303      	str	r3, [sp, #12]
 800e202:	2300      	movs	r3, #0
 800e204:	9302      	str	r3, [sp, #8]
 800e206:	2300      	movs	r3, #0
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	2300      	movs	r3, #0
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	2300      	movs	r3, #0
 800e210:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800e214:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800e218:	2000      	movs	r0, #0
 800e21a:	f7f9 ff2a 	bl	8008072 <aci_gap_set_discoverable>
 800e21e:	4603      	mov	r3, r0
 800e220:	73fb      	strb	r3, [r7, #15]
											 0,
											 0,
											 0,
											 0);

			if (ret != BLE_STATUS_SUCCESS)
 800e222:	7bfb      	ldrb	r3, [r7, #15]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d008      	beq.n	800e23a <Ble_Start_Advertising+0x7e>
			{
				printf("error starting slow advertising\r\n");
 800e228:	4820      	ldr	r0, [pc, #128]	@ (800e2ac <Ble_Start_Advertising+0xf0>)
 800e22a:	f000 ff25 	bl	800f078 <puts>
				printf("return value is %i\r\n", ret);
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
 800e230:	4619      	mov	r1, r3
 800e232:	481f      	ldr	r0, [pc, #124]	@ (800e2b0 <Ble_Start_Advertising+0xf4>)
 800e234:	f000 feb8 	bl	800efa8 <iprintf>
 800e238:	e02e      	b.n	800e298 <Ble_Start_Advertising+0xdc>

			} else
			{
				printf("slow advertising started\r\n");
 800e23a:	481e      	ldr	r0, [pc, #120]	@ (800e2b4 <Ble_Start_Advertising+0xf8>)
 800e23c:	f000 ff1c 	bl	800f078 <puts>
				deviceData.bluetoothStatus = advertisingSlow;
 800e240:	4b19      	ldr	r3, [pc, #100]	@ (800e2a8 <Ble_Start_Advertising+0xec>)
 800e242:	2201      	movs	r2, #1
 800e244:	709a      	strb	r2, [r3, #2]
 800e246:	e027      	b.n	800e298 <Ble_Start_Advertising+0xdc>
			}
		} else
		{
			ret = aci_gap_set_discoverable(ADV_TYPE,
 800e248:	2300      	movs	r3, #0
 800e24a:	9306      	str	r3, [sp, #24]
 800e24c:	2300      	movs	r3, #0
 800e24e:	9305      	str	r3, [sp, #20]
 800e250:	2300      	movs	r3, #0
 800e252:	9304      	str	r3, [sp, #16]
 800e254:	2300      	movs	r3, #0
 800e256:	9303      	str	r3, [sp, #12]
 800e258:	2300      	movs	r3, #0
 800e25a:	9302      	str	r3, [sp, #8]
 800e25c:	2300      	movs	r3, #0
 800e25e:	9301      	str	r3, [sp, #4]
 800e260:	2300      	movs	r3, #0
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	2300      	movs	r3, #0
 800e266:	22a0      	movs	r2, #160	@ 0xa0
 800e268:	2180      	movs	r1, #128	@ 0x80
 800e26a:	2000      	movs	r0, #0
 800e26c:	f7f9 ff01 	bl	8008072 <aci_gap_set_discoverable>
 800e270:	4603      	mov	r3, r0
 800e272:	73fb      	strb	r3, [r7, #15]
											 0,
											 0,
											 0,
											 0,
											 0);
			if (ret != BLE_STATUS_SUCCESS)
 800e274:	7bfb      	ldrb	r3, [r7, #15]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d008      	beq.n	800e28c <Ble_Start_Advertising+0xd0>
			{
				printf("error starting fast advertising\r\n");
 800e27a:	480f      	ldr	r0, [pc, #60]	@ (800e2b8 <Ble_Start_Advertising+0xfc>)
 800e27c:	f000 fefc 	bl	800f078 <puts>
				printf("return value is %i\r\n", ret);
 800e280:	7bfb      	ldrb	r3, [r7, #15]
 800e282:	4619      	mov	r1, r3
 800e284:	480a      	ldr	r0, [pc, #40]	@ (800e2b0 <Ble_Start_Advertising+0xf4>)
 800e286:	f000 fe8f 	bl	800efa8 <iprintf>
 800e28a:	e005      	b.n	800e298 <Ble_Start_Advertising+0xdc>
			} else
			{
				printf("fast advertising started\r\n");
 800e28c:	480b      	ldr	r0, [pc, #44]	@ (800e2bc <Ble_Start_Advertising+0x100>)
 800e28e:	f000 fef3 	bl	800f078 <puts>
				deviceData.bluetoothStatus = advertisingFast;
 800e292:	4b05      	ldr	r3, [pc, #20]	@ (800e2a8 <Ble_Start_Advertising+0xec>)
 800e294:	2202      	movs	r2, #2
 800e296:	709a      	strb	r2, [r3, #2]
			}
		}
		Ble_Update_Advertising_Data(); // nachdem das Advertising gestartet wurde, muss die advertising Data beschrieben werden
 800e298:	f000 f852 	bl	800e340 <Ble_Update_Advertising_Data>
												// sonst haben die Daten den Default-Value
	}
}
 800e29c:	bf00      	nop
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	08011fac 	.word	0x08011fac
 800e2a8:	20000478 	.word	0x20000478
 800e2ac:	08011fd0 	.word	0x08011fd0
 800e2b0:	08011f80 	.word	0x08011f80
 800e2b4:	08011ff4 	.word	0x08011ff4
 800e2b8:	08012010 	.word	0x08012010
 800e2bc:	08012034 	.word	0x08012034

0800e2c0 <Ble_Stop_Advertising>:

void Ble_Stop_Advertising(void) {
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	71fb      	strb	r3, [r7, #7]

	printf("eigen_ble.c stop advertising\r\n");
 800e2ca:	4816      	ldr	r0, [pc, #88]	@ (800e324 <Ble_Stop_Advertising+0x64>)
 800e2cc:	f000 fed4 	bl	800f078 <puts>
	if(deviceData.bluetoothStatus == advertisingFast || deviceData.bluetoothStatus == advertisingSlow)
 800e2d0:	4b15      	ldr	r3, [pc, #84]	@ (800e328 <Ble_Stop_Advertising+0x68>)
 800e2d2:	789b      	ldrb	r3, [r3, #2]
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d003      	beq.n	800e2e0 <Ble_Stop_Advertising+0x20>
 800e2d8:	4b13      	ldr	r3, [pc, #76]	@ (800e328 <Ble_Stop_Advertising+0x68>)
 800e2da:	789b      	ldrb	r3, [r3, #2]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d119      	bne.n	800e314 <Ble_Stop_Advertising+0x54>
	{
		printf("actually stopping advertising\r\n");
 800e2e0:	4812      	ldr	r0, [pc, #72]	@ (800e32c <Ble_Stop_Advertising+0x6c>)
 800e2e2:	f000 fec9 	bl	800f078 <puts>
		ret = aci_gap_set_non_discoverable();
 800e2e6:	f7f9 fea0 	bl	800802a <aci_gap_set_non_discoverable>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	71fb      	strb	r3, [r7, #7]

		if (ret != BLE_STATUS_SUCCESS)
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d008      	beq.n	800e306 <Ble_Stop_Advertising+0x46>
		{
			printf("error stopping advertising\r\n");
 800e2f4:	480e      	ldr	r0, [pc, #56]	@ (800e330 <Ble_Stop_Advertising+0x70>)
 800e2f6:	f000 febf 	bl	800f078 <puts>
			printf("return value is %i\r\n", ret);
 800e2fa:	79fb      	ldrb	r3, [r7, #7]
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	480d      	ldr	r0, [pc, #52]	@ (800e334 <Ble_Stop_Advertising+0x74>)
 800e300:	f000 fe52 	bl	800efa8 <iprintf>
		if (ret != BLE_STATUS_SUCCESS)
 800e304:	e00a      	b.n	800e31c <Ble_Stop_Advertising+0x5c>
		} else
		{
			printf("advertising stopped\r\n");
 800e306:	480c      	ldr	r0, [pc, #48]	@ (800e338 <Ble_Stop_Advertising+0x78>)
 800e308:	f000 feb6 	bl	800f078 <puts>
			deviceData.bluetoothStatus = notConnectedNotAdvertising;
 800e30c:	4b06      	ldr	r3, [pc, #24]	@ (800e328 <Ble_Stop_Advertising+0x68>)
 800e30e:	2203      	movs	r2, #3
 800e310:	709a      	strb	r2, [r3, #2]
		if (ret != BLE_STATUS_SUCCESS)
 800e312:	e003      	b.n	800e31c <Ble_Stop_Advertising+0x5c>
		}
	} else {
		printf("not stopping advertising\r\n");
 800e314:	4809      	ldr	r0, [pc, #36]	@ (800e33c <Ble_Stop_Advertising+0x7c>)
 800e316:	f000 feaf 	bl	800f078 <puts>
	}
}
 800e31a:	bf00      	nop
 800e31c:	bf00      	nop
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	08012050 	.word	0x08012050
 800e328:	20000478 	.word	0x20000478
 800e32c:	08012070 	.word	0x08012070
 800e330:	08012090 	.word	0x08012090
 800e334:	08011f80 	.word	0x08011f80
 800e338:	080120ac 	.word	0x080120ac
 800e33c:	080120c4 	.word	0x080120c4

0800e340 <Ble_Update_Advertising_Data>:

void Ble_Update_Advertising_Data()
{
 800e340:	b5b0      	push	{r4, r5, r7, lr}
 800e342:	b088      	sub	sp, #32
 800e344:	af00      	add	r7, sp, #0
	// DIESE FUNKTION DARF NICHT IN EINEM INTERRUPT AUFGERUFEN WERDEN!

	printf("eigen_ble.c Ble_Update_Advertising_Data\r\n");
 800e346:	481d      	ldr	r0, [pc, #116]	@ (800e3bc <Ble_Update_Advertising_Data+0x7c>)
 800e348:	f000 fe96 	bl	800f078 <puts>

	uint8_t ret = 0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	77fb      	strb	r3, [r7, #31]
	// Es wird "2222" verwendet, da diese in der Liste der 16 Bit UUIDS (von Bluetooth) nicht vorkam
	// Die UUID wird automatisch der Gesamt-UUID angehängt: 00002222-0000-1000-8000-00805F9B34FB
	// es kann vorkommen, dass auch andere Hersteller diese UUID verwenden, allerdings ist das eher unwahrscheinlich
	// und die Wahl einer UUID ermöglicht die Verwendung eines Filters in Flutter

	if(deviceData.bluetoothStatus == advertisingFast || deviceData.bluetoothStatus == advertisingSlow)
 800e350:	4b1b      	ldr	r3, [pc, #108]	@ (800e3c0 <Ble_Update_Advertising_Data+0x80>)
 800e352:	789b      	ldrb	r3, [r3, #2]
 800e354:	2b02      	cmp	r3, #2
 800e356:	d003      	beq.n	800e360 <Ble_Update_Advertising_Data+0x20>
 800e358:	4b19      	ldr	r3, [pc, #100]	@ (800e3c0 <Ble_Update_Advertising_Data+0x80>)
 800e35a:	789b      	ldrb	r3, [r3, #2]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d125      	bne.n	800e3ac <Ble_Update_Advertising_Data+0x6c>
	{
		printf("actually updating advertising data\r\n");
 800e360:	4818      	ldr	r0, [pc, #96]	@ (800e3c4 <Ble_Update_Advertising_Data+0x84>)
 800e362:	f000 fe89 	bl	800f078 <puts>
//		10, AD_TYPE_MANUFACTURER_SPECIFIC_DATA, 0x00, 0x00, 0,0,0,0,0,0,
//		// [16] Batteriespannung
//
//		};

		uint8_t ad_new_data[24] =
 800e366:	4b18      	ldr	r3, [pc, #96]	@ (800e3c8 <Ble_Update_Advertising_Data+0x88>)
 800e368:	1d3c      	adds	r4, r7, #4
 800e36a:	461d      	mov	r5, r3
 800e36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e370:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e374:	e884 0003 	stmia.w	r4, {r0, r1}
		  2, AD_TYPE_LE_ROLE, 0x00 /* Only Peripheral Role supported */,
		  3, AD_TYPE_16_BIT_SERV_UUID_CMPLT_LIST, 0x3E, 0x18,
		  4, AD_TYPE_MANUFACTURER_SPECIFIC_DATA, 0x30, 0x00, 0x00 /* battery voltage */,
		};

		ad_new_data[23]=deviceData.batteryVoltage;
 800e378:	4b11      	ldr	r3, [pc, #68]	@ (800e3c0 <Ble_Update_Advertising_Data+0x80>)
 800e37a:	785b      	ldrb	r3, [r3, #1]
 800e37c:	76fb      	strb	r3, [r7, #27]

		ret=aci_gap_update_adv_data(sizeof(ad_new_data), (uint8_t*) ad_new_data);
 800e37e:	1d3b      	adds	r3, r7, #4
 800e380:	4619      	mov	r1, r3
 800e382:	2018      	movs	r0, #24
 800e384:	f7fa f99b 	bl	80086be <aci_gap_update_adv_data>
 800e388:	4603      	mov	r3, r0
 800e38a:	77fb      	strb	r3, [r7, #31]

		if (ret != BLE_STATUS_SUCCESS)
 800e38c:	7ffb      	ldrb	r3, [r7, #31]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d008      	beq.n	800e3a4 <Ble_Update_Advertising_Data+0x64>
		{
			printf("error updating advertising data\r\n");
 800e392:	480e      	ldr	r0, [pc, #56]	@ (800e3cc <Ble_Update_Advertising_Data+0x8c>)
 800e394:	f000 fe70 	bl	800f078 <puts>
			printf("return value is %i\r\n", ret);
 800e398:	7ffb      	ldrb	r3, [r7, #31]
 800e39a:	4619      	mov	r1, r3
 800e39c:	480c      	ldr	r0, [pc, #48]	@ (800e3d0 <Ble_Update_Advertising_Data+0x90>)
 800e39e:	f000 fe03 	bl	800efa8 <iprintf>
	{
 800e3a2:	e007      	b.n	800e3b4 <Ble_Update_Advertising_Data+0x74>
		} else
		{
			printf("success updating advertising data\r\n");
 800e3a4:	480b      	ldr	r0, [pc, #44]	@ (800e3d4 <Ble_Update_Advertising_Data+0x94>)
 800e3a6:	f000 fe67 	bl	800f078 <puts>
	{
 800e3aa:	e003      	b.n	800e3b4 <Ble_Update_Advertising_Data+0x74>
		}
	} else {
		printf("did not update advertising data\r\n");
 800e3ac:	480a      	ldr	r0, [pc, #40]	@ (800e3d8 <Ble_Update_Advertising_Data+0x98>)
 800e3ae:	f000 fe63 	bl	800f078 <puts>
	}
}
 800e3b2:	bf00      	nop
 800e3b4:	bf00      	nop
 800e3b6:	3720      	adds	r7, #32
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e3bc:	080120e0 	.word	0x080120e0
 800e3c0:	20000478 	.word	0x20000478
 800e3c4:	0801210c 	.word	0x0801210c
 800e3c8:	0801219c 	.word	0x0801219c
 800e3cc:	08012130 	.word	0x08012130
 800e3d0:	08011f80 	.word	0x08011f80
 800e3d4:	08012154 	.word	0x08012154
 800e3d8:	08012178 	.word	0x08012178

0800e3dc <Ble_Update_Characteristic>:

uint8_t Ble_Update_Characteristic(uint8_t characteristic, uint8_t *data, uint8_t numberOfBytesToTransmit)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	6039      	str	r1, [r7, #0]
 800e3e6:	71fb      	strb	r3, [r7, #7]
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	71bb      	strb	r3, [r7, #6]
	uint8_t ret = 0;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	73fb      	strb	r3, [r7, #15]

	ret = Custom_STM_App_Update_Char(characteristic, (uint8_t *)data); // update value for read / notify
 800e3f0:	79fb      	ldrb	r3, [r7, #7]
 800e3f2:	6839      	ldr	r1, [r7, #0]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fd fec1 	bl	800c17c <Custom_STM_App_Update_Char>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	73fb      	strb	r3, [r7, #15]

	if (ret != BLE_STATUS_SUCCESS)
 800e3fe:	7bfb      	ldrb	r3, [r7, #15]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00a      	beq.n	800e41a <Ble_Update_Characteristic+0x3e>
	{
		waitForRessourcesToNotify=1;
 800e404:	4b07      	ldr	r3, [pc, #28]	@ (800e424 <Ble_Update_Characteristic+0x48>)
 800e406:	2201      	movs	r2, #1
 800e408:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_WritePin(TESTPIN2_GPIO_Port, TESTPIN2_Pin, 1);
		printf("error updating characteristic\r\n");
 800e40a:	4807      	ldr	r0, [pc, #28]	@ (800e428 <Ble_Update_Characteristic+0x4c>)
 800e40c:	f000 fe34 	bl	800f078 <puts>
		printf("return value is %i\r\n", ret);
 800e410:	7bfb      	ldrb	r3, [r7, #15]
 800e412:	4619      	mov	r1, r3
 800e414:	4805      	ldr	r0, [pc, #20]	@ (800e42c <Ble_Update_Characteristic+0x50>)
 800e416:	f000 fdc7 	bl	800efa8 <iprintf>
	{
//		printf("success updating characteristic\r\n");
	}
//	printf("end char update\r\n");

	return ret;
 800e41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3710      	adds	r7, #16
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	20000472 	.word	0x20000472
 800e428:	080121b4 	.word	0x080121b4
 800e42c:	08011f80 	.word	0x08011f80

0800e430 <LL_PWR_EnableBootC2>:
{
 800e430:	b480      	push	{r7}
 800e432:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e434:	4b05      	ldr	r3, [pc, #20]	@ (800e44c <LL_PWR_EnableBootC2+0x1c>)
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	4a04      	ldr	r2, [pc, #16]	@ (800e44c <LL_PWR_EnableBootC2+0x1c>)
 800e43a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e43e:	60d3      	str	r3, [r2, #12]
}
 800e440:	bf00      	nop
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	58000400 	.word	0x58000400

0800e450 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e458:	4b06      	ldr	r3, [pc, #24]	@ (800e474 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e45a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800e45e:	4905      	ldr	r1, [pc, #20]	@ (800e474 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4313      	orrs	r3, r2
 800e464:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800e468:	bf00      	nop
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr
 800e474:	58000800 	.word	0x58000800

0800e478 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e480:	4b05      	ldr	r3, [pc, #20]	@ (800e498 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e482:	6a1a      	ldr	r2, [r3, #32]
 800e484:	4904      	ldr	r1, [pc, #16]	@ (800e498 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	4313      	orrs	r3, r2
 800e48a:	620b      	str	r3, [r1, #32]
}
 800e48c:	bf00      	nop
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr
 800e498:	58000800 	.word	0x58000800

0800e49c <LL_AHB3_GRP1_EnableClock>:
{
 800e49c:	b480      	push	{r7}
 800e49e:	b085      	sub	sp, #20
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e4a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e4aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e4b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4013      	ands	r3, r2
 800e4be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
}
 800e4c2:	bf00      	nop
 800e4c4:	3714      	adds	r7, #20
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	b085      	sub	sp, #20
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800e4d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4da:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e4de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800e4ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4ee:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
}
 800e4fa:	bf00      	nop
 800e4fc:	3714      	adds	r7, #20
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800e506:	b480      	push	{r7}
 800e508:	b083      	sub	sp, #12
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	601a      	str	r2, [r3, #0]
}
 800e51a:	bf00      	nop
 800e51c:	370c      	adds	r7, #12
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr

0800e526 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800e526:	b480      	push	{r7}
 800e528:	b083      	sub	sp, #12
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f043 0201 	orr.w	r2, r3, #1
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	601a      	str	r2, [r3, #0]
}
 800e53a:	bf00      	nop
 800e53c:	370c      	adds	r7, #12
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr

0800e546 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e546:	b480      	push	{r7}
 800e548:	b083      	sub	sp, #12
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	041b      	lsls	r3, r3, #16
 800e558:	43db      	mvns	r3, r3
 800e55a:	401a      	ands	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	605a      	str	r2, [r3, #4]
}
 800e560:	bf00      	nop
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685a      	ldr	r2, [r3, #4]
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	041b      	lsls	r3, r3, #16
 800e57e:	431a      	orrs	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	605a      	str	r2, [r3, #4]
}
 800e584:	bf00      	nop
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685a      	ldr	r2, [r3, #4]
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	43db      	mvns	r3, r3
 800e5a2:	401a      	ands	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	605a      	str	r2, [r3, #4]
}
 800e5a8:	bf00      	nop
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	683a      	ldr	r2, [r7, #0]
 800e5c2:	609a      	str	r2, [r3, #8]
}
 800e5c4:	bf00      	nop
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	041a      	lsls	r2, r3, #16
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	609a      	str	r2, [r3, #8]
}
 800e5e2:	bf00      	nop
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e5ee:	b480      	push	{r7}
 800e5f0:	b083      	sub	sp, #12
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
 800e5f6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68da      	ldr	r2, [r3, #12]
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	4013      	ands	r3, r2
 800e600:	683a      	ldr	r2, [r7, #0]
 800e602:	429a      	cmp	r2, r3
 800e604:	d101      	bne.n	800e60a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e606:	2301      	movs	r3, #1
 800e608:	e000      	b.n	800e60c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	69da      	ldr	r2, [r3, #28]
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	4013      	ands	r3, r2
 800e62a:	683a      	ldr	r2, [r7, #0]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d101      	bne.n	800e634 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e630:	2301      	movs	r3, #1
 800e632:	e000      	b.n	800e636 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	370c      	adds	r7, #12
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr
	...

0800e644 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e648:	2102      	movs	r1, #2
 800e64a:	4818      	ldr	r0, [pc, #96]	@ (800e6ac <HW_IPCC_Rx_Handler+0x68>)
 800e64c:	f7ff ffe4 	bl	800e618 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d008      	beq.n	800e668 <HW_IPCC_Rx_Handler+0x24>
 800e656:	4b15      	ldr	r3, [pc, #84]	@ (800e6ac <HW_IPCC_Rx_Handler+0x68>)
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	f003 0302 	and.w	r3, r3, #2
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d102      	bne.n	800e668 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800e662:	f000 f8d5 	bl	800e810 <HW_IPCC_SYS_EvtHandler>
 800e666:	e01e      	b.n	800e6a6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e668:	2101      	movs	r1, #1
 800e66a:	4810      	ldr	r0, [pc, #64]	@ (800e6ac <HW_IPCC_Rx_Handler+0x68>)
 800e66c:	f7ff ffd4 	bl	800e618 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d008      	beq.n	800e688 <HW_IPCC_Rx_Handler+0x44>
 800e676:	4b0d      	ldr	r3, [pc, #52]	@ (800e6ac <HW_IPCC_Rx_Handler+0x68>)
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	f003 0301 	and.w	r3, r3, #1
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d102      	bne.n	800e688 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800e682:	f000 f889 	bl	800e798 <HW_IPCC_BLE_EvtHandler>
 800e686:	e00e      	b.n	800e6a6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e688:	2108      	movs	r1, #8
 800e68a:	4808      	ldr	r0, [pc, #32]	@ (800e6ac <HW_IPCC_Rx_Handler+0x68>)
 800e68c:	f7ff ffc4 	bl	800e618 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d008      	beq.n	800e6a8 <HW_IPCC_Rx_Handler+0x64>
 800e696:	4b05      	ldr	r3, [pc, #20]	@ (800e6ac <HW_IPCC_Rx_Handler+0x68>)
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	f003 0308 	and.w	r3, r3, #8
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d102      	bne.n	800e6a8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e6a2:	f000 f901 	bl	800e8a8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e6a6:	bf00      	nop
 800e6a8:	bf00      	nop
}
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	58000c00 	.word	0x58000c00

0800e6b0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e6b4:	2102      	movs	r1, #2
 800e6b6:	4818      	ldr	r0, [pc, #96]	@ (800e718 <HW_IPCC_Tx_Handler+0x68>)
 800e6b8:	f7ff ff99 	bl	800e5ee <LL_C1_IPCC_IsActiveFlag_CHx>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d108      	bne.n	800e6d4 <HW_IPCC_Tx_Handler+0x24>
 800e6c2:	4b15      	ldr	r3, [pc, #84]	@ (800e718 <HW_IPCC_Tx_Handler+0x68>)
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d102      	bne.n	800e6d4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e6ce:	f000 f893 	bl	800e7f8 <HW_IPCC_SYS_CmdEvtHandler>
 800e6d2:	e01e      	b.n	800e712 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800e6d4:	2108      	movs	r1, #8
 800e6d6:	4810      	ldr	r0, [pc, #64]	@ (800e718 <HW_IPCC_Tx_Handler+0x68>)
 800e6d8:	f7ff ff89 	bl	800e5ee <LL_C1_IPCC_IsActiveFlag_CHx>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d108      	bne.n	800e6f4 <HW_IPCC_Tx_Handler+0x44>
 800e6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e718 <HW_IPCC_Tx_Handler+0x68>)
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d102      	bne.n	800e6f4 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800e6ee:	f000 f8bd 	bl	800e86c <HW_IPCC_MM_FreeBufHandler>
 800e6f2:	e00e      	b.n	800e712 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800e6f4:	2120      	movs	r1, #32
 800e6f6:	4808      	ldr	r0, [pc, #32]	@ (800e718 <HW_IPCC_Tx_Handler+0x68>)
 800e6f8:	f7ff ff79 	bl	800e5ee <LL_C1_IPCC_IsActiveFlag_CHx>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d108      	bne.n	800e714 <HW_IPCC_Tx_Handler+0x64>
 800e702:	4b05      	ldr	r3, [pc, #20]	@ (800e718 <HW_IPCC_Tx_Handler+0x68>)
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d102      	bne.n	800e714 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800e70e:	f000 f84f 	bl	800e7b0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800e712:	bf00      	nop
 800e714:	bf00      	nop
}
 800e716:	bd80      	pop	{r7, pc}
 800e718:	58000c00 	.word	0x58000c00

0800e71c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800e720:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e724:	f7ff fed3 	bl	800e4ce <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e728:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e72c:	f7ff fea4 	bl	800e478 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e730:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e734:	f7ff fe8c 	bl	800e450 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e738:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e73a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e73c:	f7ff fe78 	bl	800e430 <LL_PWR_EnableBootC2>

  return;
 800e740:	bf00      	nop
}
 800e742:	bd80      	pop	{r7, pc}

0800e744 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e748:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e74c:	f7ff fea6 	bl	800e49c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e750:	4806      	ldr	r0, [pc, #24]	@ (800e76c <HW_IPCC_Init+0x28>)
 800e752:	f7ff fee8 	bl	800e526 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e756:	4805      	ldr	r0, [pc, #20]	@ (800e76c <HW_IPCC_Init+0x28>)
 800e758:	f7ff fed5 	bl	800e506 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e75c:	202c      	movs	r0, #44	@ 0x2c
 800e75e:	f7f6 f9b2 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e762:	202d      	movs	r0, #45	@ 0x2d
 800e764:	f7f6 f9af 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

  return;
 800e768:	bf00      	nop
}
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	58000c00 	.word	0x58000c00

0800e770 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e774:	2101      	movs	r1, #1
 800e776:	4802      	ldr	r0, [pc, #8]	@ (800e780 <HW_IPCC_BLE_Init+0x10>)
 800e778:	f7ff ff0a 	bl	800e590 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e77c:	bf00      	nop
}
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	58000c00 	.word	0x58000c00

0800e784 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e788:	2101      	movs	r1, #1
 800e78a:	4802      	ldr	r0, [pc, #8]	@ (800e794 <HW_IPCC_BLE_SendCmd+0x10>)
 800e78c:	f7ff ff20 	bl	800e5d0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e790:	bf00      	nop
}
 800e792:	bd80      	pop	{r7, pc}
 800e794:	58000c00 	.word	0x58000c00

0800e798 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800e79c:	f7fb fb58 	bl	8009e50 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e7a0:	2101      	movs	r1, #1
 800e7a2:	4802      	ldr	r0, [pc, #8]	@ (800e7ac <HW_IPCC_BLE_EvtHandler+0x14>)
 800e7a4:	f7ff ff06 	bl	800e5b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e7a8:	bf00      	nop
}
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	58000c00 	.word	0x58000c00

0800e7b0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800e7b4:	2120      	movs	r1, #32
 800e7b6:	4803      	ldr	r0, [pc, #12]	@ (800e7c4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800e7b8:	f7ff fed8 	bl	800e56c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800e7bc:	f7fb fb78 	bl	8009eb0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800e7c0:	bf00      	nop
}
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	58000c00 	.word	0x58000c00

0800e7c8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e7cc:	2102      	movs	r1, #2
 800e7ce:	4802      	ldr	r0, [pc, #8]	@ (800e7d8 <HW_IPCC_SYS_Init+0x10>)
 800e7d0:	f7ff fede 	bl	800e590 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e7d4:	bf00      	nop
}
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	58000c00 	.word	0x58000c00

0800e7dc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e7e0:	2102      	movs	r1, #2
 800e7e2:	4804      	ldr	r0, [pc, #16]	@ (800e7f4 <HW_IPCC_SYS_SendCmd+0x18>)
 800e7e4:	f7ff fef4 	bl	800e5d0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e7e8:	2102      	movs	r1, #2
 800e7ea:	4802      	ldr	r0, [pc, #8]	@ (800e7f4 <HW_IPCC_SYS_SendCmd+0x18>)
 800e7ec:	f7ff feab 	bl	800e546 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e7f0:	bf00      	nop
}
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	58000c00 	.word	0x58000c00

0800e7f8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e7fc:	2102      	movs	r1, #2
 800e7fe:	4803      	ldr	r0, [pc, #12]	@ (800e80c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800e800:	f7ff feb4 	bl	800e56c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800e804:	f7fb fba4 	bl	8009f50 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800e808:	bf00      	nop
}
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	58000c00 	.word	0x58000c00

0800e810 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800e814:	f7fb fbb2 	bl	8009f7c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e818:	2102      	movs	r1, #2
 800e81a:	4802      	ldr	r0, [pc, #8]	@ (800e824 <HW_IPCC_SYS_EvtHandler+0x14>)
 800e81c:	f7ff feca 	bl	800e5b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e820:	bf00      	nop
}
 800e822:	bd80      	pop	{r7, pc}
 800e824:	58000c00 	.word	0x58000c00

0800e828 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e830:	2108      	movs	r1, #8
 800e832:	480c      	ldr	r0, [pc, #48]	@ (800e864 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e834:	f7ff fedb 	bl	800e5ee <LL_C1_IPCC_IsActiveFlag_CHx>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d007      	beq.n	800e84e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e83e:	4a0a      	ldr	r2, [pc, #40]	@ (800e868 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e844:	2108      	movs	r1, #8
 800e846:	4807      	ldr	r0, [pc, #28]	@ (800e864 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e848:	f7ff fe7d 	bl	800e546 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e84c:	e006      	b.n	800e85c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e852:	2108      	movs	r1, #8
 800e854:	4803      	ldr	r0, [pc, #12]	@ (800e864 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e856:	f7ff febb 	bl	800e5d0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e85a:	bf00      	nop
}
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	58000c00 	.word	0x58000c00
 800e868:	2001b3ec 	.word	0x2001b3ec

0800e86c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e870:	2108      	movs	r1, #8
 800e872:	4806      	ldr	r0, [pc, #24]	@ (800e88c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e874:	f7ff fe7a 	bl	800e56c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800e878:	4b05      	ldr	r3, [pc, #20]	@ (800e890 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e87e:	2108      	movs	r1, #8
 800e880:	4802      	ldr	r0, [pc, #8]	@ (800e88c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e882:	f7ff fea5 	bl	800e5d0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e886:	bf00      	nop
}
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	58000c00 	.word	0x58000c00
 800e890:	2001b3ec 	.word	0x2001b3ec

0800e894 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e894:	b580      	push	{r7, lr}
 800e896:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e898:	2108      	movs	r1, #8
 800e89a:	4802      	ldr	r0, [pc, #8]	@ (800e8a4 <HW_IPCC_TRACES_Init+0x10>)
 800e89c:	f7ff fe78 	bl	800e590 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e8a0:	bf00      	nop
}
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	58000c00 	.word	0x58000c00

0800e8a8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800e8ac:	f7fb fc0e 	bl	800a0cc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e8b0:	2108      	movs	r1, #8
 800e8b2:	4802      	ldr	r0, [pc, #8]	@ (800e8bc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800e8b4:	f7ff fe7e 	bl	800e5b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e8b8:	bf00      	nop
}
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	58000c00 	.word	0x58000c00

0800e8c0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e8c4:	4b05      	ldr	r3, [pc, #20]	@ (800e8dc <UTIL_LPM_Init+0x1c>)
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e8ca:	4b05      	ldr	r3, [pc, #20]	@ (800e8e0 <UTIL_LPM_Init+0x20>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e8d0:	bf00      	nop
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	2001b3f0 	.word	0x2001b3f0
 800e8e0:	2001b3f4 	.word	0x2001b3f4

0800e8e4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8f0:	f3ef 8310 	mrs	r3, PRIMASK
 800e8f4:	613b      	str	r3, [r7, #16]
  return(result);
 800e8f6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800e8f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e8fa:	b672      	cpsid	i
}
 800e8fc:	bf00      	nop
  
  switch(state)
 800e8fe:	78fb      	ldrb	r3, [r7, #3]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d008      	beq.n	800e916 <UTIL_LPM_SetOffMode+0x32>
 800e904:	2b01      	cmp	r3, #1
 800e906:	d10e      	bne.n	800e926 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800e908:	4b0d      	ldr	r3, [pc, #52]	@ (800e940 <UTIL_LPM_SetOffMode+0x5c>)
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4313      	orrs	r3, r2
 800e910:	4a0b      	ldr	r2, [pc, #44]	@ (800e940 <UTIL_LPM_SetOffMode+0x5c>)
 800e912:	6013      	str	r3, [r2, #0]
      break;
 800e914:	e008      	b.n	800e928 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	43da      	mvns	r2, r3
 800e91a:	4b09      	ldr	r3, [pc, #36]	@ (800e940 <UTIL_LPM_SetOffMode+0x5c>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4013      	ands	r3, r2
 800e920:	4a07      	ldr	r2, [pc, #28]	@ (800e940 <UTIL_LPM_SetOffMode+0x5c>)
 800e922:	6013      	str	r3, [r2, #0]
      break;
 800e924:	e000      	b.n	800e928 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800e926:	bf00      	nop
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f383 8810 	msr	PRIMASK, r3
}
 800e932:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e934:	bf00      	nop
 800e936:	371c      	adds	r7, #28
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr
 800e940:	2001b3f4 	.word	0x2001b3f4

0800e944 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e94a:	f3ef 8310 	mrs	r3, PRIMASK
 800e94e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e950:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800e952:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e954:	b672      	cpsid	i
}
 800e956:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800e958:	4b12      	ldr	r3, [pc, #72]	@ (800e9a4 <UTIL_LPM_EnterLowPower+0x60>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d006      	beq.n	800e96e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800e960:	4b11      	ldr	r3, [pc, #68]	@ (800e9a8 <UTIL_LPM_EnterLowPower+0x64>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800e966:	4b10      	ldr	r3, [pc, #64]	@ (800e9a8 <UTIL_LPM_EnterLowPower+0x64>)
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	4798      	blx	r3
 800e96c:	e010      	b.n	800e990 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800e96e:	4b0f      	ldr	r3, [pc, #60]	@ (800e9ac <UTIL_LPM_EnterLowPower+0x68>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d006      	beq.n	800e984 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800e976:	4b0c      	ldr	r3, [pc, #48]	@ (800e9a8 <UTIL_LPM_EnterLowPower+0x64>)
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800e97c:	4b0a      	ldr	r3, [pc, #40]	@ (800e9a8 <UTIL_LPM_EnterLowPower+0x64>)
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	4798      	blx	r3
 800e982:	e005      	b.n	800e990 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800e984:	4b08      	ldr	r3, [pc, #32]	@ (800e9a8 <UTIL_LPM_EnterLowPower+0x64>)
 800e986:	691b      	ldr	r3, [r3, #16]
 800e988:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800e98a:	4b07      	ldr	r3, [pc, #28]	@ (800e9a8 <UTIL_LPM_EnterLowPower+0x64>)
 800e98c:	695b      	ldr	r3, [r3, #20]
 800e98e:	4798      	blx	r3
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f383 8810 	msr	PRIMASK, r3
}
 800e99a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800e99c:	bf00      	nop
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	2001b3f0 	.word	0x2001b3f0
 800e9a8:	08012304 	.word	0x08012304
 800e9ac:	2001b3f4 	.word	0x2001b3f4

0800e9b0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b090      	sub	sp, #64	@ 0x40
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800e9b8:	4b73      	ldr	r3, [pc, #460]	@ (800eb88 <UTIL_SEQ_Run+0x1d8>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800e9be:	4b72      	ldr	r3, [pc, #456]	@ (800eb88 <UTIL_SEQ_Run+0x1d8>)
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4013      	ands	r3, r2
 800e9c6:	4a70      	ldr	r2, [pc, #448]	@ (800eb88 <UTIL_SEQ_Run+0x1d8>)
 800e9c8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800e9ca:	4b70      	ldr	r3, [pc, #448]	@ (800eb8c <UTIL_SEQ_Run+0x1dc>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e9d0:	4b6f      	ldr	r3, [pc, #444]	@ (800eb90 <UTIL_SEQ_Run+0x1e0>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e9d6:	4b6f      	ldr	r3, [pc, #444]	@ (800eb94 <UTIL_SEQ_Run+0x1e4>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800e9dc:	4b6e      	ldr	r3, [pc, #440]	@ (800eb98 <UTIL_SEQ_Run+0x1e8>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e9e2:	e08d      	b.n	800eb00 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e9e8:	e002      	b.n	800e9f0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800e9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e9f0:	4a6a      	ldr	r2, [pc, #424]	@ (800eb9c <UTIL_SEQ_Run+0x1ec>)
 800e9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9fa:	401a      	ands	r2, r3
 800e9fc:	4b62      	ldr	r3, [pc, #392]	@ (800eb88 <UTIL_SEQ_Run+0x1d8>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4013      	ands	r3, r2
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0f1      	beq.n	800e9ea <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800ea06:	4a65      	ldr	r2, [pc, #404]	@ (800eb9c <UTIL_SEQ_Run+0x1ec>)
 800ea08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea0a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea10:	401a      	ands	r2, r3
 800ea12:	4b5d      	ldr	r3, [pc, #372]	@ (800eb88 <UTIL_SEQ_Run+0x1d8>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4013      	ands	r3, r2
 800ea18:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ea1a:	4a60      	ldr	r2, [pc, #384]	@ (800eb9c <UTIL_SEQ_Run+0x1ec>)
 800ea1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea1e:	00db      	lsls	r3, r3, #3
 800ea20:	4413      	add	r3, r2
 800ea22:	685a      	ldr	r2, [r3, #4]
 800ea24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea26:	4013      	ands	r3, r2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d106      	bne.n	800ea3a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ea2c:	4a5b      	ldr	r2, [pc, #364]	@ (800eb9c <UTIL_SEQ_Run+0x1ec>)
 800ea2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea30:	00db      	lsls	r3, r3, #3
 800ea32:	4413      	add	r3, r2
 800ea34:	f04f 32ff 	mov.w	r2, #4294967295
 800ea38:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ea3a:	4a58      	ldr	r2, [pc, #352]	@ (800eb9c <UTIL_SEQ_Run+0x1ec>)
 800ea3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea3e:	00db      	lsls	r3, r3, #3
 800ea40:	4413      	add	r3, r2
 800ea42:	685a      	ldr	r2, [r3, #4]
 800ea44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea46:	4013      	ands	r3, r2
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f000 f9b3 	bl	800edb4 <SEQ_BitPosition>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	461a      	mov	r2, r3
 800ea52:	4b53      	ldr	r3, [pc, #332]	@ (800eba0 <UTIL_SEQ_Run+0x1f0>)
 800ea54:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ea56:	4a51      	ldr	r2, [pc, #324]	@ (800eb9c <UTIL_SEQ_Run+0x1ec>)
 800ea58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	4413      	add	r3, r2
 800ea5e:	685a      	ldr	r2, [r3, #4]
 800ea60:	4b4f      	ldr	r3, [pc, #316]	@ (800eba0 <UTIL_SEQ_Run+0x1f0>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2101      	movs	r1, #1
 800ea66:	fa01 f303 	lsl.w	r3, r1, r3
 800ea6a:	43db      	mvns	r3, r3
 800ea6c:	401a      	ands	r2, r3
 800ea6e:	494b      	ldr	r1, [pc, #300]	@ (800eb9c <UTIL_SEQ_Run+0x1ec>)
 800ea70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea72:	00db      	lsls	r3, r3, #3
 800ea74:	440b      	add	r3, r1
 800ea76:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea78:	f3ef 8310 	mrs	r3, PRIMASK
 800ea7c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ea7e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ea80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ea82:	b672      	cpsid	i
}
 800ea84:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ea86:	4b46      	ldr	r3, [pc, #280]	@ (800eba0 <UTIL_SEQ_Run+0x1f0>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea90:	43da      	mvns	r2, r3
 800ea92:	4b3e      	ldr	r3, [pc, #248]	@ (800eb8c <UTIL_SEQ_Run+0x1dc>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4013      	ands	r3, r2
 800ea98:	4a3c      	ldr	r2, [pc, #240]	@ (800eb8c <UTIL_SEQ_Run+0x1dc>)
 800ea9a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ea9c:	2302      	movs	r3, #2
 800ea9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eaa0:	e013      	b.n	800eaca <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800eaa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	4a3d      	ldr	r2, [pc, #244]	@ (800eb9c <UTIL_SEQ_Run+0x1ec>)
 800eaa8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800eaac:	4b3c      	ldr	r3, [pc, #240]	@ (800eba0 <UTIL_SEQ_Run+0x1f0>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2201      	movs	r2, #1
 800eab2:	fa02 f303 	lsl.w	r3, r2, r3
 800eab6:	43da      	mvns	r2, r3
 800eab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaba:	3b01      	subs	r3, #1
 800eabc:	400a      	ands	r2, r1
 800eabe:	4937      	ldr	r1, [pc, #220]	@ (800eb9c <UTIL_SEQ_Run+0x1ec>)
 800eac0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800eac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eac6:	3b01      	subs	r3, #1
 800eac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eaca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1e8      	bne.n	800eaa2 <UTIL_SEQ_Run+0xf2>
 800ead0:	6a3b      	ldr	r3, [r7, #32]
 800ead2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	f383 8810 	msr	PRIMASK, r3
}
 800eada:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800eadc:	4b30      	ldr	r3, [pc, #192]	@ (800eba0 <UTIL_SEQ_Run+0x1f0>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a30      	ldr	r2, [pc, #192]	@ (800eba4 <UTIL_SEQ_Run+0x1f4>)
 800eae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eae6:	4798      	blx	r3

    local_taskset = TaskSet;
 800eae8:	4b28      	ldr	r3, [pc, #160]	@ (800eb8c <UTIL_SEQ_Run+0x1dc>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800eaee:	4b28      	ldr	r3, [pc, #160]	@ (800eb90 <UTIL_SEQ_Run+0x1e0>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800eaf4:	4b27      	ldr	r3, [pc, #156]	@ (800eb94 <UTIL_SEQ_Run+0x1e4>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800eafa:	4b27      	ldr	r3, [pc, #156]	@ (800eb98 <UTIL_SEQ_Run+0x1e8>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800eb00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb04:	401a      	ands	r2, r3
 800eb06:	4b20      	ldr	r3, [pc, #128]	@ (800eb88 <UTIL_SEQ_Run+0x1d8>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4013      	ands	r3, r2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d005      	beq.n	800eb1c <UTIL_SEQ_Run+0x16c>
 800eb10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb14:	4013      	ands	r3, r2
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f43f af64 	beq.w	800e9e4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800eb1c:	4b20      	ldr	r3, [pc, #128]	@ (800eba0 <UTIL_SEQ_Run+0x1f0>)
 800eb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb22:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800eb24:	f000 f938 	bl	800ed98 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb28:	f3ef 8310 	mrs	r3, PRIMASK
 800eb2c:	613b      	str	r3, [r7, #16]
  return(result);
 800eb2e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800eb30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb32:	b672      	cpsid	i
}
 800eb34:	bf00      	nop
  local_taskset = TaskSet;
 800eb36:	4b15      	ldr	r3, [pc, #84]	@ (800eb8c <UTIL_SEQ_Run+0x1dc>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800eb3c:	4b14      	ldr	r3, [pc, #80]	@ (800eb90 <UTIL_SEQ_Run+0x1e0>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800eb42:	4b14      	ldr	r3, [pc, #80]	@ (800eb94 <UTIL_SEQ_Run+0x1e4>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800eb48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4c:	401a      	ands	r2, r3
 800eb4e:	4b0e      	ldr	r3, [pc, #56]	@ (800eb88 <UTIL_SEQ_Run+0x1d8>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	4013      	ands	r3, r2
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d107      	bne.n	800eb68 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800eb58:	4b0f      	ldr	r3, [pc, #60]	@ (800eb98 <UTIL_SEQ_Run+0x1e8>)
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb5e:	4013      	ands	r3, r2
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d101      	bne.n	800eb68 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800eb64:	f7f2 fabe 	bl	80010e4 <UTIL_SEQ_Idle>
 800eb68:	69fb      	ldr	r3, [r7, #28]
 800eb6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f383 8810 	msr	PRIMASK, r3
}
 800eb72:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800eb74:	f000 f917 	bl	800eda6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800eb78:	4a03      	ldr	r2, [pc, #12]	@ (800eb88 <UTIL_SEQ_Run+0x1d8>)
 800eb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb7c:	6013      	str	r3, [r2, #0]

  return;
 800eb7e:	bf00      	nop
}
 800eb80:	3740      	adds	r7, #64	@ 0x40
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20000038 	.word	0x20000038
 800eb8c:	2001b3f8 	.word	0x2001b3f8
 800eb90:	2001b3fc 	.word	0x2001b3fc
 800eb94:	20000034 	.word	0x20000034
 800eb98:	2001b400 	.word	0x2001b400
 800eb9c:	2001b488 	.word	0x2001b488
 800eba0:	2001b404 	.word	0x2001b404
 800eba4:	2001b408 	.word	0x2001b408

0800eba8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b088      	sub	sp, #32
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebb4:	f3ef 8310 	mrs	r3, PRIMASK
 800ebb8:	617b      	str	r3, [r7, #20]
  return(result);
 800ebba:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ebbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ebbe:	b672      	cpsid	i
}
 800ebc0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f000 f8f6 	bl	800edb4 <SEQ_BitPosition>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4a06      	ldr	r2, [pc, #24]	@ (800ebe8 <UTIL_SEQ_RegTask+0x40>)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebd8:	69bb      	ldr	r3, [r7, #24]
 800ebda:	f383 8810 	msr	PRIMASK, r3
}
 800ebde:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ebe0:	bf00      	nop
}
 800ebe2:	3720      	adds	r7, #32
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	2001b408 	.word	0x2001b408

0800ebec <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ebec:	b480      	push	{r7}
 800ebee:	b087      	sub	sp, #28
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebf6:	f3ef 8310 	mrs	r3, PRIMASK
 800ebfa:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ebfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec00:	b672      	cpsid	i
}
 800ec02:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ec04:	4b0d      	ldr	r3, [pc, #52]	@ (800ec3c <UTIL_SEQ_SetTask+0x50>)
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	4a0b      	ldr	r2, [pc, #44]	@ (800ec3c <UTIL_SEQ_SetTask+0x50>)
 800ec0e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ec10:	4a0b      	ldr	r2, [pc, #44]	@ (800ec40 <UTIL_SEQ_SetTask+0x54>)
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	431a      	orrs	r2, r3
 800ec1c:	4908      	ldr	r1, [pc, #32]	@ (800ec40 <UTIL_SEQ_SetTask+0x54>)
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	f383 8810 	msr	PRIMASK, r3
}
 800ec2e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ec30:	bf00      	nop
}
 800ec32:	371c      	adds	r7, #28
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr
 800ec3c:	2001b3f8 	.word	0x2001b3f8
 800ec40:	2001b488 	.word	0x2001b488

0800ec44 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ec44:	b480      	push	{r7}
 800ec46:	b087      	sub	sp, #28
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ec50:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec52:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ec54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec56:	b672      	cpsid	i
}
 800ec58:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	43da      	mvns	r2, r3
 800ec5e:	4b08      	ldr	r3, [pc, #32]	@ (800ec80 <UTIL_SEQ_PauseTask+0x3c>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4013      	ands	r3, r2
 800ec64:	4a06      	ldr	r2, [pc, #24]	@ (800ec80 <UTIL_SEQ_PauseTask+0x3c>)
 800ec66:	6013      	str	r3, [r2, #0]
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	f383 8810 	msr	PRIMASK, r3
}
 800ec72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ec74:	bf00      	nop
}
 800ec76:	371c      	adds	r7, #28
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr
 800ec80:	20000034 	.word	0x20000034

0800ec84 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ec84:	b480      	push	{r7}
 800ec86:	b087      	sub	sp, #28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ec90:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec92:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ec94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec96:	b672      	cpsid	i
}
 800ec98:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ec9a:	4b09      	ldr	r3, [pc, #36]	@ (800ecc0 <UTIL_SEQ_ResumeTask+0x3c>)
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4313      	orrs	r3, r2
 800eca2:	4a07      	ldr	r2, [pc, #28]	@ (800ecc0 <UTIL_SEQ_ResumeTask+0x3c>)
 800eca4:	6013      	str	r3, [r2, #0]
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	f383 8810 	msr	PRIMASK, r3
}
 800ecb0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ecb2:	bf00      	nop
}
 800ecb4:	371c      	adds	r7, #28
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop
 800ecc0:	20000034 	.word	0x20000034

0800ecc4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b087      	sub	sp, #28
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eccc:	f3ef 8310 	mrs	r3, PRIMASK
 800ecd0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ecd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecd6:	b672      	cpsid	i
}
 800ecd8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ecda:	4b09      	ldr	r3, [pc, #36]	@ (800ed00 <UTIL_SEQ_SetEvt+0x3c>)
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4313      	orrs	r3, r2
 800ece2:	4a07      	ldr	r2, [pc, #28]	@ (800ed00 <UTIL_SEQ_SetEvt+0x3c>)
 800ece4:	6013      	str	r3, [r2, #0]
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	f383 8810 	msr	PRIMASK, r3
}
 800ecf0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ecf2:	bf00      	nop
}
 800ecf4:	371c      	adds	r7, #28
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	2001b3fc 	.word	0x2001b3fc

0800ed04 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b088      	sub	sp, #32
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ed0c:	4b1f      	ldr	r3, [pc, #124]	@ (800ed8c <UTIL_SEQ_WaitEvt+0x88>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ed12:	4b1e      	ldr	r3, [pc, #120]	@ (800ed8c <UTIL_SEQ_WaitEvt+0x88>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed1a:	d102      	bne.n	800ed22 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	61fb      	str	r3, [r7, #28]
 800ed20:	e005      	b.n	800ed2e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800ed22:	4b1a      	ldr	r3, [pc, #104]	@ (800ed8c <UTIL_SEQ_WaitEvt+0x88>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	2201      	movs	r2, #1
 800ed28:	fa02 f303 	lsl.w	r3, r2, r3
 800ed2c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ed2e:	4b18      	ldr	r3, [pc, #96]	@ (800ed90 <UTIL_SEQ_WaitEvt+0x8c>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ed34:	4a16      	ldr	r2, [pc, #88]	@ (800ed90 <UTIL_SEQ_WaitEvt+0x8c>)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800ed3a:	e003      	b.n	800ed44 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800ed3c:	6879      	ldr	r1, [r7, #4]
 800ed3e:	69f8      	ldr	r0, [r7, #28]
 800ed40:	f7f2 f9d6 	bl	80010f0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ed44:	4b13      	ldr	r3, [pc, #76]	@ (800ed94 <UTIL_SEQ_WaitEvt+0x90>)
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d0f5      	beq.n	800ed3c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ed50:	4a0e      	ldr	r2, [pc, #56]	@ (800ed8c <UTIL_SEQ_WaitEvt+0x88>)
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed56:	f3ef 8310 	mrs	r3, PRIMASK
 800ed5a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ed5c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ed5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed60:	b672      	cpsid	i
}
 800ed62:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	43da      	mvns	r2, r3
 800ed68:	4b0a      	ldr	r3, [pc, #40]	@ (800ed94 <UTIL_SEQ_WaitEvt+0x90>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4013      	ands	r3, r2
 800ed6e:	4a09      	ldr	r2, [pc, #36]	@ (800ed94 <UTIL_SEQ_WaitEvt+0x90>)
 800ed70:	6013      	str	r3, [r2, #0]
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f383 8810 	msr	PRIMASK, r3
}
 800ed7c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ed7e:	4a04      	ldr	r2, [pc, #16]	@ (800ed90 <UTIL_SEQ_WaitEvt+0x8c>)
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	6013      	str	r3, [r2, #0]
  return;
 800ed84:	bf00      	nop
}
 800ed86:	3720      	adds	r7, #32
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	2001b404 	.word	0x2001b404
 800ed90:	2001b400 	.word	0x2001b400
 800ed94:	2001b3fc 	.word	0x2001b3fc

0800ed98 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ed98:	b480      	push	{r7}
 800ed9a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ed9c:	bf00      	nop
}
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr

0800eda6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800eda6:	b480      	push	{r7}
 800eda8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800edaa:	bf00      	nop
}
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b085      	sub	sp, #20
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800edbc:	2300      	movs	r3, #0
 800edbe:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edca:	d204      	bcs.n	800edd6 <SEQ_BitPosition+0x22>
 800edcc:	2310      	movs	r3, #16
 800edce:	73fb      	strb	r3, [r7, #15]
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	041b      	lsls	r3, r3, #16
 800edd4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eddc:	d205      	bcs.n	800edea <SEQ_BitPosition+0x36>
 800edde:	7bfb      	ldrb	r3, [r7, #15]
 800ede0:	3308      	adds	r3, #8
 800ede2:	73fb      	strb	r3, [r7, #15]
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	021b      	lsls	r3, r3, #8
 800ede8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800edf0:	d205      	bcs.n	800edfe <SEQ_BitPosition+0x4a>
 800edf2:	7bfb      	ldrb	r3, [r7, #15]
 800edf4:	3304      	adds	r3, #4
 800edf6:	73fb      	strb	r3, [r7, #15]
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	011b      	lsls	r3, r3, #4
 800edfc:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	0f1b      	lsrs	r3, r3, #28
 800ee02:	4a07      	ldr	r2, [pc, #28]	@ (800ee20 <SEQ_BitPosition+0x6c>)
 800ee04:	5cd2      	ldrb	r2, [r2, r3]
 800ee06:	7bfb      	ldrb	r3, [r7, #15]
 800ee08:	4413      	add	r3, r2
 800ee0a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ee0c:	7bfb      	ldrb	r3, [r7, #15]
 800ee0e:	f1c3 031f 	rsb	r3, r3, #31
 800ee12:	b2db      	uxtb	r3, r3
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3714      	adds	r7, #20
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr
 800ee20:	080123c4 	.word	0x080123c4

0800ee24 <std>:
 800ee24:	2300      	movs	r3, #0
 800ee26:	b510      	push	{r4, lr}
 800ee28:	4604      	mov	r4, r0
 800ee2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ee2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee32:	6083      	str	r3, [r0, #8]
 800ee34:	8181      	strh	r1, [r0, #12]
 800ee36:	6643      	str	r3, [r0, #100]	@ 0x64
 800ee38:	81c2      	strh	r2, [r0, #14]
 800ee3a:	6183      	str	r3, [r0, #24]
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	2208      	movs	r2, #8
 800ee40:	305c      	adds	r0, #92	@ 0x5c
 800ee42:	f000 f9f9 	bl	800f238 <memset>
 800ee46:	4b0d      	ldr	r3, [pc, #52]	@ (800ee7c <std+0x58>)
 800ee48:	6263      	str	r3, [r4, #36]	@ 0x24
 800ee4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee80 <std+0x5c>)
 800ee4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ee4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee84 <std+0x60>)
 800ee50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ee52:	4b0d      	ldr	r3, [pc, #52]	@ (800ee88 <std+0x64>)
 800ee54:	6323      	str	r3, [r4, #48]	@ 0x30
 800ee56:	4b0d      	ldr	r3, [pc, #52]	@ (800ee8c <std+0x68>)
 800ee58:	6224      	str	r4, [r4, #32]
 800ee5a:	429c      	cmp	r4, r3
 800ee5c:	d006      	beq.n	800ee6c <std+0x48>
 800ee5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ee62:	4294      	cmp	r4, r2
 800ee64:	d002      	beq.n	800ee6c <std+0x48>
 800ee66:	33d0      	adds	r3, #208	@ 0xd0
 800ee68:	429c      	cmp	r4, r3
 800ee6a:	d105      	bne.n	800ee78 <std+0x54>
 800ee6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee74:	f000 ba58 	b.w	800f328 <__retarget_lock_init_recursive>
 800ee78:	bd10      	pop	{r4, pc}
 800ee7a:	bf00      	nop
 800ee7c:	0800f089 	.word	0x0800f089
 800ee80:	0800f0ab 	.word	0x0800f0ab
 800ee84:	0800f0e3 	.word	0x0800f0e3
 800ee88:	0800f107 	.word	0x0800f107
 800ee8c:	2001b498 	.word	0x2001b498

0800ee90 <stdio_exit_handler>:
 800ee90:	4a02      	ldr	r2, [pc, #8]	@ (800ee9c <stdio_exit_handler+0xc>)
 800ee92:	4903      	ldr	r1, [pc, #12]	@ (800eea0 <stdio_exit_handler+0x10>)
 800ee94:	4803      	ldr	r0, [pc, #12]	@ (800eea4 <stdio_exit_handler+0x14>)
 800ee96:	f000 b869 	b.w	800ef6c <_fwalk_sglue>
 800ee9a:	bf00      	nop
 800ee9c:	2000003c 	.word	0x2000003c
 800eea0:	0800fbe1 	.word	0x0800fbe1
 800eea4:	2000004c 	.word	0x2000004c

0800eea8 <cleanup_stdio>:
 800eea8:	6841      	ldr	r1, [r0, #4]
 800eeaa:	4b0c      	ldr	r3, [pc, #48]	@ (800eedc <cleanup_stdio+0x34>)
 800eeac:	4299      	cmp	r1, r3
 800eeae:	b510      	push	{r4, lr}
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	d001      	beq.n	800eeb8 <cleanup_stdio+0x10>
 800eeb4:	f000 fe94 	bl	800fbe0 <_fflush_r>
 800eeb8:	68a1      	ldr	r1, [r4, #8]
 800eeba:	4b09      	ldr	r3, [pc, #36]	@ (800eee0 <cleanup_stdio+0x38>)
 800eebc:	4299      	cmp	r1, r3
 800eebe:	d002      	beq.n	800eec6 <cleanup_stdio+0x1e>
 800eec0:	4620      	mov	r0, r4
 800eec2:	f000 fe8d 	bl	800fbe0 <_fflush_r>
 800eec6:	68e1      	ldr	r1, [r4, #12]
 800eec8:	4b06      	ldr	r3, [pc, #24]	@ (800eee4 <cleanup_stdio+0x3c>)
 800eeca:	4299      	cmp	r1, r3
 800eecc:	d004      	beq.n	800eed8 <cleanup_stdio+0x30>
 800eece:	4620      	mov	r0, r4
 800eed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eed4:	f000 be84 	b.w	800fbe0 <_fflush_r>
 800eed8:	bd10      	pop	{r4, pc}
 800eeda:	bf00      	nop
 800eedc:	2001b498 	.word	0x2001b498
 800eee0:	2001b500 	.word	0x2001b500
 800eee4:	2001b568 	.word	0x2001b568

0800eee8 <global_stdio_init.part.0>:
 800eee8:	b510      	push	{r4, lr}
 800eeea:	4b0b      	ldr	r3, [pc, #44]	@ (800ef18 <global_stdio_init.part.0+0x30>)
 800eeec:	4c0b      	ldr	r4, [pc, #44]	@ (800ef1c <global_stdio_init.part.0+0x34>)
 800eeee:	4a0c      	ldr	r2, [pc, #48]	@ (800ef20 <global_stdio_init.part.0+0x38>)
 800eef0:	601a      	str	r2, [r3, #0]
 800eef2:	4620      	mov	r0, r4
 800eef4:	2200      	movs	r2, #0
 800eef6:	2104      	movs	r1, #4
 800eef8:	f7ff ff94 	bl	800ee24 <std>
 800eefc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ef00:	2201      	movs	r2, #1
 800ef02:	2109      	movs	r1, #9
 800ef04:	f7ff ff8e 	bl	800ee24 <std>
 800ef08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ef0c:	2202      	movs	r2, #2
 800ef0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef12:	2112      	movs	r1, #18
 800ef14:	f7ff bf86 	b.w	800ee24 <std>
 800ef18:	2001b5d0 	.word	0x2001b5d0
 800ef1c:	2001b498 	.word	0x2001b498
 800ef20:	0800ee91 	.word	0x0800ee91

0800ef24 <__sfp_lock_acquire>:
 800ef24:	4801      	ldr	r0, [pc, #4]	@ (800ef2c <__sfp_lock_acquire+0x8>)
 800ef26:	f000 ba00 	b.w	800f32a <__retarget_lock_acquire_recursive>
 800ef2a:	bf00      	nop
 800ef2c:	2001b5d9 	.word	0x2001b5d9

0800ef30 <__sfp_lock_release>:
 800ef30:	4801      	ldr	r0, [pc, #4]	@ (800ef38 <__sfp_lock_release+0x8>)
 800ef32:	f000 b9fb 	b.w	800f32c <__retarget_lock_release_recursive>
 800ef36:	bf00      	nop
 800ef38:	2001b5d9 	.word	0x2001b5d9

0800ef3c <__sinit>:
 800ef3c:	b510      	push	{r4, lr}
 800ef3e:	4604      	mov	r4, r0
 800ef40:	f7ff fff0 	bl	800ef24 <__sfp_lock_acquire>
 800ef44:	6a23      	ldr	r3, [r4, #32]
 800ef46:	b11b      	cbz	r3, 800ef50 <__sinit+0x14>
 800ef48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef4c:	f7ff bff0 	b.w	800ef30 <__sfp_lock_release>
 800ef50:	4b04      	ldr	r3, [pc, #16]	@ (800ef64 <__sinit+0x28>)
 800ef52:	6223      	str	r3, [r4, #32]
 800ef54:	4b04      	ldr	r3, [pc, #16]	@ (800ef68 <__sinit+0x2c>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d1f5      	bne.n	800ef48 <__sinit+0xc>
 800ef5c:	f7ff ffc4 	bl	800eee8 <global_stdio_init.part.0>
 800ef60:	e7f2      	b.n	800ef48 <__sinit+0xc>
 800ef62:	bf00      	nop
 800ef64:	0800eea9 	.word	0x0800eea9
 800ef68:	2001b5d0 	.word	0x2001b5d0

0800ef6c <_fwalk_sglue>:
 800ef6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef70:	4607      	mov	r7, r0
 800ef72:	4688      	mov	r8, r1
 800ef74:	4614      	mov	r4, r2
 800ef76:	2600      	movs	r6, #0
 800ef78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef7c:	f1b9 0901 	subs.w	r9, r9, #1
 800ef80:	d505      	bpl.n	800ef8e <_fwalk_sglue+0x22>
 800ef82:	6824      	ldr	r4, [r4, #0]
 800ef84:	2c00      	cmp	r4, #0
 800ef86:	d1f7      	bne.n	800ef78 <_fwalk_sglue+0xc>
 800ef88:	4630      	mov	r0, r6
 800ef8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef8e:	89ab      	ldrh	r3, [r5, #12]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d907      	bls.n	800efa4 <_fwalk_sglue+0x38>
 800ef94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	d003      	beq.n	800efa4 <_fwalk_sglue+0x38>
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	4638      	mov	r0, r7
 800efa0:	47c0      	blx	r8
 800efa2:	4306      	orrs	r6, r0
 800efa4:	3568      	adds	r5, #104	@ 0x68
 800efa6:	e7e9      	b.n	800ef7c <_fwalk_sglue+0x10>

0800efa8 <iprintf>:
 800efa8:	b40f      	push	{r0, r1, r2, r3}
 800efaa:	b507      	push	{r0, r1, r2, lr}
 800efac:	4906      	ldr	r1, [pc, #24]	@ (800efc8 <iprintf+0x20>)
 800efae:	ab04      	add	r3, sp, #16
 800efb0:	6808      	ldr	r0, [r1, #0]
 800efb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800efb6:	6881      	ldr	r1, [r0, #8]
 800efb8:	9301      	str	r3, [sp, #4]
 800efba:	f000 fae9 	bl	800f590 <_vfiprintf_r>
 800efbe:	b003      	add	sp, #12
 800efc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efc4:	b004      	add	sp, #16
 800efc6:	4770      	bx	lr
 800efc8:	20000048 	.word	0x20000048

0800efcc <_puts_r>:
 800efcc:	6a03      	ldr	r3, [r0, #32]
 800efce:	b570      	push	{r4, r5, r6, lr}
 800efd0:	6884      	ldr	r4, [r0, #8]
 800efd2:	4605      	mov	r5, r0
 800efd4:	460e      	mov	r6, r1
 800efd6:	b90b      	cbnz	r3, 800efdc <_puts_r+0x10>
 800efd8:	f7ff ffb0 	bl	800ef3c <__sinit>
 800efdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efde:	07db      	lsls	r3, r3, #31
 800efe0:	d405      	bmi.n	800efee <_puts_r+0x22>
 800efe2:	89a3      	ldrh	r3, [r4, #12]
 800efe4:	0598      	lsls	r0, r3, #22
 800efe6:	d402      	bmi.n	800efee <_puts_r+0x22>
 800efe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efea:	f000 f99e 	bl	800f32a <__retarget_lock_acquire_recursive>
 800efee:	89a3      	ldrh	r3, [r4, #12]
 800eff0:	0719      	lsls	r1, r3, #28
 800eff2:	d502      	bpl.n	800effa <_puts_r+0x2e>
 800eff4:	6923      	ldr	r3, [r4, #16]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d135      	bne.n	800f066 <_puts_r+0x9a>
 800effa:	4621      	mov	r1, r4
 800effc:	4628      	mov	r0, r5
 800effe:	f000 f8c5 	bl	800f18c <__swsetup_r>
 800f002:	b380      	cbz	r0, 800f066 <_puts_r+0x9a>
 800f004:	f04f 35ff 	mov.w	r5, #4294967295
 800f008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f00a:	07da      	lsls	r2, r3, #31
 800f00c:	d405      	bmi.n	800f01a <_puts_r+0x4e>
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	059b      	lsls	r3, r3, #22
 800f012:	d402      	bmi.n	800f01a <_puts_r+0x4e>
 800f014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f016:	f000 f989 	bl	800f32c <__retarget_lock_release_recursive>
 800f01a:	4628      	mov	r0, r5
 800f01c:	bd70      	pop	{r4, r5, r6, pc}
 800f01e:	2b00      	cmp	r3, #0
 800f020:	da04      	bge.n	800f02c <_puts_r+0x60>
 800f022:	69a2      	ldr	r2, [r4, #24]
 800f024:	429a      	cmp	r2, r3
 800f026:	dc17      	bgt.n	800f058 <_puts_r+0x8c>
 800f028:	290a      	cmp	r1, #10
 800f02a:	d015      	beq.n	800f058 <_puts_r+0x8c>
 800f02c:	6823      	ldr	r3, [r4, #0]
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	6022      	str	r2, [r4, #0]
 800f032:	7019      	strb	r1, [r3, #0]
 800f034:	68a3      	ldr	r3, [r4, #8]
 800f036:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f03a:	3b01      	subs	r3, #1
 800f03c:	60a3      	str	r3, [r4, #8]
 800f03e:	2900      	cmp	r1, #0
 800f040:	d1ed      	bne.n	800f01e <_puts_r+0x52>
 800f042:	2b00      	cmp	r3, #0
 800f044:	da11      	bge.n	800f06a <_puts_r+0x9e>
 800f046:	4622      	mov	r2, r4
 800f048:	210a      	movs	r1, #10
 800f04a:	4628      	mov	r0, r5
 800f04c:	f000 f85f 	bl	800f10e <__swbuf_r>
 800f050:	3001      	adds	r0, #1
 800f052:	d0d7      	beq.n	800f004 <_puts_r+0x38>
 800f054:	250a      	movs	r5, #10
 800f056:	e7d7      	b.n	800f008 <_puts_r+0x3c>
 800f058:	4622      	mov	r2, r4
 800f05a:	4628      	mov	r0, r5
 800f05c:	f000 f857 	bl	800f10e <__swbuf_r>
 800f060:	3001      	adds	r0, #1
 800f062:	d1e7      	bne.n	800f034 <_puts_r+0x68>
 800f064:	e7ce      	b.n	800f004 <_puts_r+0x38>
 800f066:	3e01      	subs	r6, #1
 800f068:	e7e4      	b.n	800f034 <_puts_r+0x68>
 800f06a:	6823      	ldr	r3, [r4, #0]
 800f06c:	1c5a      	adds	r2, r3, #1
 800f06e:	6022      	str	r2, [r4, #0]
 800f070:	220a      	movs	r2, #10
 800f072:	701a      	strb	r2, [r3, #0]
 800f074:	e7ee      	b.n	800f054 <_puts_r+0x88>
	...

0800f078 <puts>:
 800f078:	4b02      	ldr	r3, [pc, #8]	@ (800f084 <puts+0xc>)
 800f07a:	4601      	mov	r1, r0
 800f07c:	6818      	ldr	r0, [r3, #0]
 800f07e:	f7ff bfa5 	b.w	800efcc <_puts_r>
 800f082:	bf00      	nop
 800f084:	20000048 	.word	0x20000048

0800f088 <__sread>:
 800f088:	b510      	push	{r4, lr}
 800f08a:	460c      	mov	r4, r1
 800f08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f090:	f000 f8fc 	bl	800f28c <_read_r>
 800f094:	2800      	cmp	r0, #0
 800f096:	bfab      	itete	ge
 800f098:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f09a:	89a3      	ldrhlt	r3, [r4, #12]
 800f09c:	181b      	addge	r3, r3, r0
 800f09e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f0a2:	bfac      	ite	ge
 800f0a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f0a6:	81a3      	strhlt	r3, [r4, #12]
 800f0a8:	bd10      	pop	{r4, pc}

0800f0aa <__swrite>:
 800f0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ae:	461f      	mov	r7, r3
 800f0b0:	898b      	ldrh	r3, [r1, #12]
 800f0b2:	05db      	lsls	r3, r3, #23
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	4616      	mov	r6, r2
 800f0ba:	d505      	bpl.n	800f0c8 <__swrite+0x1e>
 800f0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0c0:	2302      	movs	r3, #2
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f000 f8d0 	bl	800f268 <_lseek_r>
 800f0c8:	89a3      	ldrh	r3, [r4, #12]
 800f0ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0d2:	81a3      	strh	r3, [r4, #12]
 800f0d4:	4632      	mov	r2, r6
 800f0d6:	463b      	mov	r3, r7
 800f0d8:	4628      	mov	r0, r5
 800f0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0de:	f000 b8e7 	b.w	800f2b0 <_write_r>

0800f0e2 <__sseek>:
 800f0e2:	b510      	push	{r4, lr}
 800f0e4:	460c      	mov	r4, r1
 800f0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ea:	f000 f8bd 	bl	800f268 <_lseek_r>
 800f0ee:	1c43      	adds	r3, r0, #1
 800f0f0:	89a3      	ldrh	r3, [r4, #12]
 800f0f2:	bf15      	itete	ne
 800f0f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f0f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f0fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f0fe:	81a3      	strheq	r3, [r4, #12]
 800f100:	bf18      	it	ne
 800f102:	81a3      	strhne	r3, [r4, #12]
 800f104:	bd10      	pop	{r4, pc}

0800f106 <__sclose>:
 800f106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f10a:	f000 b89d 	b.w	800f248 <_close_r>

0800f10e <__swbuf_r>:
 800f10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f110:	460e      	mov	r6, r1
 800f112:	4614      	mov	r4, r2
 800f114:	4605      	mov	r5, r0
 800f116:	b118      	cbz	r0, 800f120 <__swbuf_r+0x12>
 800f118:	6a03      	ldr	r3, [r0, #32]
 800f11a:	b90b      	cbnz	r3, 800f120 <__swbuf_r+0x12>
 800f11c:	f7ff ff0e 	bl	800ef3c <__sinit>
 800f120:	69a3      	ldr	r3, [r4, #24]
 800f122:	60a3      	str	r3, [r4, #8]
 800f124:	89a3      	ldrh	r3, [r4, #12]
 800f126:	071a      	lsls	r2, r3, #28
 800f128:	d501      	bpl.n	800f12e <__swbuf_r+0x20>
 800f12a:	6923      	ldr	r3, [r4, #16]
 800f12c:	b943      	cbnz	r3, 800f140 <__swbuf_r+0x32>
 800f12e:	4621      	mov	r1, r4
 800f130:	4628      	mov	r0, r5
 800f132:	f000 f82b 	bl	800f18c <__swsetup_r>
 800f136:	b118      	cbz	r0, 800f140 <__swbuf_r+0x32>
 800f138:	f04f 37ff 	mov.w	r7, #4294967295
 800f13c:	4638      	mov	r0, r7
 800f13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	6922      	ldr	r2, [r4, #16]
 800f144:	1a98      	subs	r0, r3, r2
 800f146:	6963      	ldr	r3, [r4, #20]
 800f148:	b2f6      	uxtb	r6, r6
 800f14a:	4283      	cmp	r3, r0
 800f14c:	4637      	mov	r7, r6
 800f14e:	dc05      	bgt.n	800f15c <__swbuf_r+0x4e>
 800f150:	4621      	mov	r1, r4
 800f152:	4628      	mov	r0, r5
 800f154:	f000 fd44 	bl	800fbe0 <_fflush_r>
 800f158:	2800      	cmp	r0, #0
 800f15a:	d1ed      	bne.n	800f138 <__swbuf_r+0x2a>
 800f15c:	68a3      	ldr	r3, [r4, #8]
 800f15e:	3b01      	subs	r3, #1
 800f160:	60a3      	str	r3, [r4, #8]
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	1c5a      	adds	r2, r3, #1
 800f166:	6022      	str	r2, [r4, #0]
 800f168:	701e      	strb	r6, [r3, #0]
 800f16a:	6962      	ldr	r2, [r4, #20]
 800f16c:	1c43      	adds	r3, r0, #1
 800f16e:	429a      	cmp	r2, r3
 800f170:	d004      	beq.n	800f17c <__swbuf_r+0x6e>
 800f172:	89a3      	ldrh	r3, [r4, #12]
 800f174:	07db      	lsls	r3, r3, #31
 800f176:	d5e1      	bpl.n	800f13c <__swbuf_r+0x2e>
 800f178:	2e0a      	cmp	r6, #10
 800f17a:	d1df      	bne.n	800f13c <__swbuf_r+0x2e>
 800f17c:	4621      	mov	r1, r4
 800f17e:	4628      	mov	r0, r5
 800f180:	f000 fd2e 	bl	800fbe0 <_fflush_r>
 800f184:	2800      	cmp	r0, #0
 800f186:	d0d9      	beq.n	800f13c <__swbuf_r+0x2e>
 800f188:	e7d6      	b.n	800f138 <__swbuf_r+0x2a>
	...

0800f18c <__swsetup_r>:
 800f18c:	b538      	push	{r3, r4, r5, lr}
 800f18e:	4b29      	ldr	r3, [pc, #164]	@ (800f234 <__swsetup_r+0xa8>)
 800f190:	4605      	mov	r5, r0
 800f192:	6818      	ldr	r0, [r3, #0]
 800f194:	460c      	mov	r4, r1
 800f196:	b118      	cbz	r0, 800f1a0 <__swsetup_r+0x14>
 800f198:	6a03      	ldr	r3, [r0, #32]
 800f19a:	b90b      	cbnz	r3, 800f1a0 <__swsetup_r+0x14>
 800f19c:	f7ff fece 	bl	800ef3c <__sinit>
 800f1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1a4:	0719      	lsls	r1, r3, #28
 800f1a6:	d422      	bmi.n	800f1ee <__swsetup_r+0x62>
 800f1a8:	06da      	lsls	r2, r3, #27
 800f1aa:	d407      	bmi.n	800f1bc <__swsetup_r+0x30>
 800f1ac:	2209      	movs	r2, #9
 800f1ae:	602a      	str	r2, [r5, #0]
 800f1b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1b4:	81a3      	strh	r3, [r4, #12]
 800f1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ba:	e033      	b.n	800f224 <__swsetup_r+0x98>
 800f1bc:	0758      	lsls	r0, r3, #29
 800f1be:	d512      	bpl.n	800f1e6 <__swsetup_r+0x5a>
 800f1c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1c2:	b141      	cbz	r1, 800f1d6 <__swsetup_r+0x4a>
 800f1c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1c8:	4299      	cmp	r1, r3
 800f1ca:	d002      	beq.n	800f1d2 <__swsetup_r+0x46>
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	f000 f8bd 	bl	800f34c <_free_r>
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1dc:	81a3      	strh	r3, [r4, #12]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	6063      	str	r3, [r4, #4]
 800f1e2:	6923      	ldr	r3, [r4, #16]
 800f1e4:	6023      	str	r3, [r4, #0]
 800f1e6:	89a3      	ldrh	r3, [r4, #12]
 800f1e8:	f043 0308 	orr.w	r3, r3, #8
 800f1ec:	81a3      	strh	r3, [r4, #12]
 800f1ee:	6923      	ldr	r3, [r4, #16]
 800f1f0:	b94b      	cbnz	r3, 800f206 <__swsetup_r+0x7a>
 800f1f2:	89a3      	ldrh	r3, [r4, #12]
 800f1f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1fc:	d003      	beq.n	800f206 <__swsetup_r+0x7a>
 800f1fe:	4621      	mov	r1, r4
 800f200:	4628      	mov	r0, r5
 800f202:	f000 fd3b 	bl	800fc7c <__smakebuf_r>
 800f206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f20a:	f013 0201 	ands.w	r2, r3, #1
 800f20e:	d00a      	beq.n	800f226 <__swsetup_r+0x9a>
 800f210:	2200      	movs	r2, #0
 800f212:	60a2      	str	r2, [r4, #8]
 800f214:	6962      	ldr	r2, [r4, #20]
 800f216:	4252      	negs	r2, r2
 800f218:	61a2      	str	r2, [r4, #24]
 800f21a:	6922      	ldr	r2, [r4, #16]
 800f21c:	b942      	cbnz	r2, 800f230 <__swsetup_r+0xa4>
 800f21e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f222:	d1c5      	bne.n	800f1b0 <__swsetup_r+0x24>
 800f224:	bd38      	pop	{r3, r4, r5, pc}
 800f226:	0799      	lsls	r1, r3, #30
 800f228:	bf58      	it	pl
 800f22a:	6962      	ldrpl	r2, [r4, #20]
 800f22c:	60a2      	str	r2, [r4, #8]
 800f22e:	e7f4      	b.n	800f21a <__swsetup_r+0x8e>
 800f230:	2000      	movs	r0, #0
 800f232:	e7f7      	b.n	800f224 <__swsetup_r+0x98>
 800f234:	20000048 	.word	0x20000048

0800f238 <memset>:
 800f238:	4402      	add	r2, r0
 800f23a:	4603      	mov	r3, r0
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d100      	bne.n	800f242 <memset+0xa>
 800f240:	4770      	bx	lr
 800f242:	f803 1b01 	strb.w	r1, [r3], #1
 800f246:	e7f9      	b.n	800f23c <memset+0x4>

0800f248 <_close_r>:
 800f248:	b538      	push	{r3, r4, r5, lr}
 800f24a:	4d06      	ldr	r5, [pc, #24]	@ (800f264 <_close_r+0x1c>)
 800f24c:	2300      	movs	r3, #0
 800f24e:	4604      	mov	r4, r0
 800f250:	4608      	mov	r0, r1
 800f252:	602b      	str	r3, [r5, #0]
 800f254:	f7f3 fd17 	bl	8002c86 <_close>
 800f258:	1c43      	adds	r3, r0, #1
 800f25a:	d102      	bne.n	800f262 <_close_r+0x1a>
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	b103      	cbz	r3, 800f262 <_close_r+0x1a>
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	bd38      	pop	{r3, r4, r5, pc}
 800f264:	2001b5d4 	.word	0x2001b5d4

0800f268 <_lseek_r>:
 800f268:	b538      	push	{r3, r4, r5, lr}
 800f26a:	4d07      	ldr	r5, [pc, #28]	@ (800f288 <_lseek_r+0x20>)
 800f26c:	4604      	mov	r4, r0
 800f26e:	4608      	mov	r0, r1
 800f270:	4611      	mov	r1, r2
 800f272:	2200      	movs	r2, #0
 800f274:	602a      	str	r2, [r5, #0]
 800f276:	461a      	mov	r2, r3
 800f278:	f7f3 fd2c 	bl	8002cd4 <_lseek>
 800f27c:	1c43      	adds	r3, r0, #1
 800f27e:	d102      	bne.n	800f286 <_lseek_r+0x1e>
 800f280:	682b      	ldr	r3, [r5, #0]
 800f282:	b103      	cbz	r3, 800f286 <_lseek_r+0x1e>
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	bd38      	pop	{r3, r4, r5, pc}
 800f288:	2001b5d4 	.word	0x2001b5d4

0800f28c <_read_r>:
 800f28c:	b538      	push	{r3, r4, r5, lr}
 800f28e:	4d07      	ldr	r5, [pc, #28]	@ (800f2ac <_read_r+0x20>)
 800f290:	4604      	mov	r4, r0
 800f292:	4608      	mov	r0, r1
 800f294:	4611      	mov	r1, r2
 800f296:	2200      	movs	r2, #0
 800f298:	602a      	str	r2, [r5, #0]
 800f29a:	461a      	mov	r2, r3
 800f29c:	f7f3 fcd6 	bl	8002c4c <_read>
 800f2a0:	1c43      	adds	r3, r0, #1
 800f2a2:	d102      	bne.n	800f2aa <_read_r+0x1e>
 800f2a4:	682b      	ldr	r3, [r5, #0]
 800f2a6:	b103      	cbz	r3, 800f2aa <_read_r+0x1e>
 800f2a8:	6023      	str	r3, [r4, #0]
 800f2aa:	bd38      	pop	{r3, r4, r5, pc}
 800f2ac:	2001b5d4 	.word	0x2001b5d4

0800f2b0 <_write_r>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	4d07      	ldr	r5, [pc, #28]	@ (800f2d0 <_write_r+0x20>)
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	4608      	mov	r0, r1
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	602a      	str	r2, [r5, #0]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	f7f2 fe1b 	bl	8001efa <_write>
 800f2c4:	1c43      	adds	r3, r0, #1
 800f2c6:	d102      	bne.n	800f2ce <_write_r+0x1e>
 800f2c8:	682b      	ldr	r3, [r5, #0]
 800f2ca:	b103      	cbz	r3, 800f2ce <_write_r+0x1e>
 800f2cc:	6023      	str	r3, [r4, #0]
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	2001b5d4 	.word	0x2001b5d4

0800f2d4 <__errno>:
 800f2d4:	4b01      	ldr	r3, [pc, #4]	@ (800f2dc <__errno+0x8>)
 800f2d6:	6818      	ldr	r0, [r3, #0]
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop
 800f2dc:	20000048 	.word	0x20000048

0800f2e0 <__libc_init_array>:
 800f2e0:	b570      	push	{r4, r5, r6, lr}
 800f2e2:	4d0d      	ldr	r5, [pc, #52]	@ (800f318 <__libc_init_array+0x38>)
 800f2e4:	4c0d      	ldr	r4, [pc, #52]	@ (800f31c <__libc_init_array+0x3c>)
 800f2e6:	1b64      	subs	r4, r4, r5
 800f2e8:	10a4      	asrs	r4, r4, #2
 800f2ea:	2600      	movs	r6, #0
 800f2ec:	42a6      	cmp	r6, r4
 800f2ee:	d109      	bne.n	800f304 <__libc_init_array+0x24>
 800f2f0:	4d0b      	ldr	r5, [pc, #44]	@ (800f320 <__libc_init_array+0x40>)
 800f2f2:	4c0c      	ldr	r4, [pc, #48]	@ (800f324 <__libc_init_array+0x44>)
 800f2f4:	f001 fcbc 	bl	8010c70 <_init>
 800f2f8:	1b64      	subs	r4, r4, r5
 800f2fa:	10a4      	asrs	r4, r4, #2
 800f2fc:	2600      	movs	r6, #0
 800f2fe:	42a6      	cmp	r6, r4
 800f300:	d105      	bne.n	800f30e <__libc_init_array+0x2e>
 800f302:	bd70      	pop	{r4, r5, r6, pc}
 800f304:	f855 3b04 	ldr.w	r3, [r5], #4
 800f308:	4798      	blx	r3
 800f30a:	3601      	adds	r6, #1
 800f30c:	e7ee      	b.n	800f2ec <__libc_init_array+0xc>
 800f30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f312:	4798      	blx	r3
 800f314:	3601      	adds	r6, #1
 800f316:	e7f2      	b.n	800f2fe <__libc_init_array+0x1e>
 800f318:	08012450 	.word	0x08012450
 800f31c:	08012450 	.word	0x08012450
 800f320:	08012450 	.word	0x08012450
 800f324:	08012454 	.word	0x08012454

0800f328 <__retarget_lock_init_recursive>:
 800f328:	4770      	bx	lr

0800f32a <__retarget_lock_acquire_recursive>:
 800f32a:	4770      	bx	lr

0800f32c <__retarget_lock_release_recursive>:
 800f32c:	4770      	bx	lr

0800f32e <memcpy>:
 800f32e:	440a      	add	r2, r1
 800f330:	4291      	cmp	r1, r2
 800f332:	f100 33ff 	add.w	r3, r0, #4294967295
 800f336:	d100      	bne.n	800f33a <memcpy+0xc>
 800f338:	4770      	bx	lr
 800f33a:	b510      	push	{r4, lr}
 800f33c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f340:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f344:	4291      	cmp	r1, r2
 800f346:	d1f9      	bne.n	800f33c <memcpy+0xe>
 800f348:	bd10      	pop	{r4, pc}
	...

0800f34c <_free_r>:
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	4605      	mov	r5, r0
 800f350:	2900      	cmp	r1, #0
 800f352:	d041      	beq.n	800f3d8 <_free_r+0x8c>
 800f354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f358:	1f0c      	subs	r4, r1, #4
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	bfb8      	it	lt
 800f35e:	18e4      	addlt	r4, r4, r3
 800f360:	f000 f8e0 	bl	800f524 <__malloc_lock>
 800f364:	4a1d      	ldr	r2, [pc, #116]	@ (800f3dc <_free_r+0x90>)
 800f366:	6813      	ldr	r3, [r2, #0]
 800f368:	b933      	cbnz	r3, 800f378 <_free_r+0x2c>
 800f36a:	6063      	str	r3, [r4, #4]
 800f36c:	6014      	str	r4, [r2, #0]
 800f36e:	4628      	mov	r0, r5
 800f370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f374:	f000 b8dc 	b.w	800f530 <__malloc_unlock>
 800f378:	42a3      	cmp	r3, r4
 800f37a:	d908      	bls.n	800f38e <_free_r+0x42>
 800f37c:	6820      	ldr	r0, [r4, #0]
 800f37e:	1821      	adds	r1, r4, r0
 800f380:	428b      	cmp	r3, r1
 800f382:	bf01      	itttt	eq
 800f384:	6819      	ldreq	r1, [r3, #0]
 800f386:	685b      	ldreq	r3, [r3, #4]
 800f388:	1809      	addeq	r1, r1, r0
 800f38a:	6021      	streq	r1, [r4, #0]
 800f38c:	e7ed      	b.n	800f36a <_free_r+0x1e>
 800f38e:	461a      	mov	r2, r3
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	b10b      	cbz	r3, 800f398 <_free_r+0x4c>
 800f394:	42a3      	cmp	r3, r4
 800f396:	d9fa      	bls.n	800f38e <_free_r+0x42>
 800f398:	6811      	ldr	r1, [r2, #0]
 800f39a:	1850      	adds	r0, r2, r1
 800f39c:	42a0      	cmp	r0, r4
 800f39e:	d10b      	bne.n	800f3b8 <_free_r+0x6c>
 800f3a0:	6820      	ldr	r0, [r4, #0]
 800f3a2:	4401      	add	r1, r0
 800f3a4:	1850      	adds	r0, r2, r1
 800f3a6:	4283      	cmp	r3, r0
 800f3a8:	6011      	str	r1, [r2, #0]
 800f3aa:	d1e0      	bne.n	800f36e <_free_r+0x22>
 800f3ac:	6818      	ldr	r0, [r3, #0]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	6053      	str	r3, [r2, #4]
 800f3b2:	4408      	add	r0, r1
 800f3b4:	6010      	str	r0, [r2, #0]
 800f3b6:	e7da      	b.n	800f36e <_free_r+0x22>
 800f3b8:	d902      	bls.n	800f3c0 <_free_r+0x74>
 800f3ba:	230c      	movs	r3, #12
 800f3bc:	602b      	str	r3, [r5, #0]
 800f3be:	e7d6      	b.n	800f36e <_free_r+0x22>
 800f3c0:	6820      	ldr	r0, [r4, #0]
 800f3c2:	1821      	adds	r1, r4, r0
 800f3c4:	428b      	cmp	r3, r1
 800f3c6:	bf04      	itt	eq
 800f3c8:	6819      	ldreq	r1, [r3, #0]
 800f3ca:	685b      	ldreq	r3, [r3, #4]
 800f3cc:	6063      	str	r3, [r4, #4]
 800f3ce:	bf04      	itt	eq
 800f3d0:	1809      	addeq	r1, r1, r0
 800f3d2:	6021      	streq	r1, [r4, #0]
 800f3d4:	6054      	str	r4, [r2, #4]
 800f3d6:	e7ca      	b.n	800f36e <_free_r+0x22>
 800f3d8:	bd38      	pop	{r3, r4, r5, pc}
 800f3da:	bf00      	nop
 800f3dc:	2001b5e0 	.word	0x2001b5e0

0800f3e0 <sbrk_aligned>:
 800f3e0:	b570      	push	{r4, r5, r6, lr}
 800f3e2:	4e0f      	ldr	r6, [pc, #60]	@ (800f420 <sbrk_aligned+0x40>)
 800f3e4:	460c      	mov	r4, r1
 800f3e6:	6831      	ldr	r1, [r6, #0]
 800f3e8:	4605      	mov	r5, r0
 800f3ea:	b911      	cbnz	r1, 800f3f2 <sbrk_aligned+0x12>
 800f3ec:	f000 fca4 	bl	800fd38 <_sbrk_r>
 800f3f0:	6030      	str	r0, [r6, #0]
 800f3f2:	4621      	mov	r1, r4
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	f000 fc9f 	bl	800fd38 <_sbrk_r>
 800f3fa:	1c43      	adds	r3, r0, #1
 800f3fc:	d103      	bne.n	800f406 <sbrk_aligned+0x26>
 800f3fe:	f04f 34ff 	mov.w	r4, #4294967295
 800f402:	4620      	mov	r0, r4
 800f404:	bd70      	pop	{r4, r5, r6, pc}
 800f406:	1cc4      	adds	r4, r0, #3
 800f408:	f024 0403 	bic.w	r4, r4, #3
 800f40c:	42a0      	cmp	r0, r4
 800f40e:	d0f8      	beq.n	800f402 <sbrk_aligned+0x22>
 800f410:	1a21      	subs	r1, r4, r0
 800f412:	4628      	mov	r0, r5
 800f414:	f000 fc90 	bl	800fd38 <_sbrk_r>
 800f418:	3001      	adds	r0, #1
 800f41a:	d1f2      	bne.n	800f402 <sbrk_aligned+0x22>
 800f41c:	e7ef      	b.n	800f3fe <sbrk_aligned+0x1e>
 800f41e:	bf00      	nop
 800f420:	2001b5dc 	.word	0x2001b5dc

0800f424 <_malloc_r>:
 800f424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f428:	1ccd      	adds	r5, r1, #3
 800f42a:	f025 0503 	bic.w	r5, r5, #3
 800f42e:	3508      	adds	r5, #8
 800f430:	2d0c      	cmp	r5, #12
 800f432:	bf38      	it	cc
 800f434:	250c      	movcc	r5, #12
 800f436:	2d00      	cmp	r5, #0
 800f438:	4606      	mov	r6, r0
 800f43a:	db01      	blt.n	800f440 <_malloc_r+0x1c>
 800f43c:	42a9      	cmp	r1, r5
 800f43e:	d904      	bls.n	800f44a <_malloc_r+0x26>
 800f440:	230c      	movs	r3, #12
 800f442:	6033      	str	r3, [r6, #0]
 800f444:	2000      	movs	r0, #0
 800f446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f44a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f520 <_malloc_r+0xfc>
 800f44e:	f000 f869 	bl	800f524 <__malloc_lock>
 800f452:	f8d8 3000 	ldr.w	r3, [r8]
 800f456:	461c      	mov	r4, r3
 800f458:	bb44      	cbnz	r4, 800f4ac <_malloc_r+0x88>
 800f45a:	4629      	mov	r1, r5
 800f45c:	4630      	mov	r0, r6
 800f45e:	f7ff ffbf 	bl	800f3e0 <sbrk_aligned>
 800f462:	1c43      	adds	r3, r0, #1
 800f464:	4604      	mov	r4, r0
 800f466:	d158      	bne.n	800f51a <_malloc_r+0xf6>
 800f468:	f8d8 4000 	ldr.w	r4, [r8]
 800f46c:	4627      	mov	r7, r4
 800f46e:	2f00      	cmp	r7, #0
 800f470:	d143      	bne.n	800f4fa <_malloc_r+0xd6>
 800f472:	2c00      	cmp	r4, #0
 800f474:	d04b      	beq.n	800f50e <_malloc_r+0xea>
 800f476:	6823      	ldr	r3, [r4, #0]
 800f478:	4639      	mov	r1, r7
 800f47a:	4630      	mov	r0, r6
 800f47c:	eb04 0903 	add.w	r9, r4, r3
 800f480:	f000 fc5a 	bl	800fd38 <_sbrk_r>
 800f484:	4581      	cmp	r9, r0
 800f486:	d142      	bne.n	800f50e <_malloc_r+0xea>
 800f488:	6821      	ldr	r1, [r4, #0]
 800f48a:	1a6d      	subs	r5, r5, r1
 800f48c:	4629      	mov	r1, r5
 800f48e:	4630      	mov	r0, r6
 800f490:	f7ff ffa6 	bl	800f3e0 <sbrk_aligned>
 800f494:	3001      	adds	r0, #1
 800f496:	d03a      	beq.n	800f50e <_malloc_r+0xea>
 800f498:	6823      	ldr	r3, [r4, #0]
 800f49a:	442b      	add	r3, r5
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	f8d8 3000 	ldr.w	r3, [r8]
 800f4a2:	685a      	ldr	r2, [r3, #4]
 800f4a4:	bb62      	cbnz	r2, 800f500 <_malloc_r+0xdc>
 800f4a6:	f8c8 7000 	str.w	r7, [r8]
 800f4aa:	e00f      	b.n	800f4cc <_malloc_r+0xa8>
 800f4ac:	6822      	ldr	r2, [r4, #0]
 800f4ae:	1b52      	subs	r2, r2, r5
 800f4b0:	d420      	bmi.n	800f4f4 <_malloc_r+0xd0>
 800f4b2:	2a0b      	cmp	r2, #11
 800f4b4:	d917      	bls.n	800f4e6 <_malloc_r+0xc2>
 800f4b6:	1961      	adds	r1, r4, r5
 800f4b8:	42a3      	cmp	r3, r4
 800f4ba:	6025      	str	r5, [r4, #0]
 800f4bc:	bf18      	it	ne
 800f4be:	6059      	strne	r1, [r3, #4]
 800f4c0:	6863      	ldr	r3, [r4, #4]
 800f4c2:	bf08      	it	eq
 800f4c4:	f8c8 1000 	streq.w	r1, [r8]
 800f4c8:	5162      	str	r2, [r4, r5]
 800f4ca:	604b      	str	r3, [r1, #4]
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f000 f82f 	bl	800f530 <__malloc_unlock>
 800f4d2:	f104 000b 	add.w	r0, r4, #11
 800f4d6:	1d23      	adds	r3, r4, #4
 800f4d8:	f020 0007 	bic.w	r0, r0, #7
 800f4dc:	1ac2      	subs	r2, r0, r3
 800f4de:	bf1c      	itt	ne
 800f4e0:	1a1b      	subne	r3, r3, r0
 800f4e2:	50a3      	strne	r3, [r4, r2]
 800f4e4:	e7af      	b.n	800f446 <_malloc_r+0x22>
 800f4e6:	6862      	ldr	r2, [r4, #4]
 800f4e8:	42a3      	cmp	r3, r4
 800f4ea:	bf0c      	ite	eq
 800f4ec:	f8c8 2000 	streq.w	r2, [r8]
 800f4f0:	605a      	strne	r2, [r3, #4]
 800f4f2:	e7eb      	b.n	800f4cc <_malloc_r+0xa8>
 800f4f4:	4623      	mov	r3, r4
 800f4f6:	6864      	ldr	r4, [r4, #4]
 800f4f8:	e7ae      	b.n	800f458 <_malloc_r+0x34>
 800f4fa:	463c      	mov	r4, r7
 800f4fc:	687f      	ldr	r7, [r7, #4]
 800f4fe:	e7b6      	b.n	800f46e <_malloc_r+0x4a>
 800f500:	461a      	mov	r2, r3
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	42a3      	cmp	r3, r4
 800f506:	d1fb      	bne.n	800f500 <_malloc_r+0xdc>
 800f508:	2300      	movs	r3, #0
 800f50a:	6053      	str	r3, [r2, #4]
 800f50c:	e7de      	b.n	800f4cc <_malloc_r+0xa8>
 800f50e:	230c      	movs	r3, #12
 800f510:	6033      	str	r3, [r6, #0]
 800f512:	4630      	mov	r0, r6
 800f514:	f000 f80c 	bl	800f530 <__malloc_unlock>
 800f518:	e794      	b.n	800f444 <_malloc_r+0x20>
 800f51a:	6005      	str	r5, [r0, #0]
 800f51c:	e7d6      	b.n	800f4cc <_malloc_r+0xa8>
 800f51e:	bf00      	nop
 800f520:	2001b5e0 	.word	0x2001b5e0

0800f524 <__malloc_lock>:
 800f524:	4801      	ldr	r0, [pc, #4]	@ (800f52c <__malloc_lock+0x8>)
 800f526:	f7ff bf00 	b.w	800f32a <__retarget_lock_acquire_recursive>
 800f52a:	bf00      	nop
 800f52c:	2001b5d8 	.word	0x2001b5d8

0800f530 <__malloc_unlock>:
 800f530:	4801      	ldr	r0, [pc, #4]	@ (800f538 <__malloc_unlock+0x8>)
 800f532:	f7ff befb 	b.w	800f32c <__retarget_lock_release_recursive>
 800f536:	bf00      	nop
 800f538:	2001b5d8 	.word	0x2001b5d8

0800f53c <__sfputc_r>:
 800f53c:	6893      	ldr	r3, [r2, #8]
 800f53e:	3b01      	subs	r3, #1
 800f540:	2b00      	cmp	r3, #0
 800f542:	b410      	push	{r4}
 800f544:	6093      	str	r3, [r2, #8]
 800f546:	da08      	bge.n	800f55a <__sfputc_r+0x1e>
 800f548:	6994      	ldr	r4, [r2, #24]
 800f54a:	42a3      	cmp	r3, r4
 800f54c:	db01      	blt.n	800f552 <__sfputc_r+0x16>
 800f54e:	290a      	cmp	r1, #10
 800f550:	d103      	bne.n	800f55a <__sfputc_r+0x1e>
 800f552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f556:	f7ff bdda 	b.w	800f10e <__swbuf_r>
 800f55a:	6813      	ldr	r3, [r2, #0]
 800f55c:	1c58      	adds	r0, r3, #1
 800f55e:	6010      	str	r0, [r2, #0]
 800f560:	7019      	strb	r1, [r3, #0]
 800f562:	4608      	mov	r0, r1
 800f564:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f568:	4770      	bx	lr

0800f56a <__sfputs_r>:
 800f56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56c:	4606      	mov	r6, r0
 800f56e:	460f      	mov	r7, r1
 800f570:	4614      	mov	r4, r2
 800f572:	18d5      	adds	r5, r2, r3
 800f574:	42ac      	cmp	r4, r5
 800f576:	d101      	bne.n	800f57c <__sfputs_r+0x12>
 800f578:	2000      	movs	r0, #0
 800f57a:	e007      	b.n	800f58c <__sfputs_r+0x22>
 800f57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f580:	463a      	mov	r2, r7
 800f582:	4630      	mov	r0, r6
 800f584:	f7ff ffda 	bl	800f53c <__sfputc_r>
 800f588:	1c43      	adds	r3, r0, #1
 800f58a:	d1f3      	bne.n	800f574 <__sfputs_r+0xa>
 800f58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f590 <_vfiprintf_r>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	460d      	mov	r5, r1
 800f596:	b09d      	sub	sp, #116	@ 0x74
 800f598:	4614      	mov	r4, r2
 800f59a:	4698      	mov	r8, r3
 800f59c:	4606      	mov	r6, r0
 800f59e:	b118      	cbz	r0, 800f5a8 <_vfiprintf_r+0x18>
 800f5a0:	6a03      	ldr	r3, [r0, #32]
 800f5a2:	b90b      	cbnz	r3, 800f5a8 <_vfiprintf_r+0x18>
 800f5a4:	f7ff fcca 	bl	800ef3c <__sinit>
 800f5a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5aa:	07d9      	lsls	r1, r3, #31
 800f5ac:	d405      	bmi.n	800f5ba <_vfiprintf_r+0x2a>
 800f5ae:	89ab      	ldrh	r3, [r5, #12]
 800f5b0:	059a      	lsls	r2, r3, #22
 800f5b2:	d402      	bmi.n	800f5ba <_vfiprintf_r+0x2a>
 800f5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5b6:	f7ff feb8 	bl	800f32a <__retarget_lock_acquire_recursive>
 800f5ba:	89ab      	ldrh	r3, [r5, #12]
 800f5bc:	071b      	lsls	r3, r3, #28
 800f5be:	d501      	bpl.n	800f5c4 <_vfiprintf_r+0x34>
 800f5c0:	692b      	ldr	r3, [r5, #16]
 800f5c2:	b99b      	cbnz	r3, 800f5ec <_vfiprintf_r+0x5c>
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f7ff fde0 	bl	800f18c <__swsetup_r>
 800f5cc:	b170      	cbz	r0, 800f5ec <_vfiprintf_r+0x5c>
 800f5ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5d0:	07dc      	lsls	r4, r3, #31
 800f5d2:	d504      	bpl.n	800f5de <_vfiprintf_r+0x4e>
 800f5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d8:	b01d      	add	sp, #116	@ 0x74
 800f5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5de:	89ab      	ldrh	r3, [r5, #12]
 800f5e0:	0598      	lsls	r0, r3, #22
 800f5e2:	d4f7      	bmi.n	800f5d4 <_vfiprintf_r+0x44>
 800f5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5e6:	f7ff fea1 	bl	800f32c <__retarget_lock_release_recursive>
 800f5ea:	e7f3      	b.n	800f5d4 <_vfiprintf_r+0x44>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5f0:	2320      	movs	r3, #32
 800f5f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5fa:	2330      	movs	r3, #48	@ 0x30
 800f5fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f7ac <_vfiprintf_r+0x21c>
 800f600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f604:	f04f 0901 	mov.w	r9, #1
 800f608:	4623      	mov	r3, r4
 800f60a:	469a      	mov	sl, r3
 800f60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f610:	b10a      	cbz	r2, 800f616 <_vfiprintf_r+0x86>
 800f612:	2a25      	cmp	r2, #37	@ 0x25
 800f614:	d1f9      	bne.n	800f60a <_vfiprintf_r+0x7a>
 800f616:	ebba 0b04 	subs.w	fp, sl, r4
 800f61a:	d00b      	beq.n	800f634 <_vfiprintf_r+0xa4>
 800f61c:	465b      	mov	r3, fp
 800f61e:	4622      	mov	r2, r4
 800f620:	4629      	mov	r1, r5
 800f622:	4630      	mov	r0, r6
 800f624:	f7ff ffa1 	bl	800f56a <__sfputs_r>
 800f628:	3001      	adds	r0, #1
 800f62a:	f000 80a7 	beq.w	800f77c <_vfiprintf_r+0x1ec>
 800f62e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f630:	445a      	add	r2, fp
 800f632:	9209      	str	r2, [sp, #36]	@ 0x24
 800f634:	f89a 3000 	ldrb.w	r3, [sl]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f000 809f 	beq.w	800f77c <_vfiprintf_r+0x1ec>
 800f63e:	2300      	movs	r3, #0
 800f640:	f04f 32ff 	mov.w	r2, #4294967295
 800f644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f648:	f10a 0a01 	add.w	sl, sl, #1
 800f64c:	9304      	str	r3, [sp, #16]
 800f64e:	9307      	str	r3, [sp, #28]
 800f650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f654:	931a      	str	r3, [sp, #104]	@ 0x68
 800f656:	4654      	mov	r4, sl
 800f658:	2205      	movs	r2, #5
 800f65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f65e:	4853      	ldr	r0, [pc, #332]	@ (800f7ac <_vfiprintf_r+0x21c>)
 800f660:	f7f0 fd96 	bl	8000190 <memchr>
 800f664:	9a04      	ldr	r2, [sp, #16]
 800f666:	b9d8      	cbnz	r0, 800f6a0 <_vfiprintf_r+0x110>
 800f668:	06d1      	lsls	r1, r2, #27
 800f66a:	bf44      	itt	mi
 800f66c:	2320      	movmi	r3, #32
 800f66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f672:	0713      	lsls	r3, r2, #28
 800f674:	bf44      	itt	mi
 800f676:	232b      	movmi	r3, #43	@ 0x2b
 800f678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f67c:	f89a 3000 	ldrb.w	r3, [sl]
 800f680:	2b2a      	cmp	r3, #42	@ 0x2a
 800f682:	d015      	beq.n	800f6b0 <_vfiprintf_r+0x120>
 800f684:	9a07      	ldr	r2, [sp, #28]
 800f686:	4654      	mov	r4, sl
 800f688:	2000      	movs	r0, #0
 800f68a:	f04f 0c0a 	mov.w	ip, #10
 800f68e:	4621      	mov	r1, r4
 800f690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f694:	3b30      	subs	r3, #48	@ 0x30
 800f696:	2b09      	cmp	r3, #9
 800f698:	d94b      	bls.n	800f732 <_vfiprintf_r+0x1a2>
 800f69a:	b1b0      	cbz	r0, 800f6ca <_vfiprintf_r+0x13a>
 800f69c:	9207      	str	r2, [sp, #28]
 800f69e:	e014      	b.n	800f6ca <_vfiprintf_r+0x13a>
 800f6a0:	eba0 0308 	sub.w	r3, r0, r8
 800f6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	46a2      	mov	sl, r4
 800f6ae:	e7d2      	b.n	800f656 <_vfiprintf_r+0xc6>
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	1d19      	adds	r1, r3, #4
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	9103      	str	r1, [sp, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bfbb      	ittet	lt
 800f6bc:	425b      	neglt	r3, r3
 800f6be:	f042 0202 	orrlt.w	r2, r2, #2
 800f6c2:	9307      	strge	r3, [sp, #28]
 800f6c4:	9307      	strlt	r3, [sp, #28]
 800f6c6:	bfb8      	it	lt
 800f6c8:	9204      	strlt	r2, [sp, #16]
 800f6ca:	7823      	ldrb	r3, [r4, #0]
 800f6cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6ce:	d10a      	bne.n	800f6e6 <_vfiprintf_r+0x156>
 800f6d0:	7863      	ldrb	r3, [r4, #1]
 800f6d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6d4:	d132      	bne.n	800f73c <_vfiprintf_r+0x1ac>
 800f6d6:	9b03      	ldr	r3, [sp, #12]
 800f6d8:	1d1a      	adds	r2, r3, #4
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	9203      	str	r2, [sp, #12]
 800f6de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6e2:	3402      	adds	r4, #2
 800f6e4:	9305      	str	r3, [sp, #20]
 800f6e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f7bc <_vfiprintf_r+0x22c>
 800f6ea:	7821      	ldrb	r1, [r4, #0]
 800f6ec:	2203      	movs	r2, #3
 800f6ee:	4650      	mov	r0, sl
 800f6f0:	f7f0 fd4e 	bl	8000190 <memchr>
 800f6f4:	b138      	cbz	r0, 800f706 <_vfiprintf_r+0x176>
 800f6f6:	9b04      	ldr	r3, [sp, #16]
 800f6f8:	eba0 000a 	sub.w	r0, r0, sl
 800f6fc:	2240      	movs	r2, #64	@ 0x40
 800f6fe:	4082      	lsls	r2, r0
 800f700:	4313      	orrs	r3, r2
 800f702:	3401      	adds	r4, #1
 800f704:	9304      	str	r3, [sp, #16]
 800f706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f70a:	4829      	ldr	r0, [pc, #164]	@ (800f7b0 <_vfiprintf_r+0x220>)
 800f70c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f710:	2206      	movs	r2, #6
 800f712:	f7f0 fd3d 	bl	8000190 <memchr>
 800f716:	2800      	cmp	r0, #0
 800f718:	d03f      	beq.n	800f79a <_vfiprintf_r+0x20a>
 800f71a:	4b26      	ldr	r3, [pc, #152]	@ (800f7b4 <_vfiprintf_r+0x224>)
 800f71c:	bb1b      	cbnz	r3, 800f766 <_vfiprintf_r+0x1d6>
 800f71e:	9b03      	ldr	r3, [sp, #12]
 800f720:	3307      	adds	r3, #7
 800f722:	f023 0307 	bic.w	r3, r3, #7
 800f726:	3308      	adds	r3, #8
 800f728:	9303      	str	r3, [sp, #12]
 800f72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f72c:	443b      	add	r3, r7
 800f72e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f730:	e76a      	b.n	800f608 <_vfiprintf_r+0x78>
 800f732:	fb0c 3202 	mla	r2, ip, r2, r3
 800f736:	460c      	mov	r4, r1
 800f738:	2001      	movs	r0, #1
 800f73a:	e7a8      	b.n	800f68e <_vfiprintf_r+0xfe>
 800f73c:	2300      	movs	r3, #0
 800f73e:	3401      	adds	r4, #1
 800f740:	9305      	str	r3, [sp, #20]
 800f742:	4619      	mov	r1, r3
 800f744:	f04f 0c0a 	mov.w	ip, #10
 800f748:	4620      	mov	r0, r4
 800f74a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f74e:	3a30      	subs	r2, #48	@ 0x30
 800f750:	2a09      	cmp	r2, #9
 800f752:	d903      	bls.n	800f75c <_vfiprintf_r+0x1cc>
 800f754:	2b00      	cmp	r3, #0
 800f756:	d0c6      	beq.n	800f6e6 <_vfiprintf_r+0x156>
 800f758:	9105      	str	r1, [sp, #20]
 800f75a:	e7c4      	b.n	800f6e6 <_vfiprintf_r+0x156>
 800f75c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f760:	4604      	mov	r4, r0
 800f762:	2301      	movs	r3, #1
 800f764:	e7f0      	b.n	800f748 <_vfiprintf_r+0x1b8>
 800f766:	ab03      	add	r3, sp, #12
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	462a      	mov	r2, r5
 800f76c:	4b12      	ldr	r3, [pc, #72]	@ (800f7b8 <_vfiprintf_r+0x228>)
 800f76e:	a904      	add	r1, sp, #16
 800f770:	4630      	mov	r0, r6
 800f772:	f3af 8000 	nop.w
 800f776:	4607      	mov	r7, r0
 800f778:	1c78      	adds	r0, r7, #1
 800f77a:	d1d6      	bne.n	800f72a <_vfiprintf_r+0x19a>
 800f77c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f77e:	07d9      	lsls	r1, r3, #31
 800f780:	d405      	bmi.n	800f78e <_vfiprintf_r+0x1fe>
 800f782:	89ab      	ldrh	r3, [r5, #12]
 800f784:	059a      	lsls	r2, r3, #22
 800f786:	d402      	bmi.n	800f78e <_vfiprintf_r+0x1fe>
 800f788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f78a:	f7ff fdcf 	bl	800f32c <__retarget_lock_release_recursive>
 800f78e:	89ab      	ldrh	r3, [r5, #12]
 800f790:	065b      	lsls	r3, r3, #25
 800f792:	f53f af1f 	bmi.w	800f5d4 <_vfiprintf_r+0x44>
 800f796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f798:	e71e      	b.n	800f5d8 <_vfiprintf_r+0x48>
 800f79a:	ab03      	add	r3, sp, #12
 800f79c:	9300      	str	r3, [sp, #0]
 800f79e:	462a      	mov	r2, r5
 800f7a0:	4b05      	ldr	r3, [pc, #20]	@ (800f7b8 <_vfiprintf_r+0x228>)
 800f7a2:	a904      	add	r1, sp, #16
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f000 f879 	bl	800f89c <_printf_i>
 800f7aa:	e7e4      	b.n	800f776 <_vfiprintf_r+0x1e6>
 800f7ac:	080123d4 	.word	0x080123d4
 800f7b0:	080123de 	.word	0x080123de
 800f7b4:	00000000 	.word	0x00000000
 800f7b8:	0800f56b 	.word	0x0800f56b
 800f7bc:	080123da 	.word	0x080123da

0800f7c0 <_printf_common>:
 800f7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7c4:	4616      	mov	r6, r2
 800f7c6:	4698      	mov	r8, r3
 800f7c8:	688a      	ldr	r2, [r1, #8]
 800f7ca:	690b      	ldr	r3, [r1, #16]
 800f7cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	bfb8      	it	lt
 800f7d4:	4613      	movlt	r3, r2
 800f7d6:	6033      	str	r3, [r6, #0]
 800f7d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f7dc:	4607      	mov	r7, r0
 800f7de:	460c      	mov	r4, r1
 800f7e0:	b10a      	cbz	r2, 800f7e6 <_printf_common+0x26>
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	6033      	str	r3, [r6, #0]
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	0699      	lsls	r1, r3, #26
 800f7ea:	bf42      	ittt	mi
 800f7ec:	6833      	ldrmi	r3, [r6, #0]
 800f7ee:	3302      	addmi	r3, #2
 800f7f0:	6033      	strmi	r3, [r6, #0]
 800f7f2:	6825      	ldr	r5, [r4, #0]
 800f7f4:	f015 0506 	ands.w	r5, r5, #6
 800f7f8:	d106      	bne.n	800f808 <_printf_common+0x48>
 800f7fa:	f104 0a19 	add.w	sl, r4, #25
 800f7fe:	68e3      	ldr	r3, [r4, #12]
 800f800:	6832      	ldr	r2, [r6, #0]
 800f802:	1a9b      	subs	r3, r3, r2
 800f804:	42ab      	cmp	r3, r5
 800f806:	dc26      	bgt.n	800f856 <_printf_common+0x96>
 800f808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f80c:	6822      	ldr	r2, [r4, #0]
 800f80e:	3b00      	subs	r3, #0
 800f810:	bf18      	it	ne
 800f812:	2301      	movne	r3, #1
 800f814:	0692      	lsls	r2, r2, #26
 800f816:	d42b      	bmi.n	800f870 <_printf_common+0xb0>
 800f818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f81c:	4641      	mov	r1, r8
 800f81e:	4638      	mov	r0, r7
 800f820:	47c8      	blx	r9
 800f822:	3001      	adds	r0, #1
 800f824:	d01e      	beq.n	800f864 <_printf_common+0xa4>
 800f826:	6823      	ldr	r3, [r4, #0]
 800f828:	6922      	ldr	r2, [r4, #16]
 800f82a:	f003 0306 	and.w	r3, r3, #6
 800f82e:	2b04      	cmp	r3, #4
 800f830:	bf02      	ittt	eq
 800f832:	68e5      	ldreq	r5, [r4, #12]
 800f834:	6833      	ldreq	r3, [r6, #0]
 800f836:	1aed      	subeq	r5, r5, r3
 800f838:	68a3      	ldr	r3, [r4, #8]
 800f83a:	bf0c      	ite	eq
 800f83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f840:	2500      	movne	r5, #0
 800f842:	4293      	cmp	r3, r2
 800f844:	bfc4      	itt	gt
 800f846:	1a9b      	subgt	r3, r3, r2
 800f848:	18ed      	addgt	r5, r5, r3
 800f84a:	2600      	movs	r6, #0
 800f84c:	341a      	adds	r4, #26
 800f84e:	42b5      	cmp	r5, r6
 800f850:	d11a      	bne.n	800f888 <_printf_common+0xc8>
 800f852:	2000      	movs	r0, #0
 800f854:	e008      	b.n	800f868 <_printf_common+0xa8>
 800f856:	2301      	movs	r3, #1
 800f858:	4652      	mov	r2, sl
 800f85a:	4641      	mov	r1, r8
 800f85c:	4638      	mov	r0, r7
 800f85e:	47c8      	blx	r9
 800f860:	3001      	adds	r0, #1
 800f862:	d103      	bne.n	800f86c <_printf_common+0xac>
 800f864:	f04f 30ff 	mov.w	r0, #4294967295
 800f868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f86c:	3501      	adds	r5, #1
 800f86e:	e7c6      	b.n	800f7fe <_printf_common+0x3e>
 800f870:	18e1      	adds	r1, r4, r3
 800f872:	1c5a      	adds	r2, r3, #1
 800f874:	2030      	movs	r0, #48	@ 0x30
 800f876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f87a:	4422      	add	r2, r4
 800f87c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f884:	3302      	adds	r3, #2
 800f886:	e7c7      	b.n	800f818 <_printf_common+0x58>
 800f888:	2301      	movs	r3, #1
 800f88a:	4622      	mov	r2, r4
 800f88c:	4641      	mov	r1, r8
 800f88e:	4638      	mov	r0, r7
 800f890:	47c8      	blx	r9
 800f892:	3001      	adds	r0, #1
 800f894:	d0e6      	beq.n	800f864 <_printf_common+0xa4>
 800f896:	3601      	adds	r6, #1
 800f898:	e7d9      	b.n	800f84e <_printf_common+0x8e>
	...

0800f89c <_printf_i>:
 800f89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8a0:	7e0f      	ldrb	r7, [r1, #24]
 800f8a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f8a4:	2f78      	cmp	r7, #120	@ 0x78
 800f8a6:	4691      	mov	r9, r2
 800f8a8:	4680      	mov	r8, r0
 800f8aa:	460c      	mov	r4, r1
 800f8ac:	469a      	mov	sl, r3
 800f8ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f8b2:	d807      	bhi.n	800f8c4 <_printf_i+0x28>
 800f8b4:	2f62      	cmp	r7, #98	@ 0x62
 800f8b6:	d80a      	bhi.n	800f8ce <_printf_i+0x32>
 800f8b8:	2f00      	cmp	r7, #0
 800f8ba:	f000 80d1 	beq.w	800fa60 <_printf_i+0x1c4>
 800f8be:	2f58      	cmp	r7, #88	@ 0x58
 800f8c0:	f000 80b8 	beq.w	800fa34 <_printf_i+0x198>
 800f8c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f8cc:	e03a      	b.n	800f944 <_printf_i+0xa8>
 800f8ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f8d2:	2b15      	cmp	r3, #21
 800f8d4:	d8f6      	bhi.n	800f8c4 <_printf_i+0x28>
 800f8d6:	a101      	add	r1, pc, #4	@ (adr r1, 800f8dc <_printf_i+0x40>)
 800f8d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8dc:	0800f935 	.word	0x0800f935
 800f8e0:	0800f949 	.word	0x0800f949
 800f8e4:	0800f8c5 	.word	0x0800f8c5
 800f8e8:	0800f8c5 	.word	0x0800f8c5
 800f8ec:	0800f8c5 	.word	0x0800f8c5
 800f8f0:	0800f8c5 	.word	0x0800f8c5
 800f8f4:	0800f949 	.word	0x0800f949
 800f8f8:	0800f8c5 	.word	0x0800f8c5
 800f8fc:	0800f8c5 	.word	0x0800f8c5
 800f900:	0800f8c5 	.word	0x0800f8c5
 800f904:	0800f8c5 	.word	0x0800f8c5
 800f908:	0800fa47 	.word	0x0800fa47
 800f90c:	0800f973 	.word	0x0800f973
 800f910:	0800fa01 	.word	0x0800fa01
 800f914:	0800f8c5 	.word	0x0800f8c5
 800f918:	0800f8c5 	.word	0x0800f8c5
 800f91c:	0800fa69 	.word	0x0800fa69
 800f920:	0800f8c5 	.word	0x0800f8c5
 800f924:	0800f973 	.word	0x0800f973
 800f928:	0800f8c5 	.word	0x0800f8c5
 800f92c:	0800f8c5 	.word	0x0800f8c5
 800f930:	0800fa09 	.word	0x0800fa09
 800f934:	6833      	ldr	r3, [r6, #0]
 800f936:	1d1a      	adds	r2, r3, #4
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	6032      	str	r2, [r6, #0]
 800f93c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f944:	2301      	movs	r3, #1
 800f946:	e09c      	b.n	800fa82 <_printf_i+0x1e6>
 800f948:	6833      	ldr	r3, [r6, #0]
 800f94a:	6820      	ldr	r0, [r4, #0]
 800f94c:	1d19      	adds	r1, r3, #4
 800f94e:	6031      	str	r1, [r6, #0]
 800f950:	0606      	lsls	r6, r0, #24
 800f952:	d501      	bpl.n	800f958 <_printf_i+0xbc>
 800f954:	681d      	ldr	r5, [r3, #0]
 800f956:	e003      	b.n	800f960 <_printf_i+0xc4>
 800f958:	0645      	lsls	r5, r0, #25
 800f95a:	d5fb      	bpl.n	800f954 <_printf_i+0xb8>
 800f95c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f960:	2d00      	cmp	r5, #0
 800f962:	da03      	bge.n	800f96c <_printf_i+0xd0>
 800f964:	232d      	movs	r3, #45	@ 0x2d
 800f966:	426d      	negs	r5, r5
 800f968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f96c:	4858      	ldr	r0, [pc, #352]	@ (800fad0 <_printf_i+0x234>)
 800f96e:	230a      	movs	r3, #10
 800f970:	e011      	b.n	800f996 <_printf_i+0xfa>
 800f972:	6821      	ldr	r1, [r4, #0]
 800f974:	6833      	ldr	r3, [r6, #0]
 800f976:	0608      	lsls	r0, r1, #24
 800f978:	f853 5b04 	ldr.w	r5, [r3], #4
 800f97c:	d402      	bmi.n	800f984 <_printf_i+0xe8>
 800f97e:	0649      	lsls	r1, r1, #25
 800f980:	bf48      	it	mi
 800f982:	b2ad      	uxthmi	r5, r5
 800f984:	2f6f      	cmp	r7, #111	@ 0x6f
 800f986:	4852      	ldr	r0, [pc, #328]	@ (800fad0 <_printf_i+0x234>)
 800f988:	6033      	str	r3, [r6, #0]
 800f98a:	bf14      	ite	ne
 800f98c:	230a      	movne	r3, #10
 800f98e:	2308      	moveq	r3, #8
 800f990:	2100      	movs	r1, #0
 800f992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f996:	6866      	ldr	r6, [r4, #4]
 800f998:	60a6      	str	r6, [r4, #8]
 800f99a:	2e00      	cmp	r6, #0
 800f99c:	db05      	blt.n	800f9aa <_printf_i+0x10e>
 800f99e:	6821      	ldr	r1, [r4, #0]
 800f9a0:	432e      	orrs	r6, r5
 800f9a2:	f021 0104 	bic.w	r1, r1, #4
 800f9a6:	6021      	str	r1, [r4, #0]
 800f9a8:	d04b      	beq.n	800fa42 <_printf_i+0x1a6>
 800f9aa:	4616      	mov	r6, r2
 800f9ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800f9b0:	fb03 5711 	mls	r7, r3, r1, r5
 800f9b4:	5dc7      	ldrb	r7, [r0, r7]
 800f9b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f9ba:	462f      	mov	r7, r5
 800f9bc:	42bb      	cmp	r3, r7
 800f9be:	460d      	mov	r5, r1
 800f9c0:	d9f4      	bls.n	800f9ac <_printf_i+0x110>
 800f9c2:	2b08      	cmp	r3, #8
 800f9c4:	d10b      	bne.n	800f9de <_printf_i+0x142>
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	07df      	lsls	r7, r3, #31
 800f9ca:	d508      	bpl.n	800f9de <_printf_i+0x142>
 800f9cc:	6923      	ldr	r3, [r4, #16]
 800f9ce:	6861      	ldr	r1, [r4, #4]
 800f9d0:	4299      	cmp	r1, r3
 800f9d2:	bfde      	ittt	le
 800f9d4:	2330      	movle	r3, #48	@ 0x30
 800f9d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f9da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f9de:	1b92      	subs	r2, r2, r6
 800f9e0:	6122      	str	r2, [r4, #16]
 800f9e2:	f8cd a000 	str.w	sl, [sp]
 800f9e6:	464b      	mov	r3, r9
 800f9e8:	aa03      	add	r2, sp, #12
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	f7ff fee7 	bl	800f7c0 <_printf_common>
 800f9f2:	3001      	adds	r0, #1
 800f9f4:	d14a      	bne.n	800fa8c <_printf_i+0x1f0>
 800f9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9fa:	b004      	add	sp, #16
 800f9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa00:	6823      	ldr	r3, [r4, #0]
 800fa02:	f043 0320 	orr.w	r3, r3, #32
 800fa06:	6023      	str	r3, [r4, #0]
 800fa08:	4832      	ldr	r0, [pc, #200]	@ (800fad4 <_printf_i+0x238>)
 800fa0a:	2778      	movs	r7, #120	@ 0x78
 800fa0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	6831      	ldr	r1, [r6, #0]
 800fa14:	061f      	lsls	r7, r3, #24
 800fa16:	f851 5b04 	ldr.w	r5, [r1], #4
 800fa1a:	d402      	bmi.n	800fa22 <_printf_i+0x186>
 800fa1c:	065f      	lsls	r7, r3, #25
 800fa1e:	bf48      	it	mi
 800fa20:	b2ad      	uxthmi	r5, r5
 800fa22:	6031      	str	r1, [r6, #0]
 800fa24:	07d9      	lsls	r1, r3, #31
 800fa26:	bf44      	itt	mi
 800fa28:	f043 0320 	orrmi.w	r3, r3, #32
 800fa2c:	6023      	strmi	r3, [r4, #0]
 800fa2e:	b11d      	cbz	r5, 800fa38 <_printf_i+0x19c>
 800fa30:	2310      	movs	r3, #16
 800fa32:	e7ad      	b.n	800f990 <_printf_i+0xf4>
 800fa34:	4826      	ldr	r0, [pc, #152]	@ (800fad0 <_printf_i+0x234>)
 800fa36:	e7e9      	b.n	800fa0c <_printf_i+0x170>
 800fa38:	6823      	ldr	r3, [r4, #0]
 800fa3a:	f023 0320 	bic.w	r3, r3, #32
 800fa3e:	6023      	str	r3, [r4, #0]
 800fa40:	e7f6      	b.n	800fa30 <_printf_i+0x194>
 800fa42:	4616      	mov	r6, r2
 800fa44:	e7bd      	b.n	800f9c2 <_printf_i+0x126>
 800fa46:	6833      	ldr	r3, [r6, #0]
 800fa48:	6825      	ldr	r5, [r4, #0]
 800fa4a:	6961      	ldr	r1, [r4, #20]
 800fa4c:	1d18      	adds	r0, r3, #4
 800fa4e:	6030      	str	r0, [r6, #0]
 800fa50:	062e      	lsls	r6, r5, #24
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	d501      	bpl.n	800fa5a <_printf_i+0x1be>
 800fa56:	6019      	str	r1, [r3, #0]
 800fa58:	e002      	b.n	800fa60 <_printf_i+0x1c4>
 800fa5a:	0668      	lsls	r0, r5, #25
 800fa5c:	d5fb      	bpl.n	800fa56 <_printf_i+0x1ba>
 800fa5e:	8019      	strh	r1, [r3, #0]
 800fa60:	2300      	movs	r3, #0
 800fa62:	6123      	str	r3, [r4, #16]
 800fa64:	4616      	mov	r6, r2
 800fa66:	e7bc      	b.n	800f9e2 <_printf_i+0x146>
 800fa68:	6833      	ldr	r3, [r6, #0]
 800fa6a:	1d1a      	adds	r2, r3, #4
 800fa6c:	6032      	str	r2, [r6, #0]
 800fa6e:	681e      	ldr	r6, [r3, #0]
 800fa70:	6862      	ldr	r2, [r4, #4]
 800fa72:	2100      	movs	r1, #0
 800fa74:	4630      	mov	r0, r6
 800fa76:	f7f0 fb8b 	bl	8000190 <memchr>
 800fa7a:	b108      	cbz	r0, 800fa80 <_printf_i+0x1e4>
 800fa7c:	1b80      	subs	r0, r0, r6
 800fa7e:	6060      	str	r0, [r4, #4]
 800fa80:	6863      	ldr	r3, [r4, #4]
 800fa82:	6123      	str	r3, [r4, #16]
 800fa84:	2300      	movs	r3, #0
 800fa86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa8a:	e7aa      	b.n	800f9e2 <_printf_i+0x146>
 800fa8c:	6923      	ldr	r3, [r4, #16]
 800fa8e:	4632      	mov	r2, r6
 800fa90:	4649      	mov	r1, r9
 800fa92:	4640      	mov	r0, r8
 800fa94:	47d0      	blx	sl
 800fa96:	3001      	adds	r0, #1
 800fa98:	d0ad      	beq.n	800f9f6 <_printf_i+0x15a>
 800fa9a:	6823      	ldr	r3, [r4, #0]
 800fa9c:	079b      	lsls	r3, r3, #30
 800fa9e:	d413      	bmi.n	800fac8 <_printf_i+0x22c>
 800faa0:	68e0      	ldr	r0, [r4, #12]
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	4298      	cmp	r0, r3
 800faa6:	bfb8      	it	lt
 800faa8:	4618      	movlt	r0, r3
 800faaa:	e7a6      	b.n	800f9fa <_printf_i+0x15e>
 800faac:	2301      	movs	r3, #1
 800faae:	4632      	mov	r2, r6
 800fab0:	4649      	mov	r1, r9
 800fab2:	4640      	mov	r0, r8
 800fab4:	47d0      	blx	sl
 800fab6:	3001      	adds	r0, #1
 800fab8:	d09d      	beq.n	800f9f6 <_printf_i+0x15a>
 800faba:	3501      	adds	r5, #1
 800fabc:	68e3      	ldr	r3, [r4, #12]
 800fabe:	9903      	ldr	r1, [sp, #12]
 800fac0:	1a5b      	subs	r3, r3, r1
 800fac2:	42ab      	cmp	r3, r5
 800fac4:	dcf2      	bgt.n	800faac <_printf_i+0x210>
 800fac6:	e7eb      	b.n	800faa0 <_printf_i+0x204>
 800fac8:	2500      	movs	r5, #0
 800faca:	f104 0619 	add.w	r6, r4, #25
 800face:	e7f5      	b.n	800fabc <_printf_i+0x220>
 800fad0:	080123e5 	.word	0x080123e5
 800fad4:	080123f6 	.word	0x080123f6

0800fad8 <__sflush_r>:
 800fad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae0:	0716      	lsls	r6, r2, #28
 800fae2:	4605      	mov	r5, r0
 800fae4:	460c      	mov	r4, r1
 800fae6:	d454      	bmi.n	800fb92 <__sflush_r+0xba>
 800fae8:	684b      	ldr	r3, [r1, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	dc02      	bgt.n	800faf4 <__sflush_r+0x1c>
 800faee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	dd48      	ble.n	800fb86 <__sflush_r+0xae>
 800faf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800faf6:	2e00      	cmp	r6, #0
 800faf8:	d045      	beq.n	800fb86 <__sflush_r+0xae>
 800fafa:	2300      	movs	r3, #0
 800fafc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fb00:	682f      	ldr	r7, [r5, #0]
 800fb02:	6a21      	ldr	r1, [r4, #32]
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	d030      	beq.n	800fb6a <__sflush_r+0x92>
 800fb08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb0a:	89a3      	ldrh	r3, [r4, #12]
 800fb0c:	0759      	lsls	r1, r3, #29
 800fb0e:	d505      	bpl.n	800fb1c <__sflush_r+0x44>
 800fb10:	6863      	ldr	r3, [r4, #4]
 800fb12:	1ad2      	subs	r2, r2, r3
 800fb14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb16:	b10b      	cbz	r3, 800fb1c <__sflush_r+0x44>
 800fb18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb1a:	1ad2      	subs	r2, r2, r3
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb20:	6a21      	ldr	r1, [r4, #32]
 800fb22:	4628      	mov	r0, r5
 800fb24:	47b0      	blx	r6
 800fb26:	1c43      	adds	r3, r0, #1
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	d106      	bne.n	800fb3a <__sflush_r+0x62>
 800fb2c:	6829      	ldr	r1, [r5, #0]
 800fb2e:	291d      	cmp	r1, #29
 800fb30:	d82b      	bhi.n	800fb8a <__sflush_r+0xb2>
 800fb32:	4a2a      	ldr	r2, [pc, #168]	@ (800fbdc <__sflush_r+0x104>)
 800fb34:	40ca      	lsrs	r2, r1
 800fb36:	07d6      	lsls	r6, r2, #31
 800fb38:	d527      	bpl.n	800fb8a <__sflush_r+0xb2>
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	6062      	str	r2, [r4, #4]
 800fb3e:	04d9      	lsls	r1, r3, #19
 800fb40:	6922      	ldr	r2, [r4, #16]
 800fb42:	6022      	str	r2, [r4, #0]
 800fb44:	d504      	bpl.n	800fb50 <__sflush_r+0x78>
 800fb46:	1c42      	adds	r2, r0, #1
 800fb48:	d101      	bne.n	800fb4e <__sflush_r+0x76>
 800fb4a:	682b      	ldr	r3, [r5, #0]
 800fb4c:	b903      	cbnz	r3, 800fb50 <__sflush_r+0x78>
 800fb4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb52:	602f      	str	r7, [r5, #0]
 800fb54:	b1b9      	cbz	r1, 800fb86 <__sflush_r+0xae>
 800fb56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb5a:	4299      	cmp	r1, r3
 800fb5c:	d002      	beq.n	800fb64 <__sflush_r+0x8c>
 800fb5e:	4628      	mov	r0, r5
 800fb60:	f7ff fbf4 	bl	800f34c <_free_r>
 800fb64:	2300      	movs	r3, #0
 800fb66:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb68:	e00d      	b.n	800fb86 <__sflush_r+0xae>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	47b0      	blx	r6
 800fb70:	4602      	mov	r2, r0
 800fb72:	1c50      	adds	r0, r2, #1
 800fb74:	d1c9      	bne.n	800fb0a <__sflush_r+0x32>
 800fb76:	682b      	ldr	r3, [r5, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d0c6      	beq.n	800fb0a <__sflush_r+0x32>
 800fb7c:	2b1d      	cmp	r3, #29
 800fb7e:	d001      	beq.n	800fb84 <__sflush_r+0xac>
 800fb80:	2b16      	cmp	r3, #22
 800fb82:	d11e      	bne.n	800fbc2 <__sflush_r+0xea>
 800fb84:	602f      	str	r7, [r5, #0]
 800fb86:	2000      	movs	r0, #0
 800fb88:	e022      	b.n	800fbd0 <__sflush_r+0xf8>
 800fb8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb8e:	b21b      	sxth	r3, r3
 800fb90:	e01b      	b.n	800fbca <__sflush_r+0xf2>
 800fb92:	690f      	ldr	r7, [r1, #16]
 800fb94:	2f00      	cmp	r7, #0
 800fb96:	d0f6      	beq.n	800fb86 <__sflush_r+0xae>
 800fb98:	0793      	lsls	r3, r2, #30
 800fb9a:	680e      	ldr	r6, [r1, #0]
 800fb9c:	bf08      	it	eq
 800fb9e:	694b      	ldreq	r3, [r1, #20]
 800fba0:	600f      	str	r7, [r1, #0]
 800fba2:	bf18      	it	ne
 800fba4:	2300      	movne	r3, #0
 800fba6:	eba6 0807 	sub.w	r8, r6, r7
 800fbaa:	608b      	str	r3, [r1, #8]
 800fbac:	f1b8 0f00 	cmp.w	r8, #0
 800fbb0:	dde9      	ble.n	800fb86 <__sflush_r+0xae>
 800fbb2:	6a21      	ldr	r1, [r4, #32]
 800fbb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fbb6:	4643      	mov	r3, r8
 800fbb8:	463a      	mov	r2, r7
 800fbba:	4628      	mov	r0, r5
 800fbbc:	47b0      	blx	r6
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	dc08      	bgt.n	800fbd4 <__sflush_r+0xfc>
 800fbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbca:	81a3      	strh	r3, [r4, #12]
 800fbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd4:	4407      	add	r7, r0
 800fbd6:	eba8 0800 	sub.w	r8, r8, r0
 800fbda:	e7e7      	b.n	800fbac <__sflush_r+0xd4>
 800fbdc:	20400001 	.word	0x20400001

0800fbe0 <_fflush_r>:
 800fbe0:	b538      	push	{r3, r4, r5, lr}
 800fbe2:	690b      	ldr	r3, [r1, #16]
 800fbe4:	4605      	mov	r5, r0
 800fbe6:	460c      	mov	r4, r1
 800fbe8:	b913      	cbnz	r3, 800fbf0 <_fflush_r+0x10>
 800fbea:	2500      	movs	r5, #0
 800fbec:	4628      	mov	r0, r5
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	b118      	cbz	r0, 800fbfa <_fflush_r+0x1a>
 800fbf2:	6a03      	ldr	r3, [r0, #32]
 800fbf4:	b90b      	cbnz	r3, 800fbfa <_fflush_r+0x1a>
 800fbf6:	f7ff f9a1 	bl	800ef3c <__sinit>
 800fbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d0f3      	beq.n	800fbea <_fflush_r+0xa>
 800fc02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc04:	07d0      	lsls	r0, r2, #31
 800fc06:	d404      	bmi.n	800fc12 <_fflush_r+0x32>
 800fc08:	0599      	lsls	r1, r3, #22
 800fc0a:	d402      	bmi.n	800fc12 <_fflush_r+0x32>
 800fc0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc0e:	f7ff fb8c 	bl	800f32a <__retarget_lock_acquire_recursive>
 800fc12:	4628      	mov	r0, r5
 800fc14:	4621      	mov	r1, r4
 800fc16:	f7ff ff5f 	bl	800fad8 <__sflush_r>
 800fc1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc1c:	07da      	lsls	r2, r3, #31
 800fc1e:	4605      	mov	r5, r0
 800fc20:	d4e4      	bmi.n	800fbec <_fflush_r+0xc>
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	059b      	lsls	r3, r3, #22
 800fc26:	d4e1      	bmi.n	800fbec <_fflush_r+0xc>
 800fc28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc2a:	f7ff fb7f 	bl	800f32c <__retarget_lock_release_recursive>
 800fc2e:	e7dd      	b.n	800fbec <_fflush_r+0xc>

0800fc30 <__swhatbuf_r>:
 800fc30:	b570      	push	{r4, r5, r6, lr}
 800fc32:	460c      	mov	r4, r1
 800fc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc38:	2900      	cmp	r1, #0
 800fc3a:	b096      	sub	sp, #88	@ 0x58
 800fc3c:	4615      	mov	r5, r2
 800fc3e:	461e      	mov	r6, r3
 800fc40:	da0d      	bge.n	800fc5e <__swhatbuf_r+0x2e>
 800fc42:	89a3      	ldrh	r3, [r4, #12]
 800fc44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc48:	f04f 0100 	mov.w	r1, #0
 800fc4c:	bf14      	ite	ne
 800fc4e:	2340      	movne	r3, #64	@ 0x40
 800fc50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc54:	2000      	movs	r0, #0
 800fc56:	6031      	str	r1, [r6, #0]
 800fc58:	602b      	str	r3, [r5, #0]
 800fc5a:	b016      	add	sp, #88	@ 0x58
 800fc5c:	bd70      	pop	{r4, r5, r6, pc}
 800fc5e:	466a      	mov	r2, sp
 800fc60:	f000 f848 	bl	800fcf4 <_fstat_r>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	dbec      	blt.n	800fc42 <__swhatbuf_r+0x12>
 800fc68:	9901      	ldr	r1, [sp, #4]
 800fc6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc72:	4259      	negs	r1, r3
 800fc74:	4159      	adcs	r1, r3
 800fc76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc7a:	e7eb      	b.n	800fc54 <__swhatbuf_r+0x24>

0800fc7c <__smakebuf_r>:
 800fc7c:	898b      	ldrh	r3, [r1, #12]
 800fc7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc80:	079d      	lsls	r5, r3, #30
 800fc82:	4606      	mov	r6, r0
 800fc84:	460c      	mov	r4, r1
 800fc86:	d507      	bpl.n	800fc98 <__smakebuf_r+0x1c>
 800fc88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc8c:	6023      	str	r3, [r4, #0]
 800fc8e:	6123      	str	r3, [r4, #16]
 800fc90:	2301      	movs	r3, #1
 800fc92:	6163      	str	r3, [r4, #20]
 800fc94:	b003      	add	sp, #12
 800fc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc98:	ab01      	add	r3, sp, #4
 800fc9a:	466a      	mov	r2, sp
 800fc9c:	f7ff ffc8 	bl	800fc30 <__swhatbuf_r>
 800fca0:	9f00      	ldr	r7, [sp, #0]
 800fca2:	4605      	mov	r5, r0
 800fca4:	4639      	mov	r1, r7
 800fca6:	4630      	mov	r0, r6
 800fca8:	f7ff fbbc 	bl	800f424 <_malloc_r>
 800fcac:	b948      	cbnz	r0, 800fcc2 <__smakebuf_r+0x46>
 800fcae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcb2:	059a      	lsls	r2, r3, #22
 800fcb4:	d4ee      	bmi.n	800fc94 <__smakebuf_r+0x18>
 800fcb6:	f023 0303 	bic.w	r3, r3, #3
 800fcba:	f043 0302 	orr.w	r3, r3, #2
 800fcbe:	81a3      	strh	r3, [r4, #12]
 800fcc0:	e7e2      	b.n	800fc88 <__smakebuf_r+0xc>
 800fcc2:	89a3      	ldrh	r3, [r4, #12]
 800fcc4:	6020      	str	r0, [r4, #0]
 800fcc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcca:	81a3      	strh	r3, [r4, #12]
 800fccc:	9b01      	ldr	r3, [sp, #4]
 800fcce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fcd2:	b15b      	cbz	r3, 800fcec <__smakebuf_r+0x70>
 800fcd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f000 f81d 	bl	800fd18 <_isatty_r>
 800fcde:	b128      	cbz	r0, 800fcec <__smakebuf_r+0x70>
 800fce0:	89a3      	ldrh	r3, [r4, #12]
 800fce2:	f023 0303 	bic.w	r3, r3, #3
 800fce6:	f043 0301 	orr.w	r3, r3, #1
 800fcea:	81a3      	strh	r3, [r4, #12]
 800fcec:	89a3      	ldrh	r3, [r4, #12]
 800fcee:	431d      	orrs	r5, r3
 800fcf0:	81a5      	strh	r5, [r4, #12]
 800fcf2:	e7cf      	b.n	800fc94 <__smakebuf_r+0x18>

0800fcf4 <_fstat_r>:
 800fcf4:	b538      	push	{r3, r4, r5, lr}
 800fcf6:	4d07      	ldr	r5, [pc, #28]	@ (800fd14 <_fstat_r+0x20>)
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	4608      	mov	r0, r1
 800fcfe:	4611      	mov	r1, r2
 800fd00:	602b      	str	r3, [r5, #0]
 800fd02:	f7f2 ffcc 	bl	8002c9e <_fstat>
 800fd06:	1c43      	adds	r3, r0, #1
 800fd08:	d102      	bne.n	800fd10 <_fstat_r+0x1c>
 800fd0a:	682b      	ldr	r3, [r5, #0]
 800fd0c:	b103      	cbz	r3, 800fd10 <_fstat_r+0x1c>
 800fd0e:	6023      	str	r3, [r4, #0]
 800fd10:	bd38      	pop	{r3, r4, r5, pc}
 800fd12:	bf00      	nop
 800fd14:	2001b5d4 	.word	0x2001b5d4

0800fd18 <_isatty_r>:
 800fd18:	b538      	push	{r3, r4, r5, lr}
 800fd1a:	4d06      	ldr	r5, [pc, #24]	@ (800fd34 <_isatty_r+0x1c>)
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	4604      	mov	r4, r0
 800fd20:	4608      	mov	r0, r1
 800fd22:	602b      	str	r3, [r5, #0]
 800fd24:	f7f2 ffcb 	bl	8002cbe <_isatty>
 800fd28:	1c43      	adds	r3, r0, #1
 800fd2a:	d102      	bne.n	800fd32 <_isatty_r+0x1a>
 800fd2c:	682b      	ldr	r3, [r5, #0]
 800fd2e:	b103      	cbz	r3, 800fd32 <_isatty_r+0x1a>
 800fd30:	6023      	str	r3, [r4, #0]
 800fd32:	bd38      	pop	{r3, r4, r5, pc}
 800fd34:	2001b5d4 	.word	0x2001b5d4

0800fd38 <_sbrk_r>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	4d06      	ldr	r5, [pc, #24]	@ (800fd54 <_sbrk_r+0x1c>)
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4604      	mov	r4, r0
 800fd40:	4608      	mov	r0, r1
 800fd42:	602b      	str	r3, [r5, #0]
 800fd44:	f7f2 ffd4 	bl	8002cf0 <_sbrk>
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	d102      	bne.n	800fd52 <_sbrk_r+0x1a>
 800fd4c:	682b      	ldr	r3, [r5, #0]
 800fd4e:	b103      	cbz	r3, 800fd52 <_sbrk_r+0x1a>
 800fd50:	6023      	str	r3, [r4, #0]
 800fd52:	bd38      	pop	{r3, r4, r5, pc}
 800fd54:	2001b5d4 	.word	0x2001b5d4

0800fd58 <pow>:
 800fd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5a:	ed2d 8b02 	vpush	{d8}
 800fd5e:	eeb0 8a40 	vmov.f32	s16, s0
 800fd62:	eef0 8a60 	vmov.f32	s17, s1
 800fd66:	ec55 4b11 	vmov	r4, r5, d1
 800fd6a:	f000 f975 	bl	8010058 <__ieee754_pow>
 800fd6e:	4622      	mov	r2, r4
 800fd70:	462b      	mov	r3, r5
 800fd72:	4620      	mov	r0, r4
 800fd74:	4629      	mov	r1, r5
 800fd76:	ec57 6b10 	vmov	r6, r7, d0
 800fd7a:	f7f0 feaf 	bl	8000adc <__aeabi_dcmpun>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d13b      	bne.n	800fdfa <pow+0xa2>
 800fd82:	ec51 0b18 	vmov	r0, r1, d8
 800fd86:	2200      	movs	r2, #0
 800fd88:	2300      	movs	r3, #0
 800fd8a:	f7f0 fe75 	bl	8000a78 <__aeabi_dcmpeq>
 800fd8e:	b1b8      	cbz	r0, 800fdc0 <pow+0x68>
 800fd90:	2200      	movs	r2, #0
 800fd92:	2300      	movs	r3, #0
 800fd94:	4620      	mov	r0, r4
 800fd96:	4629      	mov	r1, r5
 800fd98:	f7f0 fe6e 	bl	8000a78 <__aeabi_dcmpeq>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d146      	bne.n	800fe2e <pow+0xd6>
 800fda0:	ec45 4b10 	vmov	d0, r4, r5
 800fda4:	f000 f874 	bl	800fe90 <finite>
 800fda8:	b338      	cbz	r0, 800fdfa <pow+0xa2>
 800fdaa:	2200      	movs	r2, #0
 800fdac:	2300      	movs	r3, #0
 800fdae:	4620      	mov	r0, r4
 800fdb0:	4629      	mov	r1, r5
 800fdb2:	f7f0 fe6b 	bl	8000a8c <__aeabi_dcmplt>
 800fdb6:	b300      	cbz	r0, 800fdfa <pow+0xa2>
 800fdb8:	f7ff fa8c 	bl	800f2d4 <__errno>
 800fdbc:	2322      	movs	r3, #34	@ 0x22
 800fdbe:	e01b      	b.n	800fdf8 <pow+0xa0>
 800fdc0:	ec47 6b10 	vmov	d0, r6, r7
 800fdc4:	f000 f864 	bl	800fe90 <finite>
 800fdc8:	b9e0      	cbnz	r0, 800fe04 <pow+0xac>
 800fdca:	eeb0 0a48 	vmov.f32	s0, s16
 800fdce:	eef0 0a68 	vmov.f32	s1, s17
 800fdd2:	f000 f85d 	bl	800fe90 <finite>
 800fdd6:	b1a8      	cbz	r0, 800fe04 <pow+0xac>
 800fdd8:	ec45 4b10 	vmov	d0, r4, r5
 800fddc:	f000 f858 	bl	800fe90 <finite>
 800fde0:	b180      	cbz	r0, 800fe04 <pow+0xac>
 800fde2:	4632      	mov	r2, r6
 800fde4:	463b      	mov	r3, r7
 800fde6:	4630      	mov	r0, r6
 800fde8:	4639      	mov	r1, r7
 800fdea:	f7f0 fe77 	bl	8000adc <__aeabi_dcmpun>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d0e2      	beq.n	800fdb8 <pow+0x60>
 800fdf2:	f7ff fa6f 	bl	800f2d4 <__errno>
 800fdf6:	2321      	movs	r3, #33	@ 0x21
 800fdf8:	6003      	str	r3, [r0, #0]
 800fdfa:	ecbd 8b02 	vpop	{d8}
 800fdfe:	ec47 6b10 	vmov	d0, r6, r7
 800fe02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe04:	2200      	movs	r2, #0
 800fe06:	2300      	movs	r3, #0
 800fe08:	4630      	mov	r0, r6
 800fe0a:	4639      	mov	r1, r7
 800fe0c:	f7f0 fe34 	bl	8000a78 <__aeabi_dcmpeq>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	d0f2      	beq.n	800fdfa <pow+0xa2>
 800fe14:	eeb0 0a48 	vmov.f32	s0, s16
 800fe18:	eef0 0a68 	vmov.f32	s1, s17
 800fe1c:	f000 f838 	bl	800fe90 <finite>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	d0ea      	beq.n	800fdfa <pow+0xa2>
 800fe24:	ec45 4b10 	vmov	d0, r4, r5
 800fe28:	f000 f832 	bl	800fe90 <finite>
 800fe2c:	e7c3      	b.n	800fdb6 <pow+0x5e>
 800fe2e:	4f01      	ldr	r7, [pc, #4]	@ (800fe34 <pow+0xdc>)
 800fe30:	2600      	movs	r6, #0
 800fe32:	e7e2      	b.n	800fdfa <pow+0xa2>
 800fe34:	3ff00000 	.word	0x3ff00000

0800fe38 <sqrt>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	ed2d 8b02 	vpush	{d8}
 800fe3e:	ec55 4b10 	vmov	r4, r5, d0
 800fe42:	f000 f831 	bl	800fea8 <__ieee754_sqrt>
 800fe46:	4622      	mov	r2, r4
 800fe48:	462b      	mov	r3, r5
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	eeb0 8a40 	vmov.f32	s16, s0
 800fe52:	eef0 8a60 	vmov.f32	s17, s1
 800fe56:	f7f0 fe41 	bl	8000adc <__aeabi_dcmpun>
 800fe5a:	b990      	cbnz	r0, 800fe82 <sqrt+0x4a>
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	2300      	movs	r3, #0
 800fe60:	4620      	mov	r0, r4
 800fe62:	4629      	mov	r1, r5
 800fe64:	f7f0 fe12 	bl	8000a8c <__aeabi_dcmplt>
 800fe68:	b158      	cbz	r0, 800fe82 <sqrt+0x4a>
 800fe6a:	f7ff fa33 	bl	800f2d4 <__errno>
 800fe6e:	2321      	movs	r3, #33	@ 0x21
 800fe70:	6003      	str	r3, [r0, #0]
 800fe72:	2200      	movs	r2, #0
 800fe74:	2300      	movs	r3, #0
 800fe76:	4610      	mov	r0, r2
 800fe78:	4619      	mov	r1, r3
 800fe7a:	f7f0 fcbf 	bl	80007fc <__aeabi_ddiv>
 800fe7e:	ec41 0b18 	vmov	d8, r0, r1
 800fe82:	eeb0 0a48 	vmov.f32	s0, s16
 800fe86:	eef0 0a68 	vmov.f32	s1, s17
 800fe8a:	ecbd 8b02 	vpop	{d8}
 800fe8e:	bd38      	pop	{r3, r4, r5, pc}

0800fe90 <finite>:
 800fe90:	b082      	sub	sp, #8
 800fe92:	ed8d 0b00 	vstr	d0, [sp]
 800fe96:	9801      	ldr	r0, [sp, #4]
 800fe98:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fe9c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fea0:	0fc0      	lsrs	r0, r0, #31
 800fea2:	b002      	add	sp, #8
 800fea4:	4770      	bx	lr
	...

0800fea8 <__ieee754_sqrt>:
 800fea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feac:	4a66      	ldr	r2, [pc, #408]	@ (8010048 <__ieee754_sqrt+0x1a0>)
 800feae:	ec55 4b10 	vmov	r4, r5, d0
 800feb2:	43aa      	bics	r2, r5
 800feb4:	462b      	mov	r3, r5
 800feb6:	4621      	mov	r1, r4
 800feb8:	d110      	bne.n	800fedc <__ieee754_sqrt+0x34>
 800feba:	4622      	mov	r2, r4
 800febc:	4620      	mov	r0, r4
 800febe:	4629      	mov	r1, r5
 800fec0:	f7f0 fb72 	bl	80005a8 <__aeabi_dmul>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4620      	mov	r0, r4
 800feca:	4629      	mov	r1, r5
 800fecc:	f7f0 f9b6 	bl	800023c <__adddf3>
 800fed0:	4604      	mov	r4, r0
 800fed2:	460d      	mov	r5, r1
 800fed4:	ec45 4b10 	vmov	d0, r4, r5
 800fed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fedc:	2d00      	cmp	r5, #0
 800fede:	dc0e      	bgt.n	800fefe <__ieee754_sqrt+0x56>
 800fee0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fee4:	4322      	orrs	r2, r4
 800fee6:	d0f5      	beq.n	800fed4 <__ieee754_sqrt+0x2c>
 800fee8:	b19d      	cbz	r5, 800ff12 <__ieee754_sqrt+0x6a>
 800feea:	4622      	mov	r2, r4
 800feec:	4620      	mov	r0, r4
 800feee:	4629      	mov	r1, r5
 800fef0:	f7f0 f9a2 	bl	8000238 <__aeabi_dsub>
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	f7f0 fc80 	bl	80007fc <__aeabi_ddiv>
 800fefc:	e7e8      	b.n	800fed0 <__ieee754_sqrt+0x28>
 800fefe:	152a      	asrs	r2, r5, #20
 800ff00:	d115      	bne.n	800ff2e <__ieee754_sqrt+0x86>
 800ff02:	2000      	movs	r0, #0
 800ff04:	e009      	b.n	800ff1a <__ieee754_sqrt+0x72>
 800ff06:	0acb      	lsrs	r3, r1, #11
 800ff08:	3a15      	subs	r2, #21
 800ff0a:	0549      	lsls	r1, r1, #21
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d0fa      	beq.n	800ff06 <__ieee754_sqrt+0x5e>
 800ff10:	e7f7      	b.n	800ff02 <__ieee754_sqrt+0x5a>
 800ff12:	462a      	mov	r2, r5
 800ff14:	e7fa      	b.n	800ff0c <__ieee754_sqrt+0x64>
 800ff16:	005b      	lsls	r3, r3, #1
 800ff18:	3001      	adds	r0, #1
 800ff1a:	02dc      	lsls	r4, r3, #11
 800ff1c:	d5fb      	bpl.n	800ff16 <__ieee754_sqrt+0x6e>
 800ff1e:	1e44      	subs	r4, r0, #1
 800ff20:	1b12      	subs	r2, r2, r4
 800ff22:	f1c0 0420 	rsb	r4, r0, #32
 800ff26:	fa21 f404 	lsr.w	r4, r1, r4
 800ff2a:	4323      	orrs	r3, r4
 800ff2c:	4081      	lsls	r1, r0
 800ff2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff32:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ff36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff3a:	07d2      	lsls	r2, r2, #31
 800ff3c:	bf5c      	itt	pl
 800ff3e:	005b      	lslpl	r3, r3, #1
 800ff40:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ff44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff48:	bf58      	it	pl
 800ff4a:	0049      	lslpl	r1, r1, #1
 800ff4c:	2600      	movs	r6, #0
 800ff4e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ff52:	107f      	asrs	r7, r7, #1
 800ff54:	0049      	lsls	r1, r1, #1
 800ff56:	2016      	movs	r0, #22
 800ff58:	4632      	mov	r2, r6
 800ff5a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ff5e:	1915      	adds	r5, r2, r4
 800ff60:	429d      	cmp	r5, r3
 800ff62:	bfde      	ittt	le
 800ff64:	192a      	addle	r2, r5, r4
 800ff66:	1b5b      	suble	r3, r3, r5
 800ff68:	1936      	addle	r6, r6, r4
 800ff6a:	0fcd      	lsrs	r5, r1, #31
 800ff6c:	3801      	subs	r0, #1
 800ff6e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ff72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ff76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ff7a:	d1f0      	bne.n	800ff5e <__ieee754_sqrt+0xb6>
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	2420      	movs	r4, #32
 800ff80:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ff84:	4293      	cmp	r3, r2
 800ff86:	eb0c 0e00 	add.w	lr, ip, r0
 800ff8a:	dc02      	bgt.n	800ff92 <__ieee754_sqrt+0xea>
 800ff8c:	d113      	bne.n	800ffb6 <__ieee754_sqrt+0x10e>
 800ff8e:	458e      	cmp	lr, r1
 800ff90:	d811      	bhi.n	800ffb6 <__ieee754_sqrt+0x10e>
 800ff92:	f1be 0f00 	cmp.w	lr, #0
 800ff96:	eb0e 000c 	add.w	r0, lr, ip
 800ff9a:	da3f      	bge.n	801001c <__ieee754_sqrt+0x174>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	db3d      	blt.n	801001c <__ieee754_sqrt+0x174>
 800ffa0:	f102 0801 	add.w	r8, r2, #1
 800ffa4:	1a9b      	subs	r3, r3, r2
 800ffa6:	458e      	cmp	lr, r1
 800ffa8:	bf88      	it	hi
 800ffaa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ffae:	eba1 010e 	sub.w	r1, r1, lr
 800ffb2:	4465      	add	r5, ip
 800ffb4:	4642      	mov	r2, r8
 800ffb6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ffba:	3c01      	subs	r4, #1
 800ffbc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ffc0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ffc4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ffc8:	d1dc      	bne.n	800ff84 <__ieee754_sqrt+0xdc>
 800ffca:	4319      	orrs	r1, r3
 800ffcc:	d01b      	beq.n	8010006 <__ieee754_sqrt+0x15e>
 800ffce:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801004c <__ieee754_sqrt+0x1a4>
 800ffd2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8010050 <__ieee754_sqrt+0x1a8>
 800ffd6:	e9da 0100 	ldrd	r0, r1, [sl]
 800ffda:	e9db 2300 	ldrd	r2, r3, [fp]
 800ffde:	f7f0 f92b 	bl	8000238 <__aeabi_dsub>
 800ffe2:	e9da 8900 	ldrd	r8, r9, [sl]
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	460b      	mov	r3, r1
 800ffea:	4640      	mov	r0, r8
 800ffec:	4649      	mov	r1, r9
 800ffee:	f7f0 fd57 	bl	8000aa0 <__aeabi_dcmple>
 800fff2:	b140      	cbz	r0, 8010006 <__ieee754_sqrt+0x15e>
 800fff4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800fff8:	e9da 0100 	ldrd	r0, r1, [sl]
 800fffc:	e9db 2300 	ldrd	r2, r3, [fp]
 8010000:	d10e      	bne.n	8010020 <__ieee754_sqrt+0x178>
 8010002:	3601      	adds	r6, #1
 8010004:	4625      	mov	r5, r4
 8010006:	1073      	asrs	r3, r6, #1
 8010008:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801000c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8010010:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8010014:	086b      	lsrs	r3, r5, #1
 8010016:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801001a:	e759      	b.n	800fed0 <__ieee754_sqrt+0x28>
 801001c:	4690      	mov	r8, r2
 801001e:	e7c1      	b.n	800ffa4 <__ieee754_sqrt+0xfc>
 8010020:	f7f0 f90c 	bl	800023c <__adddf3>
 8010024:	e9da 8900 	ldrd	r8, r9, [sl]
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	4640      	mov	r0, r8
 801002e:	4649      	mov	r1, r9
 8010030:	f7f0 fd2c 	bl	8000a8c <__aeabi_dcmplt>
 8010034:	b120      	cbz	r0, 8010040 <__ieee754_sqrt+0x198>
 8010036:	1cab      	adds	r3, r5, #2
 8010038:	bf08      	it	eq
 801003a:	3601      	addeq	r6, #1
 801003c:	3502      	adds	r5, #2
 801003e:	e7e2      	b.n	8010006 <__ieee754_sqrt+0x15e>
 8010040:	1c6b      	adds	r3, r5, #1
 8010042:	f023 0501 	bic.w	r5, r3, #1
 8010046:	e7de      	b.n	8010006 <__ieee754_sqrt+0x15e>
 8010048:	7ff00000 	.word	0x7ff00000
 801004c:	08012410 	.word	0x08012410
 8010050:	08012408 	.word	0x08012408
 8010054:	00000000 	.word	0x00000000

08010058 <__ieee754_pow>:
 8010058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	b091      	sub	sp, #68	@ 0x44
 801005e:	ed8d 1b00 	vstr	d1, [sp]
 8010062:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010066:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801006a:	ea5a 0001 	orrs.w	r0, sl, r1
 801006e:	ec57 6b10 	vmov	r6, r7, d0
 8010072:	d113      	bne.n	801009c <__ieee754_pow+0x44>
 8010074:	19b3      	adds	r3, r6, r6
 8010076:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801007a:	4152      	adcs	r2, r2
 801007c:	4298      	cmp	r0, r3
 801007e:	4b9a      	ldr	r3, [pc, #616]	@ (80102e8 <__ieee754_pow+0x290>)
 8010080:	4193      	sbcs	r3, r2
 8010082:	f080 84ee 	bcs.w	8010a62 <__ieee754_pow+0xa0a>
 8010086:	e9dd 2300 	ldrd	r2, r3, [sp]
 801008a:	4630      	mov	r0, r6
 801008c:	4639      	mov	r1, r7
 801008e:	f7f0 f8d5 	bl	800023c <__adddf3>
 8010092:	ec41 0b10 	vmov	d0, r0, r1
 8010096:	b011      	add	sp, #68	@ 0x44
 8010098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801009c:	4a93      	ldr	r2, [pc, #588]	@ (80102ec <__ieee754_pow+0x294>)
 801009e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80100a2:	4295      	cmp	r5, r2
 80100a4:	46b8      	mov	r8, r7
 80100a6:	4633      	mov	r3, r6
 80100a8:	d80a      	bhi.n	80100c0 <__ieee754_pow+0x68>
 80100aa:	d104      	bne.n	80100b6 <__ieee754_pow+0x5e>
 80100ac:	2e00      	cmp	r6, #0
 80100ae:	d1ea      	bne.n	8010086 <__ieee754_pow+0x2e>
 80100b0:	45aa      	cmp	sl, r5
 80100b2:	d8e8      	bhi.n	8010086 <__ieee754_pow+0x2e>
 80100b4:	e001      	b.n	80100ba <__ieee754_pow+0x62>
 80100b6:	4592      	cmp	sl, r2
 80100b8:	d802      	bhi.n	80100c0 <__ieee754_pow+0x68>
 80100ba:	4592      	cmp	sl, r2
 80100bc:	d10f      	bne.n	80100de <__ieee754_pow+0x86>
 80100be:	b171      	cbz	r1, 80100de <__ieee754_pow+0x86>
 80100c0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80100c4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80100c8:	ea58 0803 	orrs.w	r8, r8, r3
 80100cc:	d1db      	bne.n	8010086 <__ieee754_pow+0x2e>
 80100ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80100d2:	18db      	adds	r3, r3, r3
 80100d4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80100d8:	4152      	adcs	r2, r2
 80100da:	4598      	cmp	r8, r3
 80100dc:	e7cf      	b.n	801007e <__ieee754_pow+0x26>
 80100de:	f1b8 0f00 	cmp.w	r8, #0
 80100e2:	46ab      	mov	fp, r5
 80100e4:	da43      	bge.n	801016e <__ieee754_pow+0x116>
 80100e6:	4a82      	ldr	r2, [pc, #520]	@ (80102f0 <__ieee754_pow+0x298>)
 80100e8:	4592      	cmp	sl, r2
 80100ea:	d856      	bhi.n	801019a <__ieee754_pow+0x142>
 80100ec:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80100f0:	4592      	cmp	sl, r2
 80100f2:	f240 84c5 	bls.w	8010a80 <__ieee754_pow+0xa28>
 80100f6:	ea4f 522a 	mov.w	r2, sl, asr #20
 80100fa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80100fe:	2a14      	cmp	r2, #20
 8010100:	dd18      	ble.n	8010134 <__ieee754_pow+0xdc>
 8010102:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010106:	fa21 f402 	lsr.w	r4, r1, r2
 801010a:	fa04 f202 	lsl.w	r2, r4, r2
 801010e:	428a      	cmp	r2, r1
 8010110:	f040 84b6 	bne.w	8010a80 <__ieee754_pow+0xa28>
 8010114:	f004 0401 	and.w	r4, r4, #1
 8010118:	f1c4 0402 	rsb	r4, r4, #2
 801011c:	2900      	cmp	r1, #0
 801011e:	d159      	bne.n	80101d4 <__ieee754_pow+0x17c>
 8010120:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8010124:	d148      	bne.n	80101b8 <__ieee754_pow+0x160>
 8010126:	4632      	mov	r2, r6
 8010128:	463b      	mov	r3, r7
 801012a:	4630      	mov	r0, r6
 801012c:	4639      	mov	r1, r7
 801012e:	f7f0 fa3b 	bl	80005a8 <__aeabi_dmul>
 8010132:	e7ae      	b.n	8010092 <__ieee754_pow+0x3a>
 8010134:	2900      	cmp	r1, #0
 8010136:	d14c      	bne.n	80101d2 <__ieee754_pow+0x17a>
 8010138:	f1c2 0214 	rsb	r2, r2, #20
 801013c:	fa4a f402 	asr.w	r4, sl, r2
 8010140:	fa04 f202 	lsl.w	r2, r4, r2
 8010144:	4552      	cmp	r2, sl
 8010146:	f040 8498 	bne.w	8010a7a <__ieee754_pow+0xa22>
 801014a:	f004 0401 	and.w	r4, r4, #1
 801014e:	f1c4 0402 	rsb	r4, r4, #2
 8010152:	4a68      	ldr	r2, [pc, #416]	@ (80102f4 <__ieee754_pow+0x29c>)
 8010154:	4592      	cmp	sl, r2
 8010156:	d1e3      	bne.n	8010120 <__ieee754_pow+0xc8>
 8010158:	f1b9 0f00 	cmp.w	r9, #0
 801015c:	f280 8489 	bge.w	8010a72 <__ieee754_pow+0xa1a>
 8010160:	4964      	ldr	r1, [pc, #400]	@ (80102f4 <__ieee754_pow+0x29c>)
 8010162:	4632      	mov	r2, r6
 8010164:	463b      	mov	r3, r7
 8010166:	2000      	movs	r0, #0
 8010168:	f7f0 fb48 	bl	80007fc <__aeabi_ddiv>
 801016c:	e791      	b.n	8010092 <__ieee754_pow+0x3a>
 801016e:	2400      	movs	r4, #0
 8010170:	bb81      	cbnz	r1, 80101d4 <__ieee754_pow+0x17c>
 8010172:	4a5e      	ldr	r2, [pc, #376]	@ (80102ec <__ieee754_pow+0x294>)
 8010174:	4592      	cmp	sl, r2
 8010176:	d1ec      	bne.n	8010152 <__ieee754_pow+0xfa>
 8010178:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 801017c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010180:	431a      	orrs	r2, r3
 8010182:	f000 846e 	beq.w	8010a62 <__ieee754_pow+0xa0a>
 8010186:	4b5c      	ldr	r3, [pc, #368]	@ (80102f8 <__ieee754_pow+0x2a0>)
 8010188:	429d      	cmp	r5, r3
 801018a:	d908      	bls.n	801019e <__ieee754_pow+0x146>
 801018c:	f1b9 0f00 	cmp.w	r9, #0
 8010190:	f280 846b 	bge.w	8010a6a <__ieee754_pow+0xa12>
 8010194:	2000      	movs	r0, #0
 8010196:	2100      	movs	r1, #0
 8010198:	e77b      	b.n	8010092 <__ieee754_pow+0x3a>
 801019a:	2402      	movs	r4, #2
 801019c:	e7e8      	b.n	8010170 <__ieee754_pow+0x118>
 801019e:	f1b9 0f00 	cmp.w	r9, #0
 80101a2:	f04f 0000 	mov.w	r0, #0
 80101a6:	f04f 0100 	mov.w	r1, #0
 80101aa:	f6bf af72 	bge.w	8010092 <__ieee754_pow+0x3a>
 80101ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 80101b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80101b6:	e76c      	b.n	8010092 <__ieee754_pow+0x3a>
 80101b8:	4a50      	ldr	r2, [pc, #320]	@ (80102fc <__ieee754_pow+0x2a4>)
 80101ba:	4591      	cmp	r9, r2
 80101bc:	d10a      	bne.n	80101d4 <__ieee754_pow+0x17c>
 80101be:	f1b8 0f00 	cmp.w	r8, #0
 80101c2:	db07      	blt.n	80101d4 <__ieee754_pow+0x17c>
 80101c4:	ec47 6b10 	vmov	d0, r6, r7
 80101c8:	b011      	add	sp, #68	@ 0x44
 80101ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ce:	f7ff be6b 	b.w	800fea8 <__ieee754_sqrt>
 80101d2:	2400      	movs	r4, #0
 80101d4:	ec47 6b10 	vmov	d0, r6, r7
 80101d8:	9302      	str	r3, [sp, #8]
 80101da:	f000 fc87 	bl	8010aec <fabs>
 80101de:	9b02      	ldr	r3, [sp, #8]
 80101e0:	ec51 0b10 	vmov	r0, r1, d0
 80101e4:	bb43      	cbnz	r3, 8010238 <__ieee754_pow+0x1e0>
 80101e6:	4b43      	ldr	r3, [pc, #268]	@ (80102f4 <__ieee754_pow+0x29c>)
 80101e8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d000      	beq.n	80101f2 <__ieee754_pow+0x19a>
 80101f0:	bb15      	cbnz	r5, 8010238 <__ieee754_pow+0x1e0>
 80101f2:	f1b9 0f00 	cmp.w	r9, #0
 80101f6:	da05      	bge.n	8010204 <__ieee754_pow+0x1ac>
 80101f8:	4602      	mov	r2, r0
 80101fa:	460b      	mov	r3, r1
 80101fc:	2000      	movs	r0, #0
 80101fe:	493d      	ldr	r1, [pc, #244]	@ (80102f4 <__ieee754_pow+0x29c>)
 8010200:	f7f0 fafc 	bl	80007fc <__aeabi_ddiv>
 8010204:	f1b8 0f00 	cmp.w	r8, #0
 8010208:	f6bf af43 	bge.w	8010092 <__ieee754_pow+0x3a>
 801020c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010210:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010214:	4325      	orrs	r5, r4
 8010216:	d108      	bne.n	801022a <__ieee754_pow+0x1d2>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	4610      	mov	r0, r2
 801021e:	4619      	mov	r1, r3
 8010220:	f7f0 f80a 	bl	8000238 <__aeabi_dsub>
 8010224:	4602      	mov	r2, r0
 8010226:	460b      	mov	r3, r1
 8010228:	e79e      	b.n	8010168 <__ieee754_pow+0x110>
 801022a:	2c01      	cmp	r4, #1
 801022c:	f47f af31 	bne.w	8010092 <__ieee754_pow+0x3a>
 8010230:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010234:	4619      	mov	r1, r3
 8010236:	e72c      	b.n	8010092 <__ieee754_pow+0x3a>
 8010238:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801023c:	3b01      	subs	r3, #1
 801023e:	ea53 0204 	orrs.w	r2, r3, r4
 8010242:	d102      	bne.n	801024a <__ieee754_pow+0x1f2>
 8010244:	4632      	mov	r2, r6
 8010246:	463b      	mov	r3, r7
 8010248:	e7e8      	b.n	801021c <__ieee754_pow+0x1c4>
 801024a:	3c01      	subs	r4, #1
 801024c:	431c      	orrs	r4, r3
 801024e:	d016      	beq.n	801027e <__ieee754_pow+0x226>
 8010250:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80102d8 <__ieee754_pow+0x280>
 8010254:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010258:	ed8d 7b02 	vstr	d7, [sp, #8]
 801025c:	f240 8110 	bls.w	8010480 <__ieee754_pow+0x428>
 8010260:	4b27      	ldr	r3, [pc, #156]	@ (8010300 <__ieee754_pow+0x2a8>)
 8010262:	459a      	cmp	sl, r3
 8010264:	4b24      	ldr	r3, [pc, #144]	@ (80102f8 <__ieee754_pow+0x2a0>)
 8010266:	d916      	bls.n	8010296 <__ieee754_pow+0x23e>
 8010268:	429d      	cmp	r5, r3
 801026a:	d80b      	bhi.n	8010284 <__ieee754_pow+0x22c>
 801026c:	f1b9 0f00 	cmp.w	r9, #0
 8010270:	da0b      	bge.n	801028a <__ieee754_pow+0x232>
 8010272:	2000      	movs	r0, #0
 8010274:	b011      	add	sp, #68	@ 0x44
 8010276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801027a:	f000 bcf1 	b.w	8010c60 <__math_oflow>
 801027e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80102e0 <__ieee754_pow+0x288>
 8010282:	e7e7      	b.n	8010254 <__ieee754_pow+0x1fc>
 8010284:	f1b9 0f00 	cmp.w	r9, #0
 8010288:	dcf3      	bgt.n	8010272 <__ieee754_pow+0x21a>
 801028a:	2000      	movs	r0, #0
 801028c:	b011      	add	sp, #68	@ 0x44
 801028e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010292:	f000 bcdd 	b.w	8010c50 <__math_uflow>
 8010296:	429d      	cmp	r5, r3
 8010298:	d20c      	bcs.n	80102b4 <__ieee754_pow+0x25c>
 801029a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801029e:	2200      	movs	r2, #0
 80102a0:	2300      	movs	r3, #0
 80102a2:	f7f0 fbf3 	bl	8000a8c <__aeabi_dcmplt>
 80102a6:	3800      	subs	r0, #0
 80102a8:	bf18      	it	ne
 80102aa:	2001      	movne	r0, #1
 80102ac:	f1b9 0f00 	cmp.w	r9, #0
 80102b0:	daec      	bge.n	801028c <__ieee754_pow+0x234>
 80102b2:	e7df      	b.n	8010274 <__ieee754_pow+0x21c>
 80102b4:	4b0f      	ldr	r3, [pc, #60]	@ (80102f4 <__ieee754_pow+0x29c>)
 80102b6:	429d      	cmp	r5, r3
 80102b8:	f04f 0200 	mov.w	r2, #0
 80102bc:	d922      	bls.n	8010304 <__ieee754_pow+0x2ac>
 80102be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102c2:	2300      	movs	r3, #0
 80102c4:	f7f0 fbe2 	bl	8000a8c <__aeabi_dcmplt>
 80102c8:	3800      	subs	r0, #0
 80102ca:	bf18      	it	ne
 80102cc:	2001      	movne	r0, #1
 80102ce:	f1b9 0f00 	cmp.w	r9, #0
 80102d2:	dccf      	bgt.n	8010274 <__ieee754_pow+0x21c>
 80102d4:	e7da      	b.n	801028c <__ieee754_pow+0x234>
 80102d6:	bf00      	nop
 80102d8:	00000000 	.word	0x00000000
 80102dc:	3ff00000 	.word	0x3ff00000
 80102e0:	00000000 	.word	0x00000000
 80102e4:	bff00000 	.word	0xbff00000
 80102e8:	fff00000 	.word	0xfff00000
 80102ec:	7ff00000 	.word	0x7ff00000
 80102f0:	433fffff 	.word	0x433fffff
 80102f4:	3ff00000 	.word	0x3ff00000
 80102f8:	3fefffff 	.word	0x3fefffff
 80102fc:	3fe00000 	.word	0x3fe00000
 8010300:	43f00000 	.word	0x43f00000
 8010304:	4b5a      	ldr	r3, [pc, #360]	@ (8010470 <__ieee754_pow+0x418>)
 8010306:	f7ef ff97 	bl	8000238 <__aeabi_dsub>
 801030a:	a351      	add	r3, pc, #324	@ (adr r3, 8010450 <__ieee754_pow+0x3f8>)
 801030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010310:	4604      	mov	r4, r0
 8010312:	460d      	mov	r5, r1
 8010314:	f7f0 f948 	bl	80005a8 <__aeabi_dmul>
 8010318:	a34f      	add	r3, pc, #316	@ (adr r3, 8010458 <__ieee754_pow+0x400>)
 801031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031e:	4606      	mov	r6, r0
 8010320:	460f      	mov	r7, r1
 8010322:	4620      	mov	r0, r4
 8010324:	4629      	mov	r1, r5
 8010326:	f7f0 f93f 	bl	80005a8 <__aeabi_dmul>
 801032a:	4b52      	ldr	r3, [pc, #328]	@ (8010474 <__ieee754_pow+0x41c>)
 801032c:	4682      	mov	sl, r0
 801032e:	468b      	mov	fp, r1
 8010330:	2200      	movs	r2, #0
 8010332:	4620      	mov	r0, r4
 8010334:	4629      	mov	r1, r5
 8010336:	f7f0 f937 	bl	80005a8 <__aeabi_dmul>
 801033a:	4602      	mov	r2, r0
 801033c:	460b      	mov	r3, r1
 801033e:	a148      	add	r1, pc, #288	@ (adr r1, 8010460 <__ieee754_pow+0x408>)
 8010340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010344:	f7ef ff78 	bl	8000238 <__aeabi_dsub>
 8010348:	4622      	mov	r2, r4
 801034a:	462b      	mov	r3, r5
 801034c:	f7f0 f92c 	bl	80005a8 <__aeabi_dmul>
 8010350:	4602      	mov	r2, r0
 8010352:	460b      	mov	r3, r1
 8010354:	2000      	movs	r0, #0
 8010356:	4948      	ldr	r1, [pc, #288]	@ (8010478 <__ieee754_pow+0x420>)
 8010358:	f7ef ff6e 	bl	8000238 <__aeabi_dsub>
 801035c:	4622      	mov	r2, r4
 801035e:	4680      	mov	r8, r0
 8010360:	4689      	mov	r9, r1
 8010362:	462b      	mov	r3, r5
 8010364:	4620      	mov	r0, r4
 8010366:	4629      	mov	r1, r5
 8010368:	f7f0 f91e 	bl	80005a8 <__aeabi_dmul>
 801036c:	4602      	mov	r2, r0
 801036e:	460b      	mov	r3, r1
 8010370:	4640      	mov	r0, r8
 8010372:	4649      	mov	r1, r9
 8010374:	f7f0 f918 	bl	80005a8 <__aeabi_dmul>
 8010378:	a33b      	add	r3, pc, #236	@ (adr r3, 8010468 <__ieee754_pow+0x410>)
 801037a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037e:	f7f0 f913 	bl	80005a8 <__aeabi_dmul>
 8010382:	4602      	mov	r2, r0
 8010384:	460b      	mov	r3, r1
 8010386:	4650      	mov	r0, sl
 8010388:	4659      	mov	r1, fp
 801038a:	f7ef ff55 	bl	8000238 <__aeabi_dsub>
 801038e:	4602      	mov	r2, r0
 8010390:	460b      	mov	r3, r1
 8010392:	4680      	mov	r8, r0
 8010394:	4689      	mov	r9, r1
 8010396:	4630      	mov	r0, r6
 8010398:	4639      	mov	r1, r7
 801039a:	f7ef ff4f 	bl	800023c <__adddf3>
 801039e:	2400      	movs	r4, #0
 80103a0:	4632      	mov	r2, r6
 80103a2:	463b      	mov	r3, r7
 80103a4:	4620      	mov	r0, r4
 80103a6:	460d      	mov	r5, r1
 80103a8:	f7ef ff46 	bl	8000238 <__aeabi_dsub>
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4640      	mov	r0, r8
 80103b2:	4649      	mov	r1, r9
 80103b4:	f7ef ff40 	bl	8000238 <__aeabi_dsub>
 80103b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80103c0:	2300      	movs	r3, #0
 80103c2:	9304      	str	r3, [sp, #16]
 80103c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80103c8:	4606      	mov	r6, r0
 80103ca:	460f      	mov	r7, r1
 80103cc:	465b      	mov	r3, fp
 80103ce:	4652      	mov	r2, sl
 80103d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80103d4:	f7ef ff30 	bl	8000238 <__aeabi_dsub>
 80103d8:	4622      	mov	r2, r4
 80103da:	462b      	mov	r3, r5
 80103dc:	f7f0 f8e4 	bl	80005a8 <__aeabi_dmul>
 80103e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103e4:	4680      	mov	r8, r0
 80103e6:	4689      	mov	r9, r1
 80103e8:	4630      	mov	r0, r6
 80103ea:	4639      	mov	r1, r7
 80103ec:	f7f0 f8dc 	bl	80005a8 <__aeabi_dmul>
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	4640      	mov	r0, r8
 80103f6:	4649      	mov	r1, r9
 80103f8:	f7ef ff20 	bl	800023c <__adddf3>
 80103fc:	465b      	mov	r3, fp
 80103fe:	4606      	mov	r6, r0
 8010400:	460f      	mov	r7, r1
 8010402:	4652      	mov	r2, sl
 8010404:	4620      	mov	r0, r4
 8010406:	4629      	mov	r1, r5
 8010408:	f7f0 f8ce 	bl	80005a8 <__aeabi_dmul>
 801040c:	460b      	mov	r3, r1
 801040e:	4602      	mov	r2, r0
 8010410:	4680      	mov	r8, r0
 8010412:	4689      	mov	r9, r1
 8010414:	4630      	mov	r0, r6
 8010416:	4639      	mov	r1, r7
 8010418:	f7ef ff10 	bl	800023c <__adddf3>
 801041c:	4b17      	ldr	r3, [pc, #92]	@ (801047c <__ieee754_pow+0x424>)
 801041e:	4299      	cmp	r1, r3
 8010420:	4604      	mov	r4, r0
 8010422:	460d      	mov	r5, r1
 8010424:	468b      	mov	fp, r1
 8010426:	f340 820b 	ble.w	8010840 <__ieee754_pow+0x7e8>
 801042a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801042e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010432:	4303      	orrs	r3, r0
 8010434:	f000 81ea 	beq.w	801080c <__ieee754_pow+0x7b4>
 8010438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801043c:	2200      	movs	r2, #0
 801043e:	2300      	movs	r3, #0
 8010440:	f7f0 fb24 	bl	8000a8c <__aeabi_dcmplt>
 8010444:	3800      	subs	r0, #0
 8010446:	bf18      	it	ne
 8010448:	2001      	movne	r0, #1
 801044a:	e713      	b.n	8010274 <__ieee754_pow+0x21c>
 801044c:	f3af 8000 	nop.w
 8010450:	60000000 	.word	0x60000000
 8010454:	3ff71547 	.word	0x3ff71547
 8010458:	f85ddf44 	.word	0xf85ddf44
 801045c:	3e54ae0b 	.word	0x3e54ae0b
 8010460:	55555555 	.word	0x55555555
 8010464:	3fd55555 	.word	0x3fd55555
 8010468:	652b82fe 	.word	0x652b82fe
 801046c:	3ff71547 	.word	0x3ff71547
 8010470:	3ff00000 	.word	0x3ff00000
 8010474:	3fd00000 	.word	0x3fd00000
 8010478:	3fe00000 	.word	0x3fe00000
 801047c:	408fffff 	.word	0x408fffff
 8010480:	4bd5      	ldr	r3, [pc, #852]	@ (80107d8 <__ieee754_pow+0x780>)
 8010482:	ea08 0303 	and.w	r3, r8, r3
 8010486:	2200      	movs	r2, #0
 8010488:	b92b      	cbnz	r3, 8010496 <__ieee754_pow+0x43e>
 801048a:	4bd4      	ldr	r3, [pc, #848]	@ (80107dc <__ieee754_pow+0x784>)
 801048c:	f7f0 f88c 	bl	80005a8 <__aeabi_dmul>
 8010490:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010494:	468b      	mov	fp, r1
 8010496:	ea4f 532b 	mov.w	r3, fp, asr #20
 801049a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801049e:	4413      	add	r3, r2
 80104a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80104a2:	4bcf      	ldr	r3, [pc, #828]	@ (80107e0 <__ieee754_pow+0x788>)
 80104a4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80104a8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80104ac:	459b      	cmp	fp, r3
 80104ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80104b2:	dd08      	ble.n	80104c6 <__ieee754_pow+0x46e>
 80104b4:	4bcb      	ldr	r3, [pc, #812]	@ (80107e4 <__ieee754_pow+0x78c>)
 80104b6:	459b      	cmp	fp, r3
 80104b8:	f340 81a5 	ble.w	8010806 <__ieee754_pow+0x7ae>
 80104bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104be:	3301      	adds	r3, #1
 80104c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80104c2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80104c6:	f04f 0a00 	mov.w	sl, #0
 80104ca:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80104ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104d0:	4bc5      	ldr	r3, [pc, #788]	@ (80107e8 <__ieee754_pow+0x790>)
 80104d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80104d6:	ed93 7b00 	vldr	d7, [r3]
 80104da:	4629      	mov	r1, r5
 80104dc:	ec53 2b17 	vmov	r2, r3, d7
 80104e0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80104e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104e8:	f7ef fea6 	bl	8000238 <__aeabi_dsub>
 80104ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80104f0:	4606      	mov	r6, r0
 80104f2:	460f      	mov	r7, r1
 80104f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104f8:	f7ef fea0 	bl	800023c <__adddf3>
 80104fc:	4602      	mov	r2, r0
 80104fe:	460b      	mov	r3, r1
 8010500:	2000      	movs	r0, #0
 8010502:	49ba      	ldr	r1, [pc, #744]	@ (80107ec <__ieee754_pow+0x794>)
 8010504:	f7f0 f97a 	bl	80007fc <__aeabi_ddiv>
 8010508:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801050c:	4602      	mov	r2, r0
 801050e:	460b      	mov	r3, r1
 8010510:	4630      	mov	r0, r6
 8010512:	4639      	mov	r1, r7
 8010514:	f7f0 f848 	bl	80005a8 <__aeabi_dmul>
 8010518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801051c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010520:	106d      	asrs	r5, r5, #1
 8010522:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010526:	f04f 0b00 	mov.w	fp, #0
 801052a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801052e:	4661      	mov	r1, ip
 8010530:	2200      	movs	r2, #0
 8010532:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010536:	4658      	mov	r0, fp
 8010538:	46e1      	mov	r9, ip
 801053a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801053e:	4614      	mov	r4, r2
 8010540:	461d      	mov	r5, r3
 8010542:	f7f0 f831 	bl	80005a8 <__aeabi_dmul>
 8010546:	4602      	mov	r2, r0
 8010548:	460b      	mov	r3, r1
 801054a:	4630      	mov	r0, r6
 801054c:	4639      	mov	r1, r7
 801054e:	f7ef fe73 	bl	8000238 <__aeabi_dsub>
 8010552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010556:	4606      	mov	r6, r0
 8010558:	460f      	mov	r7, r1
 801055a:	4620      	mov	r0, r4
 801055c:	4629      	mov	r1, r5
 801055e:	f7ef fe6b 	bl	8000238 <__aeabi_dsub>
 8010562:	4602      	mov	r2, r0
 8010564:	460b      	mov	r3, r1
 8010566:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801056a:	f7ef fe65 	bl	8000238 <__aeabi_dsub>
 801056e:	465a      	mov	r2, fp
 8010570:	464b      	mov	r3, r9
 8010572:	f7f0 f819 	bl	80005a8 <__aeabi_dmul>
 8010576:	4602      	mov	r2, r0
 8010578:	460b      	mov	r3, r1
 801057a:	4630      	mov	r0, r6
 801057c:	4639      	mov	r1, r7
 801057e:	f7ef fe5b 	bl	8000238 <__aeabi_dsub>
 8010582:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010586:	f7f0 f80f 	bl	80005a8 <__aeabi_dmul>
 801058a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801058e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010592:	4610      	mov	r0, r2
 8010594:	4619      	mov	r1, r3
 8010596:	f7f0 f807 	bl	80005a8 <__aeabi_dmul>
 801059a:	a37d      	add	r3, pc, #500	@ (adr r3, 8010790 <__ieee754_pow+0x738>)
 801059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a0:	4604      	mov	r4, r0
 80105a2:	460d      	mov	r5, r1
 80105a4:	f7f0 f800 	bl	80005a8 <__aeabi_dmul>
 80105a8:	a37b      	add	r3, pc, #492	@ (adr r3, 8010798 <__ieee754_pow+0x740>)
 80105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ae:	f7ef fe45 	bl	800023c <__adddf3>
 80105b2:	4622      	mov	r2, r4
 80105b4:	462b      	mov	r3, r5
 80105b6:	f7ef fff7 	bl	80005a8 <__aeabi_dmul>
 80105ba:	a379      	add	r3, pc, #484	@ (adr r3, 80107a0 <__ieee754_pow+0x748>)
 80105bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c0:	f7ef fe3c 	bl	800023c <__adddf3>
 80105c4:	4622      	mov	r2, r4
 80105c6:	462b      	mov	r3, r5
 80105c8:	f7ef ffee 	bl	80005a8 <__aeabi_dmul>
 80105cc:	a376      	add	r3, pc, #472	@ (adr r3, 80107a8 <__ieee754_pow+0x750>)
 80105ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d2:	f7ef fe33 	bl	800023c <__adddf3>
 80105d6:	4622      	mov	r2, r4
 80105d8:	462b      	mov	r3, r5
 80105da:	f7ef ffe5 	bl	80005a8 <__aeabi_dmul>
 80105de:	a374      	add	r3, pc, #464	@ (adr r3, 80107b0 <__ieee754_pow+0x758>)
 80105e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e4:	f7ef fe2a 	bl	800023c <__adddf3>
 80105e8:	4622      	mov	r2, r4
 80105ea:	462b      	mov	r3, r5
 80105ec:	f7ef ffdc 	bl	80005a8 <__aeabi_dmul>
 80105f0:	a371      	add	r3, pc, #452	@ (adr r3, 80107b8 <__ieee754_pow+0x760>)
 80105f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f6:	f7ef fe21 	bl	800023c <__adddf3>
 80105fa:	4622      	mov	r2, r4
 80105fc:	4606      	mov	r6, r0
 80105fe:	460f      	mov	r7, r1
 8010600:	462b      	mov	r3, r5
 8010602:	4620      	mov	r0, r4
 8010604:	4629      	mov	r1, r5
 8010606:	f7ef ffcf 	bl	80005a8 <__aeabi_dmul>
 801060a:	4602      	mov	r2, r0
 801060c:	460b      	mov	r3, r1
 801060e:	4630      	mov	r0, r6
 8010610:	4639      	mov	r1, r7
 8010612:	f7ef ffc9 	bl	80005a8 <__aeabi_dmul>
 8010616:	465a      	mov	r2, fp
 8010618:	4604      	mov	r4, r0
 801061a:	460d      	mov	r5, r1
 801061c:	464b      	mov	r3, r9
 801061e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010622:	f7ef fe0b 	bl	800023c <__adddf3>
 8010626:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801062a:	f7ef ffbd 	bl	80005a8 <__aeabi_dmul>
 801062e:	4622      	mov	r2, r4
 8010630:	462b      	mov	r3, r5
 8010632:	f7ef fe03 	bl	800023c <__adddf3>
 8010636:	465a      	mov	r2, fp
 8010638:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801063c:	464b      	mov	r3, r9
 801063e:	4658      	mov	r0, fp
 8010640:	4649      	mov	r1, r9
 8010642:	f7ef ffb1 	bl	80005a8 <__aeabi_dmul>
 8010646:	4b6a      	ldr	r3, [pc, #424]	@ (80107f0 <__ieee754_pow+0x798>)
 8010648:	2200      	movs	r2, #0
 801064a:	4606      	mov	r6, r0
 801064c:	460f      	mov	r7, r1
 801064e:	f7ef fdf5 	bl	800023c <__adddf3>
 8010652:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010656:	f7ef fdf1 	bl	800023c <__adddf3>
 801065a:	46d8      	mov	r8, fp
 801065c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010660:	460d      	mov	r5, r1
 8010662:	465a      	mov	r2, fp
 8010664:	460b      	mov	r3, r1
 8010666:	4640      	mov	r0, r8
 8010668:	4649      	mov	r1, r9
 801066a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801066e:	f7ef ff9b 	bl	80005a8 <__aeabi_dmul>
 8010672:	465c      	mov	r4, fp
 8010674:	4680      	mov	r8, r0
 8010676:	4689      	mov	r9, r1
 8010678:	4b5d      	ldr	r3, [pc, #372]	@ (80107f0 <__ieee754_pow+0x798>)
 801067a:	2200      	movs	r2, #0
 801067c:	4620      	mov	r0, r4
 801067e:	4629      	mov	r1, r5
 8010680:	f7ef fdda 	bl	8000238 <__aeabi_dsub>
 8010684:	4632      	mov	r2, r6
 8010686:	463b      	mov	r3, r7
 8010688:	f7ef fdd6 	bl	8000238 <__aeabi_dsub>
 801068c:	4602      	mov	r2, r0
 801068e:	460b      	mov	r3, r1
 8010690:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010694:	f7ef fdd0 	bl	8000238 <__aeabi_dsub>
 8010698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801069c:	f7ef ff84 	bl	80005a8 <__aeabi_dmul>
 80106a0:	4622      	mov	r2, r4
 80106a2:	4606      	mov	r6, r0
 80106a4:	460f      	mov	r7, r1
 80106a6:	462b      	mov	r3, r5
 80106a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80106ac:	f7ef ff7c 	bl	80005a8 <__aeabi_dmul>
 80106b0:	4602      	mov	r2, r0
 80106b2:	460b      	mov	r3, r1
 80106b4:	4630      	mov	r0, r6
 80106b6:	4639      	mov	r1, r7
 80106b8:	f7ef fdc0 	bl	800023c <__adddf3>
 80106bc:	4606      	mov	r6, r0
 80106be:	460f      	mov	r7, r1
 80106c0:	4602      	mov	r2, r0
 80106c2:	460b      	mov	r3, r1
 80106c4:	4640      	mov	r0, r8
 80106c6:	4649      	mov	r1, r9
 80106c8:	f7ef fdb8 	bl	800023c <__adddf3>
 80106cc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80106d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80107c0 <__ieee754_pow+0x768>)
 80106d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d6:	4658      	mov	r0, fp
 80106d8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80106dc:	460d      	mov	r5, r1
 80106de:	f7ef ff63 	bl	80005a8 <__aeabi_dmul>
 80106e2:	465c      	mov	r4, fp
 80106e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106e8:	4642      	mov	r2, r8
 80106ea:	464b      	mov	r3, r9
 80106ec:	4620      	mov	r0, r4
 80106ee:	4629      	mov	r1, r5
 80106f0:	f7ef fda2 	bl	8000238 <__aeabi_dsub>
 80106f4:	4602      	mov	r2, r0
 80106f6:	460b      	mov	r3, r1
 80106f8:	4630      	mov	r0, r6
 80106fa:	4639      	mov	r1, r7
 80106fc:	f7ef fd9c 	bl	8000238 <__aeabi_dsub>
 8010700:	a331      	add	r3, pc, #196	@ (adr r3, 80107c8 <__ieee754_pow+0x770>)
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	f7ef ff4f 	bl	80005a8 <__aeabi_dmul>
 801070a:	a331      	add	r3, pc, #196	@ (adr r3, 80107d0 <__ieee754_pow+0x778>)
 801070c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010710:	4606      	mov	r6, r0
 8010712:	460f      	mov	r7, r1
 8010714:	4620      	mov	r0, r4
 8010716:	4629      	mov	r1, r5
 8010718:	f7ef ff46 	bl	80005a8 <__aeabi_dmul>
 801071c:	4602      	mov	r2, r0
 801071e:	460b      	mov	r3, r1
 8010720:	4630      	mov	r0, r6
 8010722:	4639      	mov	r1, r7
 8010724:	f7ef fd8a 	bl	800023c <__adddf3>
 8010728:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801072a:	4b32      	ldr	r3, [pc, #200]	@ (80107f4 <__ieee754_pow+0x79c>)
 801072c:	4413      	add	r3, r2
 801072e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010732:	f7ef fd83 	bl	800023c <__adddf3>
 8010736:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801073a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801073c:	f7ef feca 	bl	80004d4 <__aeabi_i2d>
 8010740:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010742:	4b2d      	ldr	r3, [pc, #180]	@ (80107f8 <__ieee754_pow+0x7a0>)
 8010744:	4413      	add	r3, r2
 8010746:	e9d3 8900 	ldrd	r8, r9, [r3]
 801074a:	4606      	mov	r6, r0
 801074c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010750:	460f      	mov	r7, r1
 8010752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010756:	f7ef fd71 	bl	800023c <__adddf3>
 801075a:	4642      	mov	r2, r8
 801075c:	464b      	mov	r3, r9
 801075e:	f7ef fd6d 	bl	800023c <__adddf3>
 8010762:	4632      	mov	r2, r6
 8010764:	463b      	mov	r3, r7
 8010766:	f7ef fd69 	bl	800023c <__adddf3>
 801076a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801076e:	4632      	mov	r2, r6
 8010770:	463b      	mov	r3, r7
 8010772:	4658      	mov	r0, fp
 8010774:	460d      	mov	r5, r1
 8010776:	f7ef fd5f 	bl	8000238 <__aeabi_dsub>
 801077a:	4642      	mov	r2, r8
 801077c:	464b      	mov	r3, r9
 801077e:	f7ef fd5b 	bl	8000238 <__aeabi_dsub>
 8010782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010786:	f7ef fd57 	bl	8000238 <__aeabi_dsub>
 801078a:	465c      	mov	r4, fp
 801078c:	e036      	b.n	80107fc <__ieee754_pow+0x7a4>
 801078e:	bf00      	nop
 8010790:	4a454eef 	.word	0x4a454eef
 8010794:	3fca7e28 	.word	0x3fca7e28
 8010798:	93c9db65 	.word	0x93c9db65
 801079c:	3fcd864a 	.word	0x3fcd864a
 80107a0:	a91d4101 	.word	0xa91d4101
 80107a4:	3fd17460 	.word	0x3fd17460
 80107a8:	518f264d 	.word	0x518f264d
 80107ac:	3fd55555 	.word	0x3fd55555
 80107b0:	db6fabff 	.word	0xdb6fabff
 80107b4:	3fdb6db6 	.word	0x3fdb6db6
 80107b8:	33333303 	.word	0x33333303
 80107bc:	3fe33333 	.word	0x3fe33333
 80107c0:	e0000000 	.word	0xe0000000
 80107c4:	3feec709 	.word	0x3feec709
 80107c8:	dc3a03fd 	.word	0xdc3a03fd
 80107cc:	3feec709 	.word	0x3feec709
 80107d0:	145b01f5 	.word	0x145b01f5
 80107d4:	be3e2fe0 	.word	0xbe3e2fe0
 80107d8:	7ff00000 	.word	0x7ff00000
 80107dc:	43400000 	.word	0x43400000
 80107e0:	0003988e 	.word	0x0003988e
 80107e4:	000bb679 	.word	0x000bb679
 80107e8:	08012438 	.word	0x08012438
 80107ec:	3ff00000 	.word	0x3ff00000
 80107f0:	40080000 	.word	0x40080000
 80107f4:	08012418 	.word	0x08012418
 80107f8:	08012428 	.word	0x08012428
 80107fc:	4602      	mov	r2, r0
 80107fe:	460b      	mov	r3, r1
 8010800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010804:	e5d6      	b.n	80103b4 <__ieee754_pow+0x35c>
 8010806:	f04f 0a01 	mov.w	sl, #1
 801080a:	e65e      	b.n	80104ca <__ieee754_pow+0x472>
 801080c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8010ae4 <__ieee754_pow+0xa8c>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	4630      	mov	r0, r6
 8010814:	4639      	mov	r1, r7
 8010816:	f7ef fd11 	bl	800023c <__adddf3>
 801081a:	4642      	mov	r2, r8
 801081c:	e9cd 0100 	strd	r0, r1, [sp]
 8010820:	464b      	mov	r3, r9
 8010822:	4620      	mov	r0, r4
 8010824:	4629      	mov	r1, r5
 8010826:	f7ef fd07 	bl	8000238 <__aeabi_dsub>
 801082a:	4602      	mov	r2, r0
 801082c:	460b      	mov	r3, r1
 801082e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010832:	f7f0 f949 	bl	8000ac8 <__aeabi_dcmpgt>
 8010836:	2800      	cmp	r0, #0
 8010838:	f47f adfe 	bne.w	8010438 <__ieee754_pow+0x3e0>
 801083c:	4ba2      	ldr	r3, [pc, #648]	@ (8010ac8 <__ieee754_pow+0xa70>)
 801083e:	e022      	b.n	8010886 <__ieee754_pow+0x82e>
 8010840:	4ca2      	ldr	r4, [pc, #648]	@ (8010acc <__ieee754_pow+0xa74>)
 8010842:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010846:	42a3      	cmp	r3, r4
 8010848:	d919      	bls.n	801087e <__ieee754_pow+0x826>
 801084a:	4ba1      	ldr	r3, [pc, #644]	@ (8010ad0 <__ieee754_pow+0xa78>)
 801084c:	440b      	add	r3, r1
 801084e:	4303      	orrs	r3, r0
 8010850:	d009      	beq.n	8010866 <__ieee754_pow+0x80e>
 8010852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010856:	2200      	movs	r2, #0
 8010858:	2300      	movs	r3, #0
 801085a:	f7f0 f917 	bl	8000a8c <__aeabi_dcmplt>
 801085e:	3800      	subs	r0, #0
 8010860:	bf18      	it	ne
 8010862:	2001      	movne	r0, #1
 8010864:	e512      	b.n	801028c <__ieee754_pow+0x234>
 8010866:	4642      	mov	r2, r8
 8010868:	464b      	mov	r3, r9
 801086a:	f7ef fce5 	bl	8000238 <__aeabi_dsub>
 801086e:	4632      	mov	r2, r6
 8010870:	463b      	mov	r3, r7
 8010872:	f7f0 f91f 	bl	8000ab4 <__aeabi_dcmpge>
 8010876:	2800      	cmp	r0, #0
 8010878:	d1eb      	bne.n	8010852 <__ieee754_pow+0x7fa>
 801087a:	4b96      	ldr	r3, [pc, #600]	@ (8010ad4 <__ieee754_pow+0xa7c>)
 801087c:	e003      	b.n	8010886 <__ieee754_pow+0x82e>
 801087e:	4a96      	ldr	r2, [pc, #600]	@ (8010ad8 <__ieee754_pow+0xa80>)
 8010880:	4293      	cmp	r3, r2
 8010882:	f240 80e7 	bls.w	8010a54 <__ieee754_pow+0x9fc>
 8010886:	151b      	asrs	r3, r3, #20
 8010888:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801088c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8010890:	fa4a fa03 	asr.w	sl, sl, r3
 8010894:	44da      	add	sl, fp
 8010896:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801089a:	4890      	ldr	r0, [pc, #576]	@ (8010adc <__ieee754_pow+0xa84>)
 801089c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80108a0:	4108      	asrs	r0, r1
 80108a2:	ea00 030a 	and.w	r3, r0, sl
 80108a6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80108aa:	f1c1 0114 	rsb	r1, r1, #20
 80108ae:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80108b2:	fa4a fa01 	asr.w	sl, sl, r1
 80108b6:	f1bb 0f00 	cmp.w	fp, #0
 80108ba:	4640      	mov	r0, r8
 80108bc:	4649      	mov	r1, r9
 80108be:	f04f 0200 	mov.w	r2, #0
 80108c2:	bfb8      	it	lt
 80108c4:	f1ca 0a00 	rsblt	sl, sl, #0
 80108c8:	f7ef fcb6 	bl	8000238 <__aeabi_dsub>
 80108cc:	4680      	mov	r8, r0
 80108ce:	4689      	mov	r9, r1
 80108d0:	4632      	mov	r2, r6
 80108d2:	463b      	mov	r3, r7
 80108d4:	4640      	mov	r0, r8
 80108d6:	4649      	mov	r1, r9
 80108d8:	f7ef fcb0 	bl	800023c <__adddf3>
 80108dc:	2400      	movs	r4, #0
 80108de:	a36a      	add	r3, pc, #424	@ (adr r3, 8010a88 <__ieee754_pow+0xa30>)
 80108e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e4:	4620      	mov	r0, r4
 80108e6:	460d      	mov	r5, r1
 80108e8:	f7ef fe5e 	bl	80005a8 <__aeabi_dmul>
 80108ec:	4642      	mov	r2, r8
 80108ee:	e9cd 0100 	strd	r0, r1, [sp]
 80108f2:	464b      	mov	r3, r9
 80108f4:	4620      	mov	r0, r4
 80108f6:	4629      	mov	r1, r5
 80108f8:	f7ef fc9e 	bl	8000238 <__aeabi_dsub>
 80108fc:	4602      	mov	r2, r0
 80108fe:	460b      	mov	r3, r1
 8010900:	4630      	mov	r0, r6
 8010902:	4639      	mov	r1, r7
 8010904:	f7ef fc98 	bl	8000238 <__aeabi_dsub>
 8010908:	a361      	add	r3, pc, #388	@ (adr r3, 8010a90 <__ieee754_pow+0xa38>)
 801090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090e:	f7ef fe4b 	bl	80005a8 <__aeabi_dmul>
 8010912:	a361      	add	r3, pc, #388	@ (adr r3, 8010a98 <__ieee754_pow+0xa40>)
 8010914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010918:	4680      	mov	r8, r0
 801091a:	4689      	mov	r9, r1
 801091c:	4620      	mov	r0, r4
 801091e:	4629      	mov	r1, r5
 8010920:	f7ef fe42 	bl	80005a8 <__aeabi_dmul>
 8010924:	4602      	mov	r2, r0
 8010926:	460b      	mov	r3, r1
 8010928:	4640      	mov	r0, r8
 801092a:	4649      	mov	r1, r9
 801092c:	f7ef fc86 	bl	800023c <__adddf3>
 8010930:	4604      	mov	r4, r0
 8010932:	460d      	mov	r5, r1
 8010934:	4602      	mov	r2, r0
 8010936:	460b      	mov	r3, r1
 8010938:	e9dd 0100 	ldrd	r0, r1, [sp]
 801093c:	f7ef fc7e 	bl	800023c <__adddf3>
 8010940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010944:	4680      	mov	r8, r0
 8010946:	4689      	mov	r9, r1
 8010948:	f7ef fc76 	bl	8000238 <__aeabi_dsub>
 801094c:	4602      	mov	r2, r0
 801094e:	460b      	mov	r3, r1
 8010950:	4620      	mov	r0, r4
 8010952:	4629      	mov	r1, r5
 8010954:	f7ef fc70 	bl	8000238 <__aeabi_dsub>
 8010958:	4642      	mov	r2, r8
 801095a:	4606      	mov	r6, r0
 801095c:	460f      	mov	r7, r1
 801095e:	464b      	mov	r3, r9
 8010960:	4640      	mov	r0, r8
 8010962:	4649      	mov	r1, r9
 8010964:	f7ef fe20 	bl	80005a8 <__aeabi_dmul>
 8010968:	a34d      	add	r3, pc, #308	@ (adr r3, 8010aa0 <__ieee754_pow+0xa48>)
 801096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096e:	4604      	mov	r4, r0
 8010970:	460d      	mov	r5, r1
 8010972:	f7ef fe19 	bl	80005a8 <__aeabi_dmul>
 8010976:	a34c      	add	r3, pc, #304	@ (adr r3, 8010aa8 <__ieee754_pow+0xa50>)
 8010978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097c:	f7ef fc5c 	bl	8000238 <__aeabi_dsub>
 8010980:	4622      	mov	r2, r4
 8010982:	462b      	mov	r3, r5
 8010984:	f7ef fe10 	bl	80005a8 <__aeabi_dmul>
 8010988:	a349      	add	r3, pc, #292	@ (adr r3, 8010ab0 <__ieee754_pow+0xa58>)
 801098a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098e:	f7ef fc55 	bl	800023c <__adddf3>
 8010992:	4622      	mov	r2, r4
 8010994:	462b      	mov	r3, r5
 8010996:	f7ef fe07 	bl	80005a8 <__aeabi_dmul>
 801099a:	a347      	add	r3, pc, #284	@ (adr r3, 8010ab8 <__ieee754_pow+0xa60>)
 801099c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a0:	f7ef fc4a 	bl	8000238 <__aeabi_dsub>
 80109a4:	4622      	mov	r2, r4
 80109a6:	462b      	mov	r3, r5
 80109a8:	f7ef fdfe 	bl	80005a8 <__aeabi_dmul>
 80109ac:	a344      	add	r3, pc, #272	@ (adr r3, 8010ac0 <__ieee754_pow+0xa68>)
 80109ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b2:	f7ef fc43 	bl	800023c <__adddf3>
 80109b6:	4622      	mov	r2, r4
 80109b8:	462b      	mov	r3, r5
 80109ba:	f7ef fdf5 	bl	80005a8 <__aeabi_dmul>
 80109be:	4602      	mov	r2, r0
 80109c0:	460b      	mov	r3, r1
 80109c2:	4640      	mov	r0, r8
 80109c4:	4649      	mov	r1, r9
 80109c6:	f7ef fc37 	bl	8000238 <__aeabi_dsub>
 80109ca:	4604      	mov	r4, r0
 80109cc:	460d      	mov	r5, r1
 80109ce:	4602      	mov	r2, r0
 80109d0:	460b      	mov	r3, r1
 80109d2:	4640      	mov	r0, r8
 80109d4:	4649      	mov	r1, r9
 80109d6:	f7ef fde7 	bl	80005a8 <__aeabi_dmul>
 80109da:	2200      	movs	r2, #0
 80109dc:	e9cd 0100 	strd	r0, r1, [sp]
 80109e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80109e4:	4620      	mov	r0, r4
 80109e6:	4629      	mov	r1, r5
 80109e8:	f7ef fc26 	bl	8000238 <__aeabi_dsub>
 80109ec:	4602      	mov	r2, r0
 80109ee:	460b      	mov	r3, r1
 80109f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109f4:	f7ef ff02 	bl	80007fc <__aeabi_ddiv>
 80109f8:	4632      	mov	r2, r6
 80109fa:	4604      	mov	r4, r0
 80109fc:	460d      	mov	r5, r1
 80109fe:	463b      	mov	r3, r7
 8010a00:	4640      	mov	r0, r8
 8010a02:	4649      	mov	r1, r9
 8010a04:	f7ef fdd0 	bl	80005a8 <__aeabi_dmul>
 8010a08:	4632      	mov	r2, r6
 8010a0a:	463b      	mov	r3, r7
 8010a0c:	f7ef fc16 	bl	800023c <__adddf3>
 8010a10:	4602      	mov	r2, r0
 8010a12:	460b      	mov	r3, r1
 8010a14:	4620      	mov	r0, r4
 8010a16:	4629      	mov	r1, r5
 8010a18:	f7ef fc0e 	bl	8000238 <__aeabi_dsub>
 8010a1c:	4642      	mov	r2, r8
 8010a1e:	464b      	mov	r3, r9
 8010a20:	f7ef fc0a 	bl	8000238 <__aeabi_dsub>
 8010a24:	460b      	mov	r3, r1
 8010a26:	4602      	mov	r2, r0
 8010a28:	492d      	ldr	r1, [pc, #180]	@ (8010ae0 <__ieee754_pow+0xa88>)
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	f7ef fc04 	bl	8000238 <__aeabi_dsub>
 8010a30:	ec41 0b10 	vmov	d0, r0, r1
 8010a34:	ee10 3a90 	vmov	r3, s1
 8010a38:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010a3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010a40:	da0b      	bge.n	8010a5a <__ieee754_pow+0xa02>
 8010a42:	4650      	mov	r0, sl
 8010a44:	f000 f85c 	bl	8010b00 <scalbn>
 8010a48:	ec51 0b10 	vmov	r0, r1, d0
 8010a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a50:	f7ff bb6d 	b.w	801012e <__ieee754_pow+0xd6>
 8010a54:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010a58:	e73a      	b.n	80108d0 <__ieee754_pow+0x878>
 8010a5a:	ec51 0b10 	vmov	r0, r1, d0
 8010a5e:	4619      	mov	r1, r3
 8010a60:	e7f4      	b.n	8010a4c <__ieee754_pow+0x9f4>
 8010a62:	491f      	ldr	r1, [pc, #124]	@ (8010ae0 <__ieee754_pow+0xa88>)
 8010a64:	2000      	movs	r0, #0
 8010a66:	f7ff bb14 	b.w	8010092 <__ieee754_pow+0x3a>
 8010a6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a6e:	f7ff bb10 	b.w	8010092 <__ieee754_pow+0x3a>
 8010a72:	4630      	mov	r0, r6
 8010a74:	4639      	mov	r1, r7
 8010a76:	f7ff bb0c 	b.w	8010092 <__ieee754_pow+0x3a>
 8010a7a:	460c      	mov	r4, r1
 8010a7c:	f7ff bb69 	b.w	8010152 <__ieee754_pow+0xfa>
 8010a80:	2400      	movs	r4, #0
 8010a82:	f7ff bb4b 	b.w	801011c <__ieee754_pow+0xc4>
 8010a86:	bf00      	nop
 8010a88:	00000000 	.word	0x00000000
 8010a8c:	3fe62e43 	.word	0x3fe62e43
 8010a90:	fefa39ef 	.word	0xfefa39ef
 8010a94:	3fe62e42 	.word	0x3fe62e42
 8010a98:	0ca86c39 	.word	0x0ca86c39
 8010a9c:	be205c61 	.word	0xbe205c61
 8010aa0:	72bea4d0 	.word	0x72bea4d0
 8010aa4:	3e663769 	.word	0x3e663769
 8010aa8:	c5d26bf1 	.word	0xc5d26bf1
 8010aac:	3ebbbd41 	.word	0x3ebbbd41
 8010ab0:	af25de2c 	.word	0xaf25de2c
 8010ab4:	3f11566a 	.word	0x3f11566a
 8010ab8:	16bebd93 	.word	0x16bebd93
 8010abc:	3f66c16c 	.word	0x3f66c16c
 8010ac0:	5555553e 	.word	0x5555553e
 8010ac4:	3fc55555 	.word	0x3fc55555
 8010ac8:	40900000 	.word	0x40900000
 8010acc:	4090cbff 	.word	0x4090cbff
 8010ad0:	3f6f3400 	.word	0x3f6f3400
 8010ad4:	4090cc00 	.word	0x4090cc00
 8010ad8:	3fe00000 	.word	0x3fe00000
 8010adc:	fff00000 	.word	0xfff00000
 8010ae0:	3ff00000 	.word	0x3ff00000
 8010ae4:	652b82fe 	.word	0x652b82fe
 8010ae8:	3c971547 	.word	0x3c971547

08010aec <fabs>:
 8010aec:	ec51 0b10 	vmov	r0, r1, d0
 8010af0:	4602      	mov	r2, r0
 8010af2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010af6:	ec43 2b10 	vmov	d0, r2, r3
 8010afa:	4770      	bx	lr
 8010afc:	0000      	movs	r0, r0
	...

08010b00 <scalbn>:
 8010b00:	b570      	push	{r4, r5, r6, lr}
 8010b02:	ec55 4b10 	vmov	r4, r5, d0
 8010b06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010b0a:	4606      	mov	r6, r0
 8010b0c:	462b      	mov	r3, r5
 8010b0e:	b991      	cbnz	r1, 8010b36 <scalbn+0x36>
 8010b10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010b14:	4323      	orrs	r3, r4
 8010b16:	d03b      	beq.n	8010b90 <scalbn+0x90>
 8010b18:	4b33      	ldr	r3, [pc, #204]	@ (8010be8 <scalbn+0xe8>)
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f7ef fd42 	bl	80005a8 <__aeabi_dmul>
 8010b24:	4b31      	ldr	r3, [pc, #196]	@ (8010bec <scalbn+0xec>)
 8010b26:	429e      	cmp	r6, r3
 8010b28:	4604      	mov	r4, r0
 8010b2a:	460d      	mov	r5, r1
 8010b2c:	da0f      	bge.n	8010b4e <scalbn+0x4e>
 8010b2e:	a326      	add	r3, pc, #152	@ (adr r3, 8010bc8 <scalbn+0xc8>)
 8010b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b34:	e01e      	b.n	8010b74 <scalbn+0x74>
 8010b36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010b3a:	4291      	cmp	r1, r2
 8010b3c:	d10b      	bne.n	8010b56 <scalbn+0x56>
 8010b3e:	4622      	mov	r2, r4
 8010b40:	4620      	mov	r0, r4
 8010b42:	4629      	mov	r1, r5
 8010b44:	f7ef fb7a 	bl	800023c <__adddf3>
 8010b48:	4604      	mov	r4, r0
 8010b4a:	460d      	mov	r5, r1
 8010b4c:	e020      	b.n	8010b90 <scalbn+0x90>
 8010b4e:	460b      	mov	r3, r1
 8010b50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010b54:	3936      	subs	r1, #54	@ 0x36
 8010b56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010b5a:	4296      	cmp	r6, r2
 8010b5c:	dd0d      	ble.n	8010b7a <scalbn+0x7a>
 8010b5e:	2d00      	cmp	r5, #0
 8010b60:	a11b      	add	r1, pc, #108	@ (adr r1, 8010bd0 <scalbn+0xd0>)
 8010b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b66:	da02      	bge.n	8010b6e <scalbn+0x6e>
 8010b68:	a11b      	add	r1, pc, #108	@ (adr r1, 8010bd8 <scalbn+0xd8>)
 8010b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b6e:	a318      	add	r3, pc, #96	@ (adr r3, 8010bd0 <scalbn+0xd0>)
 8010b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b74:	f7ef fd18 	bl	80005a8 <__aeabi_dmul>
 8010b78:	e7e6      	b.n	8010b48 <scalbn+0x48>
 8010b7a:	1872      	adds	r2, r6, r1
 8010b7c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010b80:	428a      	cmp	r2, r1
 8010b82:	dcec      	bgt.n	8010b5e <scalbn+0x5e>
 8010b84:	2a00      	cmp	r2, #0
 8010b86:	dd06      	ble.n	8010b96 <scalbn+0x96>
 8010b88:	f36f 531e 	bfc	r3, #20, #11
 8010b8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010b90:	ec45 4b10 	vmov	d0, r4, r5
 8010b94:	bd70      	pop	{r4, r5, r6, pc}
 8010b96:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010b9a:	da08      	bge.n	8010bae <scalbn+0xae>
 8010b9c:	2d00      	cmp	r5, #0
 8010b9e:	a10a      	add	r1, pc, #40	@ (adr r1, 8010bc8 <scalbn+0xc8>)
 8010ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ba4:	dac3      	bge.n	8010b2e <scalbn+0x2e>
 8010ba6:	a10e      	add	r1, pc, #56	@ (adr r1, 8010be0 <scalbn+0xe0>)
 8010ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bac:	e7bf      	b.n	8010b2e <scalbn+0x2e>
 8010bae:	3236      	adds	r2, #54	@ 0x36
 8010bb0:	f36f 531e 	bfc	r3, #20, #11
 8010bb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010bb8:	4620      	mov	r0, r4
 8010bba:	4b0d      	ldr	r3, [pc, #52]	@ (8010bf0 <scalbn+0xf0>)
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	e7d8      	b.n	8010b74 <scalbn+0x74>
 8010bc2:	bf00      	nop
 8010bc4:	f3af 8000 	nop.w
 8010bc8:	c2f8f359 	.word	0xc2f8f359
 8010bcc:	01a56e1f 	.word	0x01a56e1f
 8010bd0:	8800759c 	.word	0x8800759c
 8010bd4:	7e37e43c 	.word	0x7e37e43c
 8010bd8:	8800759c 	.word	0x8800759c
 8010bdc:	fe37e43c 	.word	0xfe37e43c
 8010be0:	c2f8f359 	.word	0xc2f8f359
 8010be4:	81a56e1f 	.word	0x81a56e1f
 8010be8:	43500000 	.word	0x43500000
 8010bec:	ffff3cb0 	.word	0xffff3cb0
 8010bf0:	3c900000 	.word	0x3c900000

08010bf4 <with_errno>:
 8010bf4:	b510      	push	{r4, lr}
 8010bf6:	ed2d 8b02 	vpush	{d8}
 8010bfa:	eeb0 8a40 	vmov.f32	s16, s0
 8010bfe:	eef0 8a60 	vmov.f32	s17, s1
 8010c02:	4604      	mov	r4, r0
 8010c04:	f7fe fb66 	bl	800f2d4 <__errno>
 8010c08:	eeb0 0a48 	vmov.f32	s0, s16
 8010c0c:	eef0 0a68 	vmov.f32	s1, s17
 8010c10:	ecbd 8b02 	vpop	{d8}
 8010c14:	6004      	str	r4, [r0, #0]
 8010c16:	bd10      	pop	{r4, pc}

08010c18 <xflow>:
 8010c18:	4603      	mov	r3, r0
 8010c1a:	b507      	push	{r0, r1, r2, lr}
 8010c1c:	ec51 0b10 	vmov	r0, r1, d0
 8010c20:	b183      	cbz	r3, 8010c44 <xflow+0x2c>
 8010c22:	4602      	mov	r2, r0
 8010c24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c28:	e9cd 2300 	strd	r2, r3, [sp]
 8010c2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c30:	f7ef fcba 	bl	80005a8 <__aeabi_dmul>
 8010c34:	ec41 0b10 	vmov	d0, r0, r1
 8010c38:	2022      	movs	r0, #34	@ 0x22
 8010c3a:	b003      	add	sp, #12
 8010c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c40:	f7ff bfd8 	b.w	8010bf4 <with_errno>
 8010c44:	4602      	mov	r2, r0
 8010c46:	460b      	mov	r3, r1
 8010c48:	e7ee      	b.n	8010c28 <xflow+0x10>
 8010c4a:	0000      	movs	r0, r0
 8010c4c:	0000      	movs	r0, r0
	...

08010c50 <__math_uflow>:
 8010c50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010c58 <__math_uflow+0x8>
 8010c54:	f7ff bfe0 	b.w	8010c18 <xflow>
 8010c58:	00000000 	.word	0x00000000
 8010c5c:	10000000 	.word	0x10000000

08010c60 <__math_oflow>:
 8010c60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010c68 <__math_oflow+0x8>
 8010c64:	f7ff bfd8 	b.w	8010c18 <xflow>
 8010c68:	00000000 	.word	0x00000000
 8010c6c:	70000000 	.word	0x70000000

08010c70 <_init>:
 8010c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c72:	bf00      	nop
 8010c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c76:	bc08      	pop	{r3}
 8010c78:	469e      	mov	lr, r3
 8010c7a:	4770      	bx	lr

08010c7c <_fini>:
 8010c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c7e:	bf00      	nop
 8010c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c82:	bc08      	pop	{r3}
 8010c84:	469e      	mov	lr, r3
 8010c86:	4770      	bx	lr
